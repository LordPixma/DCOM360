{
  "version": 3,
  "sources": ["../../../node_modules/fast-xml-parser/src/util.js", "../../../node_modules/fast-xml-parser/src/validator.js", "../../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js", "../../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js", "../../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js", "../../../node_modules/strnum/strnum.js", "../../../node_modules/fast-xml-parser/src/ignoreAttributes.js", "../../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js", "../../../node_modules/fast-xml-parser/src/xmlparser/node2json.js", "../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js", "../../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js", "../../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js", "../../../node_modules/fast-xml-parser/src/fxp.js", "../../../src/parser.ts", "../../../src/gdacs.ts", "../../../src/reliefweb.ts", "../../../src/usgs.ts", "../../../src/noaa-cap.ts", "../../../src/nasa-firms.ts", "../../../node_modules/postal-mime/src/decode-strings.js", "../../../node_modules/postal-mime/src/pass-through-decoder.js", "../../../node_modules/postal-mime/src/base64-decoder.js", "../../../node_modules/postal-mime/src/qp-decoder.js", "../../../node_modules/postal-mime/src/mime-node.js", "../../../node_modules/postal-mime/src/html-entities.js", "../../../node_modules/postal-mime/src/text-format.js", "../../../node_modules/postal-mime/src/address-parser.js", "../../../node_modules/postal-mime/src/base64-encoder.js", "../../../node_modules/postal-mime/src/postal-mime.js", "../../../src/index.ts"],
  "sourceRoot": "C:\\Users\\SamuelOdekunle.AzureAD\\DCOM360\\DCOM360\\ingest-worker\\.wrangler\\tmp\\deploy-cQAKBJ",
  "sourcesContent": ["'use strict';\r\n\r\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\r\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\r\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\r\nconst regexName = new RegExp('^' + nameRegexp + '$');\r\n\r\nconst getAllMatches = function(string, regex) {\r\n  const matches = [];\r\n  let match = regex.exec(string);\r\n  while (match) {\r\n    const allmatches = [];\r\n    allmatches.startIndex = regex.lastIndex - match[0].length;\r\n    const len = match.length;\r\n    for (let index = 0; index < len; index++) {\r\n      allmatches.push(match[index]);\r\n    }\r\n    matches.push(allmatches);\r\n    match = regex.exec(string);\r\n  }\r\n  return matches;\r\n};\r\n\r\nconst isName = function(string) {\r\n  const match = regexName.exec(string);\r\n  return !(match === null || typeof match === 'undefined');\r\n};\r\n\r\nexports.isExist = function(v) {\r\n  return typeof v !== 'undefined';\r\n};\r\n\r\nexports.isEmptyObject = function(obj) {\r\n  return Object.keys(obj).length === 0;\r\n};\r\n\r\n/**\r\n * Copy all the properties of a into b.\r\n * @param {*} target\r\n * @param {*} a\r\n */\r\nexports.merge = function(target, a, arrayMode) {\r\n  if (a) {\r\n    const keys = Object.keys(a); // will return an array of own properties\r\n    const len = keys.length; //don't make it inline\r\n    for (let i = 0; i < len; i++) {\r\n      if (arrayMode === 'strict') {\r\n        target[keys[i]] = [ a[keys[i]] ];\r\n      } else {\r\n        target[keys[i]] = a[keys[i]];\r\n      }\r\n    }\r\n  }\r\n};\r\n/* exports.merge =function (b,a){\r\n  return Object.assign(b,a);\r\n} */\r\n\r\nexports.getValue = function(v) {\r\n  if (exports.isExist(v)) {\r\n    return v;\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\n// const fakeCall = function(a) {return a;};\r\n// const fakeCallNoReturn = function() {};\r\n\r\nexports.isName = isName;\r\nexports.getAllMatches = getAllMatches;\r\nexports.nameRegexp = nameRegexp;\r\n", "'use strict';\r\n\r\nconst util = require('./util');\r\n\r\nconst defaultOptions = {\r\n  allowBooleanAttributes: false, //A tag can have attributes without any value\r\n  unpairedTags: []\r\n};\r\n\r\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\r\nexports.validate = function (xmlData, options) {\r\n  options = Object.assign({}, defaultOptions, options);\r\n\r\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\r\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\r\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\r\n  const tags = [];\r\n  let tagFound = false;\r\n\r\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\r\n  let reachedRoot = false;\r\n\r\n  if (xmlData[0] === '\\ufeff') {\r\n    // check for byte order mark (BOM)\r\n    xmlData = xmlData.substr(1);\r\n  }\r\n  \r\n  for (let i = 0; i < xmlData.length; i++) {\r\n\r\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\r\n      i+=2;\r\n      i = readPI(xmlData,i);\r\n      if (i.err) return i;\r\n    }else if (xmlData[i] === '<') {\r\n      //starting of tag\r\n      //read until you reach to '>' avoiding any '>' in attribute value\r\n      let tagStartPos = i;\r\n      i++;\r\n      \r\n      if (xmlData[i] === '!') {\r\n        i = readCommentAndCDATA(xmlData, i);\r\n        continue;\r\n      } else {\r\n        let closingTag = false;\r\n        if (xmlData[i] === '/') {\r\n          //closing tag\r\n          closingTag = true;\r\n          i++;\r\n        }\r\n        //read tagname\r\n        let tagName = '';\r\n        for (; i < xmlData.length &&\r\n          xmlData[i] !== '>' &&\r\n          xmlData[i] !== ' ' &&\r\n          xmlData[i] !== '\\t' &&\r\n          xmlData[i] !== '\\n' &&\r\n          xmlData[i] !== '\\r'; i++\r\n        ) {\r\n          tagName += xmlData[i];\r\n        }\r\n        tagName = tagName.trim();\r\n        //console.log(tagName);\r\n\r\n        if (tagName[tagName.length - 1] === '/') {\r\n          //self closing tag without attributes\r\n          tagName = tagName.substring(0, tagName.length - 1);\r\n          //continue;\r\n          i--;\r\n        }\r\n        if (!validateTagName(tagName)) {\r\n          let msg;\r\n          if (tagName.trim().length === 0) {\r\n            msg = \"Invalid space after '<'.\";\r\n          } else {\r\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\r\n          }\r\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\r\n        }\r\n\r\n        const result = readAttributeStr(xmlData, i);\r\n        if (result === false) {\r\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\r\n        }\r\n        let attrStr = result.value;\r\n        i = result.index;\r\n\r\n        if (attrStr[attrStr.length - 1] === '/') {\r\n          //self closing tag\r\n          const attrStrStart = i - attrStr.length;\r\n          attrStr = attrStr.substring(0, attrStr.length - 1);\r\n          const isValid = validateAttributeString(attrStr, options);\r\n          if (isValid === true) {\r\n            tagFound = true;\r\n            //continue; //text may presents after self closing tag\r\n          } else {\r\n            //the result from the nested function returns the position of the error within the attribute\r\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\r\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\r\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\r\n          }\r\n        } else if (closingTag) {\r\n          if (!result.tagClosed) {\r\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\r\n          } else if (attrStr.trim().length > 0) {\r\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\r\n          } else if (tags.length === 0) {\r\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\r\n          } else {\r\n            const otg = tags.pop();\r\n            if (tagName !== otg.tagName) {\r\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\r\n              return getErrorObject('InvalidTag',\r\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\r\n                getLineNumberForPosition(xmlData, tagStartPos));\r\n            }\r\n\r\n            //when there are no more tags, we reached the root level.\r\n            if (tags.length == 0) {\r\n              reachedRoot = true;\r\n            }\r\n          }\r\n        } else {\r\n          const isValid = validateAttributeString(attrStr, options);\r\n          if (isValid !== true) {\r\n            //the result from the nested function returns the position of the error within the attribute\r\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\r\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\r\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\r\n          }\r\n\r\n          //if the root level has been reached before ...\r\n          if (reachedRoot === true) {\r\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\r\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\r\n            //don't push into stack\r\n          } else {\r\n            tags.push({tagName, tagStartPos});\r\n          }\r\n          tagFound = true;\r\n        }\r\n\r\n        //skip tag text value\r\n        //It may include comments and CDATA value\r\n        for (i++; i < xmlData.length; i++) {\r\n          if (xmlData[i] === '<') {\r\n            if (xmlData[i + 1] === '!') {\r\n              //comment or CADATA\r\n              i++;\r\n              i = readCommentAndCDATA(xmlData, i);\r\n              continue;\r\n            } else if (xmlData[i+1] === '?') {\r\n              i = readPI(xmlData, ++i);\r\n              if (i.err) return i;\r\n            } else{\r\n              break;\r\n            }\r\n          } else if (xmlData[i] === '&') {\r\n            const afterAmp = validateAmpersand(xmlData, i);\r\n            if (afterAmp == -1)\r\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\r\n            i = afterAmp;\r\n          }else{\r\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\r\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\r\n            }\r\n          }\r\n        } //end of reading tag text value\r\n        if (xmlData[i] === '<') {\r\n          i--;\r\n        }\r\n      }\r\n    } else {\r\n      if ( isWhiteSpace(xmlData[i])) {\r\n        continue;\r\n      }\r\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\r\n    }\r\n  }\r\n\r\n  if (!tagFound) {\r\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\r\n  }else if (tags.length == 1) {\r\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\r\n  }else if (tags.length > 0) {\r\n      return getErrorObject('InvalidXml', \"Invalid '\"+\r\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\r\n          \"' found.\", {line: 1, col: 1});\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction isWhiteSpace(char){\r\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\r\n}\r\n/**\r\n * Read Processing insstructions and skip\r\n * @param {*} xmlData\r\n * @param {*} i\r\n */\r\nfunction readPI(xmlData, i) {\r\n  const start = i;\r\n  for (; i < xmlData.length; i++) {\r\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\r\n      //tagname\r\n      const tagname = xmlData.substr(start, i - start);\r\n      if (i > 5 && tagname === 'xml') {\r\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\r\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\r\n        //check if valid attribut string\r\n        i++;\r\n        break;\r\n      } else {\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction readCommentAndCDATA(xmlData, i) {\r\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\r\n    //comment\r\n    for (i += 3; i < xmlData.length; i++) {\r\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\r\n        i += 2;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    xmlData.length > i + 8 &&\r\n    xmlData[i + 1] === 'D' &&\r\n    xmlData[i + 2] === 'O' &&\r\n    xmlData[i + 3] === 'C' &&\r\n    xmlData[i + 4] === 'T' &&\r\n    xmlData[i + 5] === 'Y' &&\r\n    xmlData[i + 6] === 'P' &&\r\n    xmlData[i + 7] === 'E'\r\n  ) {\r\n    let angleBracketsCount = 1;\r\n    for (i += 8; i < xmlData.length; i++) {\r\n      if (xmlData[i] === '<') {\r\n        angleBracketsCount++;\r\n      } else if (xmlData[i] === '>') {\r\n        angleBracketsCount--;\r\n        if (angleBracketsCount === 0) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  } else if (\r\n    xmlData.length > i + 9 &&\r\n    xmlData[i + 1] === '[' &&\r\n    xmlData[i + 2] === 'C' &&\r\n    xmlData[i + 3] === 'D' &&\r\n    xmlData[i + 4] === 'A' &&\r\n    xmlData[i + 5] === 'T' &&\r\n    xmlData[i + 6] === 'A' &&\r\n    xmlData[i + 7] === '['\r\n  ) {\r\n    for (i += 8; i < xmlData.length; i++) {\r\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\r\n        i += 2;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return i;\r\n}\r\n\r\nconst doubleQuote = '\"';\r\nconst singleQuote = \"'\";\r\n\r\n/**\r\n * Keep reading xmlData until '<' is found outside the attribute value.\r\n * @param {string} xmlData\r\n * @param {number} i\r\n */\r\nfunction readAttributeStr(xmlData, i) {\r\n  let attrStr = '';\r\n  let startChar = '';\r\n  let tagClosed = false;\r\n  for (; i < xmlData.length; i++) {\r\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\r\n      if (startChar === '') {\r\n        startChar = xmlData[i];\r\n      } else if (startChar !== xmlData[i]) {\r\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\r\n      } else {\r\n        startChar = '';\r\n      }\r\n    } else if (xmlData[i] === '>') {\r\n      if (startChar === '') {\r\n        tagClosed = true;\r\n        break;\r\n      }\r\n    }\r\n    attrStr += xmlData[i];\r\n  }\r\n  if (startChar !== '') {\r\n    return false;\r\n  }\r\n\r\n  return {\r\n    value: attrStr,\r\n    index: i,\r\n    tagClosed: tagClosed\r\n  };\r\n}\r\n\r\n/**\r\n * Select all the attributes whether valid or invalid.\r\n */\r\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\r\n\r\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\r\n\r\nfunction validateAttributeString(attrStr, options) {\r\n  //console.log(\"start:\"+attrStr+\":end\");\r\n\r\n  //if(attrStr.trim().length === 0) return true; //empty string\r\n\r\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\r\n  const attrNames = {};\r\n\r\n  for (let i = 0; i < matches.length; i++) {\r\n    if (matches[i][1].length === 0) {\r\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\r\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\r\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\r\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\r\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\r\n      //independent attribute: ab\r\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\r\n    }\r\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\r\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\r\n                } */\r\n    const attrName = matches[i][2];\r\n    if (!validateAttrName(attrName)) {\r\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\r\n    }\r\n    if (!attrNames.hasOwnProperty(attrName)) {\r\n      //check for duplicate attribute.\r\n      attrNames[attrName] = 1;\r\n    } else {\r\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction validateNumberAmpersand(xmlData, i) {\r\n  let re = /\\d/;\r\n  if (xmlData[i] === 'x') {\r\n    i++;\r\n    re = /[\\da-fA-F]/;\r\n  }\r\n  for (; i < xmlData.length; i++) {\r\n    if (xmlData[i] === ';')\r\n      return i;\r\n    if (!xmlData[i].match(re))\r\n      break;\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction validateAmpersand(xmlData, i) {\r\n  // https://www.w3.org/TR/xml/#dt-charref\r\n  i++;\r\n  if (xmlData[i] === ';')\r\n    return -1;\r\n  if (xmlData[i] === '#') {\r\n    i++;\r\n    return validateNumberAmpersand(xmlData, i);\r\n  }\r\n  let count = 0;\r\n  for (; i < xmlData.length; i++, count++) {\r\n    if (xmlData[i].match(/\\w/) && count < 20)\r\n      continue;\r\n    if (xmlData[i] === ';')\r\n      break;\r\n    return -1;\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction getErrorObject(code, message, lineNumber) {\r\n  return {\r\n    err: {\r\n      code: code,\r\n      msg: message,\r\n      line: lineNumber.line || lineNumber,\r\n      col: lineNumber.col,\r\n    },\r\n  };\r\n}\r\n\r\nfunction validateAttrName(attrName) {\r\n  return util.isName(attrName);\r\n}\r\n\r\n// const startsWithXML = /^xml/i;\r\n\r\nfunction validateTagName(tagname) {\r\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\r\n}\r\n\r\n//this function returns the line number for the character at the given index\r\nfunction getLineNumberForPosition(xmlData, index) {\r\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\r\n  return {\r\n    line: lines.length,\r\n\r\n    // column number is last line's length + 1, because column numbering starts at 1:\r\n    col: lines[lines.length - 1].length + 1\r\n  };\r\n}\r\n\r\n//this function returns the position of the first character of match within attrStr\r\nfunction getPositionFromMatch(match) {\r\n  return match.startIndex + match[1].length;\r\n}\r\n", "\r\nconst defaultOptions = {\r\n    preserveOrder: false,\r\n    attributeNamePrefix: '@_',\r\n    attributesGroupName: false,\r\n    textNodeName: '#text',\r\n    ignoreAttributes: true,\r\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\r\n    allowBooleanAttributes: false, //a tag can have attributes without any value\r\n    //ignoreRootElement : false,\r\n    parseTagValue: true,\r\n    parseAttributeValue: false,\r\n    trimValues: true, //Trim string values of tag and attributes\r\n    cdataPropName: false,\r\n    numberParseOptions: {\r\n      hex: true,\r\n      leadingZeros: true,\r\n      eNotation: true\r\n    },\r\n    tagValueProcessor: function(tagName, val) {\r\n      return val;\r\n    },\r\n    attributeValueProcessor: function(attrName, val) {\r\n      return val;\r\n    },\r\n    stopNodes: [], //nested tags will not be parsed even for errors\r\n    alwaysCreateTextNode: false,\r\n    isArray: () => false,\r\n    commentPropName: false,\r\n    unpairedTags: [],\r\n    processEntities: true,\r\n    htmlEntities: false,\r\n    ignoreDeclaration: false,\r\n    ignorePiTags: false,\r\n    transformTagName: false,\r\n    transformAttributeName: false,\r\n    updateTag: function(tagName, jPath, attrs){\r\n      return tagName\r\n    },\r\n    // skipEmptyListItem: false\r\n};\r\n   \r\nconst buildOptions = function(options) {\r\n    return Object.assign({}, defaultOptions, options);\r\n};\r\n\r\nexports.buildOptions = buildOptions;\r\nexports.defaultOptions = defaultOptions;", "'use strict';\r\n\r\nclass XmlNode{\r\n  constructor(tagname) {\r\n    this.tagname = tagname;\r\n    this.child = []; //nested tags, text, cdata, comments in order\r\n    this[\":@\"] = {}; //attributes map\r\n  }\r\n  add(key,val){\r\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\r\n    if(key === \"__proto__\") key = \"#__proto__\";\r\n    this.child.push( {[key]: val });\r\n  }\r\n  addChild(node) {\r\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\r\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\r\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\r\n    }else{\r\n      this.child.push( { [node.tagname]: node.child });\r\n    }\r\n  };\r\n};\r\n\r\n\r\nmodule.exports = XmlNode;", "const util = require('../util');\r\n\r\n//TODO: handle comments\r\nfunction readDocType(xmlData, i){\r\n    \r\n    const entities = {};\r\n    if( xmlData[i + 3] === 'O' &&\r\n         xmlData[i + 4] === 'C' &&\r\n         xmlData[i + 5] === 'T' &&\r\n         xmlData[i + 6] === 'Y' &&\r\n         xmlData[i + 7] === 'P' &&\r\n         xmlData[i + 8] === 'E')\r\n    {    \r\n        i = i+9;\r\n        let angleBracketsCount = 1;\r\n        let hasBody = false, comment = false;\r\n        let exp = \"\";\r\n        for(;i<xmlData.length;i++){\r\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\r\n                if( hasBody && isEntity(xmlData, i)){\r\n                    i += 7; \r\n                    let entityName, val;\r\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\r\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\r\n                        entities[ validateEntityName(entityName) ] = {\r\n                            regx : RegExp( `&${entityName};`,\"g\"),\r\n                            val: val\r\n                        };\r\n                }\r\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\r\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\r\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\r\n                else if( isComment)                         comment = true;\r\n                else                                        throw new Error(\"Invalid DOCTYPE\");\r\n\r\n                angleBracketsCount++;\r\n                exp = \"\";\r\n            } else if (xmlData[i] === '>') { //Read tag content\r\n                if(comment){\r\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\r\n                        comment = false;\r\n                        angleBracketsCount--;\r\n                    }\r\n                }else{\r\n                    angleBracketsCount--;\r\n                }\r\n                if (angleBracketsCount === 0) {\r\n                  break;\r\n                }\r\n            }else if( xmlData[i] === '['){\r\n                hasBody = true;\r\n            }else{\r\n                exp += xmlData[i];\r\n            }\r\n        }\r\n        if(angleBracketsCount !== 0){\r\n            throw new Error(`Unclosed DOCTYPE`);\r\n        }\r\n    }else{\r\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\r\n    }\r\n    return {entities, i};\r\n}\r\n\r\nfunction readEntityExp(xmlData,i){\r\n    //External entities are not supported\r\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\r\n\r\n    //Parameter entities are not supported\r\n    //    <!ENTITY entityname \"&anotherElement;\">\r\n\r\n    //Internal entities are supported\r\n    //    <!ENTITY entityname \"replacement text\">\r\n    \r\n    //read EntityName\r\n    let entityName = \"\";\r\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\r\n        // if(xmlData[i] === \" \") continue;\r\n        // else \r\n        entityName += xmlData[i];\r\n    }\r\n    entityName = entityName.trim();\r\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\r\n\r\n    //read Entity Value\r\n    const startChar = xmlData[i++];\r\n    let val = \"\"\r\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\r\n        val += xmlData[i];\r\n    }\r\n    return [entityName, val, i];\r\n}\r\n\r\nfunction isComment(xmlData, i){\r\n    if(xmlData[i+1] === '!' &&\r\n    xmlData[i+2] === '-' &&\r\n    xmlData[i+3] === '-') return true\r\n    return false\r\n}\r\nfunction isEntity(xmlData, i){\r\n    if(xmlData[i+1] === '!' &&\r\n    xmlData[i+2] === 'E' &&\r\n    xmlData[i+3] === 'N' &&\r\n    xmlData[i+4] === 'T' &&\r\n    xmlData[i+5] === 'I' &&\r\n    xmlData[i+6] === 'T' &&\r\n    xmlData[i+7] === 'Y') return true\r\n    return false\r\n}\r\nfunction isElement(xmlData, i){\r\n    if(xmlData[i+1] === '!' &&\r\n    xmlData[i+2] === 'E' &&\r\n    xmlData[i+3] === 'L' &&\r\n    xmlData[i+4] === 'E' &&\r\n    xmlData[i+5] === 'M' &&\r\n    xmlData[i+6] === 'E' &&\r\n    xmlData[i+7] === 'N' &&\r\n    xmlData[i+8] === 'T') return true\r\n    return false\r\n}\r\n\r\nfunction isAttlist(xmlData, i){\r\n    if(xmlData[i+1] === '!' &&\r\n    xmlData[i+2] === 'A' &&\r\n    xmlData[i+3] === 'T' &&\r\n    xmlData[i+4] === 'T' &&\r\n    xmlData[i+5] === 'L' &&\r\n    xmlData[i+6] === 'I' &&\r\n    xmlData[i+7] === 'S' &&\r\n    xmlData[i+8] === 'T') return true\r\n    return false\r\n}\r\nfunction isNotation(xmlData, i){\r\n    if(xmlData[i+1] === '!' &&\r\n    xmlData[i+2] === 'N' &&\r\n    xmlData[i+3] === 'O' &&\r\n    xmlData[i+4] === 'T' &&\r\n    xmlData[i+5] === 'A' &&\r\n    xmlData[i+6] === 'T' &&\r\n    xmlData[i+7] === 'I' &&\r\n    xmlData[i+8] === 'O' &&\r\n    xmlData[i+9] === 'N') return true\r\n    return false\r\n}\r\n\r\nfunction validateEntityName(name){\r\n    if (util.isName(name))\r\n\treturn name;\r\n    else\r\n        throw new Error(`Invalid entity name ${name}`);\r\n}\r\n\r\nmodule.exports = readDocType;\r\n", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\r\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\r\n// const octRegex = /^0x[a-z0-9]+/;\r\n// const binRegex = /0x[a-z0-9]+/;\r\n\r\n \r\nconst consider = {\r\n    hex :  true,\r\n    // oct: false,\r\n    leadingZeros: true,\r\n    decimalPoint: \"\\.\",\r\n    eNotation: true,\r\n    //skipLike: /regex/\r\n};\r\n\r\nfunction toNumber(str, options = {}){\r\n    options = Object.assign({}, consider, options );\r\n    if(!str || typeof str !== \"string\" ) return str;\r\n    \r\n    let trimmedStr  = str.trim();\r\n    \r\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\r\n    else if(str===\"0\") return 0;\r\n    else if (options.hex && hexRegex.test(trimmedStr)) {\r\n        return parse_int(trimmedStr, 16);\r\n    // }else if (options.oct && octRegex.test(str)) {\r\n    //     return Number.parseInt(val, 8);\r\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\r\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \r\n        // +00.123 => [ , '+', '00', '.123', ..\r\n        if(notation){\r\n            // console.log(notation)\r\n            if(options.leadingZeros){ //accept with leading zeros\r\n                trimmedStr = (notation[1] || \"\") + notation[3];\r\n            }else{\r\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\r\n                }else{\r\n                    return str;\r\n                }\r\n            }\r\n            return options.eNotation ? Number(trimmedStr) : str;\r\n        }else{\r\n            return str;\r\n        }\r\n    // }else if (options.parseBin && binRegex.test(str)) {\r\n    //     return Number.parseInt(val, 2);\r\n    }else{\r\n        //separate negative sign, leading zeros, and rest number\r\n        const match = numRegex.exec(trimmedStr);\r\n        // +00.123 => [ , '+', '00', '.123', ..\r\n        if(match){\r\n            const sign = match[1];\r\n            const leadingZeros = match[2];\r\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\r\n            //trim ending zeros for floating number\r\n            \r\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\r\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\r\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\r\n            \r\n            else{//no leading zeros or leading zeros are allowed\r\n                const num = Number(trimmedStr);\r\n                const numStr = \"\" + num;\r\n\r\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\r\n                    if(options.eNotation) return num;\r\n                    else return str;\r\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\r\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\r\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\r\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\r\n                    else return str;\r\n                }\r\n                \r\n                if(leadingZeros){\r\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\r\n                }else  {\r\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\r\n                }\r\n            }\r\n        }else{ //non-numeric string\r\n            return str;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} numStr without leading zeros\r\n * @returns \r\n */\r\nfunction trimZeros(numStr){\r\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\r\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\r\n        if(numStr === \".\")  numStr = \"0\";\r\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\r\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\r\n        return numStr;\r\n    }\r\n    return numStr;\r\n}\r\n\r\nfunction parse_int(numStr, base){\r\n    //polyfill\r\n    if(parseInt) return parseInt(numStr, base);\r\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\r\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\r\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\r\n}\r\n\r\nmodule.exports = toNumber;", "function getIgnoreAttributesFn(ignoreAttributes) {\r\n    if (typeof ignoreAttributes === 'function') {\r\n        return ignoreAttributes\r\n    }\r\n    if (Array.isArray(ignoreAttributes)) {\r\n        return (attrName) => {\r\n            for (const pattern of ignoreAttributes) {\r\n                if (typeof pattern === 'string' && attrName === pattern) {\r\n                    return true\r\n                }\r\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return () => false\r\n}\r\n\r\nmodule.exports = getIgnoreAttributesFn", "'use strict';\r\n///@ts-check\r\n\r\nconst util = require('../util');\r\nconst xmlNode = require('./xmlNode');\r\nconst readDocType = require(\"./DocTypeReader\");\r\nconst toNumber = require(\"strnum\");\r\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\r\n\r\n// const regx =\r\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\r\n//   .replace(/NAME/g, util.nameRegexp);\r\n\r\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\r\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\r\n\r\nclass OrderedObjParser{\r\n  constructor(options){\r\n    this.options = options;\r\n    this.currentNode = null;\r\n    this.tagsNodeStack = [];\r\n    this.docTypeEntities = {};\r\n    this.lastEntities = {\r\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\r\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\r\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\r\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\r\n    };\r\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\r\n    this.htmlEntities = {\r\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\r\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\r\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\r\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\r\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\r\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\r\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"\u00A2\" },\r\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"\u00A3\" },\r\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"\u00A5\" },\r\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"\u20AC\" },\r\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"\u00A9\" },\r\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"\u00AE\" },\r\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"\u20B9\" },\r\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\r\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\r\n    };\r\n    this.addExternalEntities = addExternalEntities;\r\n    this.parseXml = parseXml;\r\n    this.parseTextData = parseTextData;\r\n    this.resolveNameSpace = resolveNameSpace;\r\n    this.buildAttributesMap = buildAttributesMap;\r\n    this.isItStopNode = isItStopNode;\r\n    this.replaceEntitiesValue = replaceEntitiesValue;\r\n    this.readStopNodeData = readStopNodeData;\r\n    this.saveTextToParentTag = saveTextToParentTag;\r\n    this.addChild = addChild;\r\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\r\n  }\r\n\r\n}\r\n\r\nfunction addExternalEntities(externalEntities){\r\n  const entKeys = Object.keys(externalEntities);\r\n  for (let i = 0; i < entKeys.length; i++) {\r\n    const ent = entKeys[i];\r\n    this.lastEntities[ent] = {\r\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\r\n       val : externalEntities[ent]\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} val\r\n * @param {string} tagName\r\n * @param {string} jPath\r\n * @param {boolean} dontTrim\r\n * @param {boolean} hasAttributes\r\n * @param {boolean} isLeafNode\r\n * @param {boolean} escapeEntities\r\n */\r\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\r\n  if (val !== undefined) {\r\n    if (this.options.trimValues && !dontTrim) {\r\n      val = val.trim();\r\n    }\r\n    if(val.length > 0){\r\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\r\n      \r\n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\r\n      if(newval === null || newval === undefined){\r\n        //don't parse\r\n        return val;\r\n      }else if(typeof newval !== typeof val || newval !== val){\r\n        //overwrite\r\n        return newval;\r\n      }else if(this.options.trimValues){\r\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\r\n      }else{\r\n        const trimmedVal = val.trim();\r\n        if(trimmedVal === val){\r\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\r\n        }else{\r\n          return val;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveNameSpace(tagname) {\r\n  if (this.options.removeNSPrefix) {\r\n    const tags = tagname.split(':');\r\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\r\n    if (tags[0] === 'xmlns') {\r\n      return '';\r\n    }\r\n    if (tags.length === 2) {\r\n      tagname = prefix + tags[1];\r\n    }\r\n  }\r\n  return tagname;\r\n}\r\n\r\n//TODO: change regex to capture NS\r\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\r\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\r\n\r\nfunction buildAttributesMap(attrStr, jPath, tagName) {\r\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\r\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\r\n    //attrStr = attrStr || attrStr.trim();\r\n\r\n    const matches = util.getAllMatches(attrStr, attrsRegx);\r\n    const len = matches.length; //don't make it inline\r\n    const attrs = {};\r\n    for (let i = 0; i < len; i++) {\r\n      const attrName = this.resolveNameSpace(matches[i][1]);\r\n      if (this.ignoreAttributesFn(attrName, jPath)) {\r\n        continue\r\n      }\r\n      let oldVal = matches[i][4];\r\n      let aName = this.options.attributeNamePrefix + attrName;\r\n      if (attrName.length) {\r\n        if (this.options.transformAttributeName) {\r\n          aName = this.options.transformAttributeName(aName);\r\n        }\r\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\r\n        if (oldVal !== undefined) {\r\n          if (this.options.trimValues) {\r\n            oldVal = oldVal.trim();\r\n          }\r\n          oldVal = this.replaceEntitiesValue(oldVal);\r\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\r\n          if(newVal === null || newVal === undefined){\r\n            //don't parse\r\n            attrs[aName] = oldVal;\r\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\r\n            //overwrite\r\n            attrs[aName] = newVal;\r\n          }else{\r\n            //parse\r\n            attrs[aName] = parseValue(\r\n              oldVal,\r\n              this.options.parseAttributeValue,\r\n              this.options.numberParseOptions\r\n            );\r\n          }\r\n        } else if (this.options.allowBooleanAttributes) {\r\n          attrs[aName] = true;\r\n        }\r\n      }\r\n    }\r\n    if (!Object.keys(attrs).length) {\r\n      return;\r\n    }\r\n    if (this.options.attributesGroupName) {\r\n      const attrCollection = {};\r\n      attrCollection[this.options.attributesGroupName] = attrs;\r\n      return attrCollection;\r\n    }\r\n    return attrs\r\n  }\r\n}\r\n\r\nconst parseXml = function(xmlData) {\r\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\r\n  const xmlObj = new xmlNode('!xml');\r\n  let currentNode = xmlObj;\r\n  let textData = \"\";\r\n  let jPath = \"\";\r\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\r\n    const ch = xmlData[i];\r\n    if(ch === '<'){\r\n      // const nextIndex = i+1;\r\n      // const _2ndChar = xmlData[nextIndex];\r\n      if( xmlData[i+1] === '/') {//Closing Tag\r\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\r\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\r\n\r\n        if(this.options.removeNSPrefix){\r\n          const colonIndex = tagName.indexOf(\":\");\r\n          if(colonIndex !== -1){\r\n            tagName = tagName.substr(colonIndex+1);\r\n          }\r\n        }\r\n\r\n        if(this.options.transformTagName) {\r\n          tagName = this.options.transformTagName(tagName);\r\n        }\r\n\r\n        if(currentNode){\r\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\r\n        }\r\n\r\n        //check if last tag of nested tag was unpaired tag\r\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\r\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\r\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\r\n        }\r\n        let propIndex = 0\r\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\r\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\r\n          this.tagsNodeStack.pop();\r\n        }else{\r\n          propIndex = jPath.lastIndexOf(\".\");\r\n        }\r\n        jPath = jPath.substring(0, propIndex);\r\n\r\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\r\n        textData = \"\";\r\n        i = closeIndex;\r\n      } else if( xmlData[i+1] === '?') {\r\n\r\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\r\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\r\n\r\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\r\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\r\n\r\n        }else{\r\n  \r\n          const childNode = new xmlNode(tagData.tagName);\r\n          childNode.add(this.options.textNodeName, \"\");\r\n          \r\n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\r\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\r\n          }\r\n          this.addChild(currentNode, childNode, jPath)\r\n\r\n        }\r\n\r\n\r\n        i = tagData.closeIndex + 1;\r\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\r\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\r\n        if(this.options.commentPropName){\r\n          const comment = xmlData.substring(i + 4, endIndex - 2);\r\n\r\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\r\n\r\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\r\n        }\r\n        i = endIndex;\r\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\r\n        const result = readDocType(xmlData, i);\r\n        this.docTypeEntities = result.entities;\r\n        i = result.i;\r\n      }else if(xmlData.substr(i + 1, 2) === '![') {\r\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\r\n        const tagExp = xmlData.substring(i + 9,closeIndex);\r\n\r\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\r\n\r\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\r\n        if(val == undefined) val = \"\";\r\n\r\n        //cdata should be set even if it is 0 length string\r\n        if(this.options.cdataPropName){\r\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\r\n        }else{\r\n          currentNode.add(this.options.textNodeName, val);\r\n        }\r\n        \r\n        i = closeIndex + 2;\r\n      }else {//Opening tag\r\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\r\n        let tagName= result.tagName;\r\n        const rawTagName = result.rawTagName;\r\n        let tagExp = result.tagExp;\r\n        let attrExpPresent = result.attrExpPresent;\r\n        let closeIndex = result.closeIndex;\r\n\r\n        if (this.options.transformTagName) {\r\n          tagName = this.options.transformTagName(tagName);\r\n        }\r\n        \r\n        //save text as child node\r\n        if (currentNode && textData) {\r\n          if(currentNode.tagname !== '!xml'){\r\n            //when nested tag is found\r\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\r\n          }\r\n        }\r\n\r\n        //check if last tag was unpaired tag\r\n        const lastTag = currentNode;\r\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\r\n          currentNode = this.tagsNodeStack.pop();\r\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\r\n        }\r\n        if(tagName !== xmlObj.tagname){\r\n          jPath += jPath ? \".\" + tagName : tagName;\r\n        }\r\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\r\n          let tagContent = \"\";\r\n          //self-closing tag\r\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\r\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\r\n              tagName = tagName.substr(0, tagName.length - 1);\r\n              jPath = jPath.substr(0, jPath.length - 1);\r\n              tagExp = tagName;\r\n            }else{\r\n              tagExp = tagExp.substr(0, tagExp.length - 1);\r\n            }\r\n            i = result.closeIndex;\r\n          }\r\n          //unpaired tag\r\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\r\n            \r\n            i = result.closeIndex;\r\n          }\r\n          //normal tag\r\n          else{\r\n            //read until closing tag is found\r\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\r\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\r\n            i = result.i;\r\n            tagContent = result.tagContent;\r\n          }\r\n\r\n          const childNode = new xmlNode(tagName);\r\n          if(tagName !== tagExp && attrExpPresent){\r\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\r\n          }\r\n          if(tagContent) {\r\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\r\n          }\r\n          \r\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\r\n          childNode.add(this.options.textNodeName, tagContent);\r\n          \r\n          this.addChild(currentNode, childNode, jPath)\r\n        }else{\r\n  //selfClosing tag\r\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\r\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\r\n              tagName = tagName.substr(0, tagName.length - 1);\r\n              jPath = jPath.substr(0, jPath.length - 1);\r\n              tagExp = tagName;\r\n            }else{\r\n              tagExp = tagExp.substr(0, tagExp.length - 1);\r\n            }\r\n            \r\n            if(this.options.transformTagName) {\r\n              tagName = this.options.transformTagName(tagName);\r\n            }\r\n\r\n            const childNode = new xmlNode(tagName);\r\n            if(tagName !== tagExp && attrExpPresent){\r\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\r\n            }\r\n            this.addChild(currentNode, childNode, jPath)\r\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\r\n          }\r\n    //opening tag\r\n          else{\r\n            const childNode = new xmlNode( tagName);\r\n            this.tagsNodeStack.push(currentNode);\r\n            \r\n            if(tagName !== tagExp && attrExpPresent){\r\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\r\n            }\r\n            this.addChild(currentNode, childNode, jPath)\r\n            currentNode = childNode;\r\n          }\r\n          textData = \"\";\r\n          i = closeIndex;\r\n        }\r\n      }\r\n    }else{\r\n      textData += xmlData[i];\r\n    }\r\n  }\r\n  return xmlObj.child;\r\n}\r\n\r\nfunction addChild(currentNode, childNode, jPath){\r\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\r\n  if(result === false){\r\n  }else if(typeof result === \"string\"){\r\n    childNode.tagname = result\r\n    currentNode.addChild(childNode);\r\n  }else{\r\n    currentNode.addChild(childNode);\r\n  }\r\n}\r\n\r\nconst replaceEntitiesValue = function(val){\r\n\r\n  if(this.options.processEntities){\r\n    for(let entityName in this.docTypeEntities){\r\n      const entity = this.docTypeEntities[entityName];\r\n      val = val.replace( entity.regx, entity.val);\r\n    }\r\n    for(let entityName in this.lastEntities){\r\n      const entity = this.lastEntities[entityName];\r\n      val = val.replace( entity.regex, entity.val);\r\n    }\r\n    if(this.options.htmlEntities){\r\n      for(let entityName in this.htmlEntities){\r\n        const entity = this.htmlEntities[entityName];\r\n        val = val.replace( entity.regex, entity.val);\r\n      }\r\n    }\r\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\r\n  }\r\n  return val;\r\n}\r\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\r\n  if (textData) { //store previously collected data as textNode\r\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\r\n    \r\n    textData = this.parseTextData(textData,\r\n      currentNode.tagname,\r\n      jPath,\r\n      false,\r\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\r\n      isLeafNode);\r\n\r\n    if (textData !== undefined && textData !== \"\")\r\n      currentNode.add(this.options.textNodeName, textData);\r\n    textData = \"\";\r\n  }\r\n  return textData;\r\n}\r\n\r\n//TODO: use jPath to simplify the logic\r\n/**\r\n * \r\n * @param {string[]} stopNodes \r\n * @param {string} jPath\r\n * @param {string} currentTagName \r\n */\r\nfunction isItStopNode(stopNodes, jPath, currentTagName){\r\n  const allNodesExp = \"*.\" + currentTagName;\r\n  for (const stopNodePath in stopNodes) {\r\n    const stopNodeExp = stopNodes[stopNodePath];\r\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns the tag Expression and where it is ending handling single-double quotes situation\r\n * @param {string} xmlData \r\n * @param {number} i starting index\r\n * @returns \r\n */\r\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\r\n  let attrBoundary;\r\n  let tagExp = \"\";\r\n  for (let index = i; index < xmlData.length; index++) {\r\n    let ch = xmlData[index];\r\n    if (attrBoundary) {\r\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\r\n    } else if (ch === '\"' || ch === \"'\") {\r\n        attrBoundary = ch;\r\n    } else if (ch === closingChar[0]) {\r\n      if(closingChar[1]){\r\n        if(xmlData[index + 1] === closingChar[1]){\r\n          return {\r\n            data: tagExp,\r\n            index: index\r\n          }\r\n        }\r\n      }else{\r\n        return {\r\n          data: tagExp,\r\n          index: index\r\n        }\r\n      }\r\n    } else if (ch === '\\t') {\r\n      ch = \" \"\r\n    }\r\n    tagExp += ch;\r\n  }\r\n}\r\n\r\nfunction findClosingIndex(xmlData, str, i, errMsg){\r\n  const closingIndex = xmlData.indexOf(str, i);\r\n  if(closingIndex === -1){\r\n    throw new Error(errMsg)\r\n  }else{\r\n    return closingIndex + str.length - 1;\r\n  }\r\n}\r\n\r\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\r\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\r\n  if(!result) return;\r\n  let tagExp = result.data;\r\n  const closeIndex = result.index;\r\n  const separatorIndex = tagExp.search(/\\s/);\r\n  let tagName = tagExp;\r\n  let attrExpPresent = true;\r\n  if(separatorIndex !== -1){//separate tag name and attributes expression\r\n    tagName = tagExp.substring(0, separatorIndex);\r\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\r\n  }\r\n\r\n  const rawTagName = tagName;\r\n  if(removeNSPrefix){\r\n    const colonIndex = tagName.indexOf(\":\");\r\n    if(colonIndex !== -1){\r\n      tagName = tagName.substr(colonIndex+1);\r\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\r\n    }\r\n  }\r\n\r\n  return {\r\n    tagName: tagName,\r\n    tagExp: tagExp,\r\n    closeIndex: closeIndex,\r\n    attrExpPresent: attrExpPresent,\r\n    rawTagName: rawTagName,\r\n  }\r\n}\r\n/**\r\n * find paired tag for a stop node\r\n * @param {string} xmlData \r\n * @param {string} tagName \r\n * @param {number} i \r\n */\r\nfunction readStopNodeData(xmlData, tagName, i){\r\n  const startIndex = i;\r\n  // Starting at 1 since we already have an open tag\r\n  let openTagCount = 1;\r\n\r\n  for (; i < xmlData.length; i++) {\r\n    if( xmlData[i] === \"<\"){ \r\n      if (xmlData[i+1] === \"/\") {//close tag\r\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\r\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\r\n          if(closeTagName === tagName){\r\n            openTagCount--;\r\n            if (openTagCount === 0) {\r\n              return {\r\n                tagContent: xmlData.substring(startIndex, i),\r\n                i : closeIndex\r\n              }\r\n            }\r\n          }\r\n          i=closeIndex;\r\n        } else if(xmlData[i+1] === '?') { \r\n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\r\n          i=closeIndex;\r\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \r\n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\r\n          i=closeIndex;\r\n        } else if(xmlData.substr(i + 1, 2) === '![') { \r\n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\r\n          i=closeIndex;\r\n        } else {\r\n          const tagData = readTagExp(xmlData, i, '>')\r\n\r\n          if (tagData) {\r\n            const openTagName = tagData && tagData.tagName;\r\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\r\n              openTagCount++;\r\n            }\r\n            i=tagData.closeIndex;\r\n          }\r\n        }\r\n      }\r\n  }//end for loop\r\n}\r\n\r\nfunction parseValue(val, shouldParse, options) {\r\n  if (shouldParse && typeof val === 'string') {\r\n    //console.log(options)\r\n    const newval = val.trim();\r\n    if(newval === 'true' ) return true;\r\n    else if(newval === 'false' ) return false;\r\n    else return toNumber(val, options);\r\n  } else {\r\n    if (util.isExist(val)) {\r\n      return val;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = OrderedObjParser;\r\n", "'use strict';\r\n\r\n/**\r\n * \r\n * @param {array} node \r\n * @param {any} options \r\n * @returns \r\n */\r\nfunction prettify(node, options){\r\n  return compress( node, options);\r\n}\r\n\r\n/**\r\n * \r\n * @param {array} arr \r\n * @param {object} options \r\n * @param {string} jPath \r\n * @returns object\r\n */\r\nfunction compress(arr, options, jPath){\r\n  let text;\r\n  const compressedObj = {};\r\n  for (let i = 0; i < arr.length; i++) {\r\n    const tagObj = arr[i];\r\n    const property = propName(tagObj);\r\n    let newJpath = \"\";\r\n    if(jPath === undefined) newJpath = property;\r\n    else newJpath = jPath + \".\" + property;\r\n\r\n    if(property === options.textNodeName){\r\n      if(text === undefined) text = tagObj[property];\r\n      else text += \"\" + tagObj[property];\r\n    }else if(property === undefined){\r\n      continue;\r\n    }else if(tagObj[property]){\r\n      \r\n      let val = compress(tagObj[property], options, newJpath);\r\n      const isLeaf = isLeafTag(val, options);\r\n\r\n      if(tagObj[\":@\"]){\r\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\r\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\r\n        val = val[options.textNodeName];\r\n      }else if(Object.keys(val).length === 0){\r\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\r\n        else val = \"\";\r\n      }\r\n\r\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\r\n        if(!Array.isArray(compressedObj[property])) {\r\n            compressedObj[property] = [ compressedObj[property] ];\r\n        }\r\n        compressedObj[property].push(val);\r\n      }else{\r\n        //TODO: if a node is not an array, then check if it should be an array\r\n        //also determine if it is a leaf node\r\n        if (options.isArray(property, newJpath, isLeaf )) {\r\n          compressedObj[property] = [val];\r\n        }else{\r\n          compressedObj[property] = val;\r\n        }\r\n      }\r\n    }\r\n    \r\n  }\r\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\r\n  if(typeof text === \"string\"){\r\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\r\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\r\n  return compressedObj;\r\n}\r\n\r\nfunction propName(obj){\r\n  const keys = Object.keys(obj);\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    if(key !== \":@\") return key;\r\n  }\r\n}\r\n\r\nfunction assignAttributes(obj, attrMap, jpath, options){\r\n  if (attrMap) {\r\n    const keys = Object.keys(attrMap);\r\n    const len = keys.length; //don't make it inline\r\n    for (let i = 0; i < len; i++) {\r\n      const atrrName = keys[i];\r\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\r\n        obj[atrrName] = [ attrMap[atrrName] ];\r\n      } else {\r\n        obj[atrrName] = attrMap[atrrName];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isLeafTag(obj, options){\r\n  const { textNodeName } = options;\r\n  const propCount = Object.keys(obj).length;\r\n  \r\n  if (propCount === 0) {\r\n    return true;\r\n  }\r\n\r\n  if (\r\n    propCount === 1 &&\r\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\nexports.prettify = prettify;\r\n", "const { buildOptions} = require(\"./OptionsBuilder\");\r\nconst OrderedObjParser = require(\"./OrderedObjParser\");\r\nconst { prettify} = require(\"./node2json\");\r\nconst validator = require('../validator');\r\n\r\nclass XMLParser{\r\n    \r\n    constructor(options){\r\n        this.externalEntities = {};\r\n        this.options = buildOptions(options);\r\n        \r\n    }\r\n    /**\r\n     * Parse XML dats to JS object \r\n     * @param {string|Buffer} xmlData \r\n     * @param {boolean|Object} validationOption \r\n     */\r\n    parse(xmlData,validationOption){\r\n        if(typeof xmlData === \"string\"){\r\n        }else if( xmlData.toString){\r\n            xmlData = xmlData.toString();\r\n        }else{\r\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\r\n        }\r\n        if( validationOption){\r\n            if(validationOption === true) validationOption = {}; //validate with default options\r\n            \r\n            const result = validator.validate(xmlData, validationOption);\r\n            if (result !== true) {\r\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\r\n            }\r\n          }\r\n        const orderedObjParser = new OrderedObjParser(this.options);\r\n        orderedObjParser.addExternalEntities(this.externalEntities);\r\n        const orderedResult = orderedObjParser.parseXml(xmlData);\r\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\r\n        else return prettify(orderedResult, this.options);\r\n    }\r\n\r\n    /**\r\n     * Add Entity which is not by default supported by this library\r\n     * @param {string} key \r\n     * @param {string} value \r\n     */\r\n    addEntity(key, value){\r\n        if(value.indexOf(\"&\") !== -1){\r\n            throw new Error(\"Entity value can't have '&'\")\r\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\r\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\r\n        }else if(value === \"&\"){\r\n            throw new Error(\"An entity with value '&' is not permitted\");\r\n        }else{\r\n            this.externalEntities[key] = value;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = XMLParser;", "const EOL = \"\\n\";\r\n\r\n/**\r\n * \r\n * @param {array} jArray \r\n * @param {any} options \r\n * @returns \r\n */\r\nfunction toXml(jArray, options) {\r\n    let indentation = \"\";\r\n    if (options.format && options.indentBy.length > 0) {\r\n        indentation = EOL;\r\n    }\r\n    return arrToStr(jArray, options, \"\", indentation);\r\n}\r\n\r\nfunction arrToStr(arr, options, jPath, indentation) {\r\n    let xmlStr = \"\";\r\n    let isPreviousElementTag = false;\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const tagObj = arr[i];\r\n        const tagName = propName(tagObj);\r\n        if(tagName === undefined) continue;\r\n\r\n        let newJPath = \"\";\r\n        if (jPath.length === 0) newJPath = tagName\r\n        else newJPath = `${jPath}.${tagName}`;\r\n\r\n        if (tagName === options.textNodeName) {\r\n            let tagText = tagObj[tagName];\r\n            if (!isStopNode(newJPath, options)) {\r\n                tagText = options.tagValueProcessor(tagName, tagText);\r\n                tagText = replaceEntitiesValue(tagText, options);\r\n            }\r\n            if (isPreviousElementTag) {\r\n                xmlStr += indentation;\r\n            }\r\n            xmlStr += tagText;\r\n            isPreviousElementTag = false;\r\n            continue;\r\n        } else if (tagName === options.cdataPropName) {\r\n            if (isPreviousElementTag) {\r\n                xmlStr += indentation;\r\n            }\r\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\r\n            isPreviousElementTag = false;\r\n            continue;\r\n        } else if (tagName === options.commentPropName) {\r\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\r\n            isPreviousElementTag = true;\r\n            continue;\r\n        } else if (tagName[0] === \"?\") {\r\n            const attStr = attr_to_str(tagObj[\":@\"], options);\r\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\r\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\r\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\r\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\r\n            isPreviousElementTag = true;\r\n            continue;\r\n        }\r\n        let newIdentation = indentation;\r\n        if (newIdentation !== \"\") {\r\n            newIdentation += options.indentBy;\r\n        }\r\n        const attStr = attr_to_str(tagObj[\":@\"], options);\r\n        const tagStart = indentation + `<${tagName}${attStr}`;\r\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\r\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\r\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\r\n            else xmlStr += tagStart + \"/>\";\r\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\r\n            xmlStr += tagStart + \"/>\";\r\n        } else if (tagValue && tagValue.endsWith(\">\")) {\r\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\r\n        } else {\r\n            xmlStr += tagStart + \">\";\r\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\r\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\r\n            } else {\r\n                xmlStr += tagValue;\r\n            }\r\n            xmlStr += `</${tagName}>`;\r\n        }\r\n        isPreviousElementTag = true;\r\n    }\r\n\r\n    return xmlStr;\r\n}\r\n\r\nfunction propName(obj) {\r\n    const keys = Object.keys(obj);\r\n    for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        if(!obj.hasOwnProperty(key)) continue;\r\n        if (key !== \":@\") return key;\r\n    }\r\n}\r\n\r\nfunction attr_to_str(attrMap, options) {\r\n    let attrStr = \"\";\r\n    if (attrMap && !options.ignoreAttributes) {\r\n        for (let attr in attrMap) {\r\n            if(!attrMap.hasOwnProperty(attr)) continue;\r\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\r\n            attrVal = replaceEntitiesValue(attrVal, options);\r\n            if (attrVal === true && options.suppressBooleanAttributes) {\r\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\r\n            } else {\r\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\r\n            }\r\n        }\r\n    }\r\n    return attrStr;\r\n}\r\n\r\nfunction isStopNode(jPath, options) {\r\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\r\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\r\n    for (let index in options.stopNodes) {\r\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction replaceEntitiesValue(textValue, options) {\r\n    if (textValue && textValue.length > 0 && options.processEntities) {\r\n        for (let i = 0; i < options.entities.length; i++) {\r\n            const entity = options.entities[i];\r\n            textValue = textValue.replace(entity.regex, entity.val);\r\n        }\r\n    }\r\n    return textValue;\r\n}\r\nmodule.exports = toXml;\r\n", "'use strict';\r\n//parse Empty Node as self closing node\r\nconst buildFromOrderedJs = require('./orderedJs2Xml');\r\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\r\n\r\nconst defaultOptions = {\r\n  attributeNamePrefix: '@_',\r\n  attributesGroupName: false,\r\n  textNodeName: '#text',\r\n  ignoreAttributes: true,\r\n  cdataPropName: false,\r\n  format: false,\r\n  indentBy: '  ',\r\n  suppressEmptyNode: false,\r\n  suppressUnpairedNode: true,\r\n  suppressBooleanAttributes: true,\r\n  tagValueProcessor: function(key, a) {\r\n    return a;\r\n  },\r\n  attributeValueProcessor: function(attrName, a) {\r\n    return a;\r\n  },\r\n  preserveOrder: false,\r\n  commentPropName: false,\r\n  unpairedTags: [],\r\n  entities: [\r\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\r\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\r\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\r\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\r\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\r\n  ],\r\n  processEntities: true,\r\n  stopNodes: [],\r\n  // transformTagName: false,\r\n  // transformAttributeName: false,\r\n  oneListGroup: false\r\n};\r\n\r\nfunction Builder(options) {\r\n  this.options = Object.assign({}, defaultOptions, options);\r\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\r\n    this.isAttribute = function(/*a*/) {\r\n      return false;\r\n    };\r\n  } else {\r\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\r\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\r\n    this.isAttribute = isAttribute;\r\n  }\r\n\r\n  this.processTextOrObjNode = processTextOrObjNode\r\n\r\n  if (this.options.format) {\r\n    this.indentate = indentate;\r\n    this.tagEndChar = '>\\n';\r\n    this.newLine = '\\n';\r\n  } else {\r\n    this.indentate = function() {\r\n      return '';\r\n    };\r\n    this.tagEndChar = '>';\r\n    this.newLine = '';\r\n  }\r\n}\r\n\r\nBuilder.prototype.build = function(jObj) {\r\n  if(this.options.preserveOrder){\r\n    return buildFromOrderedJs(jObj, this.options);\r\n  }else {\r\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\r\n      jObj = {\r\n        [this.options.arrayNodeName] : jObj\r\n      }\r\n    }\r\n    return this.j2x(jObj, 0, []).val;\r\n  }\r\n};\r\n\r\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\r\n  let attrStr = '';\r\n  let val = '';\r\n  const jPath = ajPath.join('.')\r\n  for (let key in jObj) {\r\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\r\n    if (typeof jObj[key] === 'undefined') {\r\n      // supress undefined node only if it is not an attribute\r\n      if (this.isAttribute(key)) {\r\n        val += '';\r\n      }\r\n    } else if (jObj[key] === null) {\r\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\r\n      if (this.isAttribute(key)) {\r\n        val += '';\r\n      } else if (key === this.options.cdataPropName) {\r\n        val += '';\r\n      } else if (key[0] === '?') {\r\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\r\n      } else {\r\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\r\n      }\r\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\r\n    } else if (jObj[key] instanceof Date) {\r\n      val += this.buildTextValNode(jObj[key], key, '', level);\r\n    } else if (typeof jObj[key] !== 'object') {\r\n      //premitive type\r\n      const attr = this.isAttribute(key);\r\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\r\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\r\n      } else if (!attr) {\r\n        //tag value\r\n        if (key === this.options.textNodeName) {\r\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\r\n          val += this.replaceEntitiesValue(newval);\r\n        } else {\r\n          val += this.buildTextValNode(jObj[key], key, '', level);\r\n        }\r\n      }\r\n    } else if (Array.isArray(jObj[key])) {\r\n      //repeated nodes\r\n      const arrLen = jObj[key].length;\r\n      let listTagVal = \"\";\r\n      let listTagAttr = \"\";\r\n      for (let j = 0; j < arrLen; j++) {\r\n        const item = jObj[key][j];\r\n        if (typeof item === 'undefined') {\r\n          // supress undefined node\r\n        } else if (item === null) {\r\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\r\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\r\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\r\n        } else if (typeof item === 'object') {\r\n          if(this.options.oneListGroup){\r\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\r\n            listTagVal += result.val;\r\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\r\n              listTagAttr += result.attrStr\r\n            }\r\n          }else{\r\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\r\n          }\r\n        } else {\r\n          if (this.options.oneListGroup) {\r\n            let textValue = this.options.tagValueProcessor(key, item);\r\n            textValue = this.replaceEntitiesValue(textValue);\r\n            listTagVal += textValue;\r\n          } else {\r\n            listTagVal += this.buildTextValNode(item, key, '', level);\r\n          }\r\n        }\r\n      }\r\n      if(this.options.oneListGroup){\r\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\r\n      }\r\n      val += listTagVal;\r\n    } else {\r\n      //nested node\r\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\r\n        const Ks = Object.keys(jObj[key]);\r\n        const L = Ks.length;\r\n        for (let j = 0; j < L; j++) {\r\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\r\n        }\r\n      } else {\r\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\r\n      }\r\n    }\r\n  }\r\n  return {attrStr: attrStr, val: val};\r\n};\r\n\r\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\r\n  val = this.options.attributeValueProcessor(attrName, '' + val);\r\n  val = this.replaceEntitiesValue(val);\r\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\r\n    return ' ' + attrName;\r\n  } else return ' ' + attrName + '=\"' + val + '\"';\r\n}\r\n\r\nfunction processTextOrObjNode (object, key, level, ajPath) {\r\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\r\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\r\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\r\n  } else {\r\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\r\n  }\r\n}\r\n\r\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\r\n  if(val === \"\"){\r\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\r\n    else {\r\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\r\n    }\r\n  }else{\r\n\r\n    let tagEndExp = '</' + key + this.tagEndChar;\r\n    let piClosingChar = \"\";\r\n    \r\n    if(key[0] === \"?\") {\r\n      piClosingChar = \"?\";\r\n      tagEndExp = \"\";\r\n    }\r\n  \r\n    // attrStr is an empty string in case the attribute came as undefined or null\r\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\r\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\r\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\r\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\r\n    }else {\r\n      return (\r\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\r\n        val +\r\n        this.indentate(level) + tagEndExp    );\r\n    }\r\n  }\r\n}\r\n\r\nBuilder.prototype.closeTag = function(key){\r\n  let closeTag = \"\";\r\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\r\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\r\n  }else if(this.options.suppressEmptyNode){ //empty\r\n    closeTag = \"/\";\r\n  }else{\r\n    closeTag = `></${key}`\r\n  }\r\n  return closeTag;\r\n}\r\n\r\nfunction buildEmptyObjNode(val, key, attrStr, level) {\r\n  if (val !== '') {\r\n    return this.buildObjectNode(val, key, attrStr, level);\r\n  } else {\r\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\r\n    else {\r\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\r\n      // return this.buildTagStr(level,key, attrStr);\r\n    }\r\n  }\r\n}\r\n\r\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\r\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\r\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\r\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\r\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\r\n  }else if(key[0] === \"?\") {//PI tag\r\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \r\n  }else{\r\n    let textValue = this.options.tagValueProcessor(key, val);\r\n    textValue = this.replaceEntitiesValue(textValue);\r\n  \r\n    if( textValue === ''){\r\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\r\n    }else{\r\n      return this.indentate(level) + '<' + key + attrStr + '>' +\r\n         textValue +\r\n        '</' + key + this.tagEndChar;\r\n    }\r\n  }\r\n}\r\n\r\nBuilder.prototype.replaceEntitiesValue = function(textValue){\r\n  if(textValue && textValue.length > 0 && this.options.processEntities){\r\n    for (let i=0; i<this.options.entities.length; i++) {\r\n      const entity = this.options.entities[i];\r\n      textValue = textValue.replace(entity.regex, entity.val);\r\n    }\r\n  }\r\n  return textValue;\r\n}\r\n\r\nfunction indentate(level) {\r\n  return this.options.indentBy.repeat(level);\r\n}\r\n\r\nfunction isAttribute(name /*, options*/) {\r\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\r\n    return name.substr(this.attrPrefixLen);\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = Builder;\r\n", "'use strict';\r\n\r\nconst validator = require('./validator');\r\nconst XMLParser = require('./xmlparser/XMLParser');\r\nconst XMLBuilder = require('./xmlbuilder/json2xml');\r\n\r\nmodule.exports = {\r\n  XMLParser: XMLParser,\r\n  XMLValidator: validator,\r\n  XMLBuilder: XMLBuilder\r\n}", "export type ParsedEmail = {\r\n  external_id: string\r\n  disaster_type: string\r\n  severity: 'RED' | 'ORANGE' | 'GREEN'\r\n  title: string\r\n  country?: string\r\n  coordinates_lat?: number\r\n  coordinates_lng?: number\r\n  event_timestamp: string\r\n  description?: string\r\n  metadata?: Record<string, unknown>\r\n  affected_population?: number\r\n}\r\n\r\n// Very lightweight parser that expects simple GDACS-like lines.\r\n// This can be expanded to robust MIME parsing or HTML when needed.\r\nfunction normalizeTypeRaw(type: string | undefined, title?: string): string {\r\n  const v = (type || '').toLowerCase().trim()\r\n  const t = (title || '').toLowerCase()\r\n  if (/earth\\s*quake|\\bquake\\b|m\\s*\\d+(?:\\.\\d+)?\\s*earth/.test(v + ' ' + t)) return 'earthquake'\r\n  if (/tropical[_\\s-]*cyclone|\\bcyclone\\b|\\btyphoon\\b|\\bhurricane\\b|\\btc[-_\\s]?\\d*/.test(v + ' ' + t)) return 'cyclone'\r\n  if (/\\bflood|flooding/.test(v + ' ' + t)) return 'flood'\r\n  if (/wild\\s*fire|forest\\s*fire|\\bwildfire\\b|fire alert/.test(v + ' ' + t)) return 'wildfire'\r\n  return 'other'\r\n}\r\n\r\nexport function parseEmail(subject: string, body: string): ParsedEmail {\r\n  const text = `${subject}\\n${body}`\r\n  const get = (re: RegExp) => text.match(re)?.[1]?.trim()\r\n\r\n  const id = get(/ID:\\s*(.+)/i) || (globalThis as any).crypto?.randomUUID?.() || `${Date.now()}-${Math.random().toString(36).slice(2)}`\r\n  const type = normalizeTypeRaw((get(/Type:\\s*(.+)/i) || 'unknown').toLowerCase(), subject)\r\n  const sevText = (get(/Severity:\\s*(.+)/i) || 'GREEN').toUpperCase()\r\n  const severity = (sevText.includes('RED') ? 'RED' : sevText.includes('ORANGE') || sevText.includes('YELLOW') ? 'ORANGE' : 'GREEN') as ParsedEmail['severity']\r\n  const title = get(/Title:\\s*(.+)/i) || subject || `${type} event`\r\n  const country = get(/Country:\\s*([A-Z]{2})/i)\r\n  const lat = parseFloat(get(/Lat:\\s*([-+]?\\d+\\.\\d+)/i) || '')\r\n  const lng = parseFloat(get(/Lng:\\s*([-+]?\\d+\\.\\d+)/i) || '')\r\n  const ts = get(/Date:\\s*([^\\n]+)/i) || new Date().toISOString()\r\n  const description = get(/Description:\\s*([\\s\\S]+)/i)\r\n\r\n  return {\r\n    external_id: id,\r\n    disaster_type: type,\r\n    severity,\r\n    title,\r\n    country: country?.toUpperCase(),\r\n    coordinates_lat: isFinite(lat) ? lat : undefined,\r\n    coordinates_lng: isFinite(lng) ? lng : undefined,\r\n    event_timestamp: new Date(ts).toISOString(),\r\n    description: description?.slice(0, 2000),\r\n  }\r\n}\r\n\r\n// Parse GDACS daily newsletter that lists multiple events (earthquakes, tropical cyclones) in sections by severity.\r\nexport function parseEmailMulti(subject: string, body: string): ParsedEmail[] {\r\n  const text = `${subject}\\n${body}`\r\n  const results: ParsedEmail[] = []\r\n\r\n  // Quick heuristic to detect newsletter\r\n  const isNewsletter = /Global Disaster Alert and Coordination System/i.test(text) && /Disaster events in the last 24 hours/i.test(text)\r\n  if (!isNewsletter) {\r\n    return [parseEmail(subject, body)]\r\n  }\r\n\r\n  const norm = body.replace(/\\r\\n/g, '\\n')\r\n  const sevMap = (s: string): ParsedEmail['severity'] => (s.toUpperCase().startsWith('RED') ? 'RED' : s.toUpperCase().startsWith('ORANGE') ? 'ORANGE' : 'GREEN')\r\n\r\n  // Earthquakes pattern example:\r\n  // \"Green earthquake alert (Magnitude 4.5M, Depth:59.47km) in Russian Federation 04/09/2025 06:34 UTC, Few people affected in 100km.\"\r\n  const eqRe = /\\b(Green|Orange|Red)\\s+earthquake\\s+alert\\s*\\(Magnitude\\s*([\\d.]+)M,\\s*Depth:([\\d.]+)km\\)\\s+in\\s+([^\\n]+?)\\s+(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s+(\\d{1,2}:\\d{2})\\s*UTC/gi\r\n  let m: RegExpExecArray | null\r\n  while ((m = eqRe.exec(norm))) {\r\n    const sev = sevMap(m[1])\r\n    const mag = m[2]\r\n    const depthKm = m[3]\r\n    const countryRaw = m[4].trim().replace(/[.,]$/, '')\r\n    const dateStr = m[5]\r\n    const timeStr = m[6]\r\n    const iso = toIsoFromEuropean(dateStr, timeStr)\r\n    const countryName = sanitizeCountry(countryRaw)\r\n    const countryIso = countryName ? resolveCountryIso2(countryName) : null\r\n\r\n    const title = `${capitalize(sev.toLowerCase())} earthquake M${mag} ${countryName ? 'in ' + countryName : ''}`.trim()\r\n    const external_id = `gdacs:earthquake:${countryIso || countryName || 'unknown'}:${iso}:${mag}:${depthKm}`\r\n\r\n    results.push({\r\n      external_id,\r\n      disaster_type: 'earthquake',\r\n      severity: sev,\r\n      title,\r\n      country: countryIso || undefined,\r\n      event_timestamp: iso,\r\n      description: `Magnitude ${mag} at depth ${depthKm}km`,\r\n      metadata: { magnitude: parseFloat(mag), depth_km: parseFloat(depthKm), original_country_name: countryName || undefined }\r\n    })\r\n  }\r\n\r\n  // Tropical cyclone pattern header line:\r\n  // \"Green alert for tropical cyclone PEIPAH-25. Population affected by Category 1 ...\"\r\n  const tcRe = /\\b(Green|Orange|Red)\\s+alert\\s+for\\s+tropical\\s+cyclone\\s+([A-Z0-9\\-\\.]+)\\./gi\r\n  while ((m = tcRe.exec(norm))) {\r\n    const sev = sevMap(m[1])\r\n    const name = m[2]\r\n    // Look ahead within next few lines for date range and countries line\r\n    const tail = norm.slice(tcRe.lastIndex, tcRe.lastIndex + 800)\r\n    const range = /From\\s+(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s+to\\s+(\\d{1,2}\\/\\d{1,2}\\/\\d{4})/i.exec(tail)\r\n    const endIso = range ? toIsoFromEuropean(range[2], '00:00') : new Date().toISOString()\r\n    const countriesMatch = /The cyclone affects these countries:\\s*([^\\.\\n]+)/i.exec(tail)\r\n    const firstCountry = countriesMatch ? countriesMatch[1].split(',')[0].trim() : undefined\r\n    const countryName = firstCountry ? sanitizeCountry(firstCountry.replace(/\\(.*?\\)/, '').trim()) : undefined\r\n    const countryIso = countryName ? resolveCountryIso2(countryName) : undefined\r\n\r\n    // Try to extract category and max wind speed (km/h)\r\n    const catMatch = /Category\\s*([1-5])/i.exec(tail)\r\n    const windMatches = Array.from(tail.matchAll(/(\\d{2,3})\\s*(?:km\\/?h|kph)/gi))\r\n    const maxWind = windMatches.length ? Math.max(...windMatches.map((w) => parseInt(w[1], 10))) : undefined\r\n\r\n    const title = `${capitalize(sev.toLowerCase())} tropical cyclone ${name}`\r\n    const external_id = `gdacs:cyclone:${name}:${endIso}`\r\n    results.push({\r\n      external_id,\r\n      disaster_type: 'cyclone',\r\n      severity: sev,\r\n      title,\r\n      country: countryIso || undefined,\r\n      event_timestamp: endIso,\r\n      description: `GDACS tropical cyclone ${name}`,\r\n      metadata: { name, category: catMatch ? parseInt(catMatch[1], 10) : undefined, max_wind_kmh: maxWind, original_country_name: countryName }\r\n    })\r\n  }\r\n\r\n  // If nothing matched, fall back to single-event parsing\r\n  return results.length ? results : [parseEmail(subject, body)]\r\n}\r\n\r\nfunction toIsoFromEuropean(dateDDMMYYYY: string, timeHHMM: string): string {\r\n  // Accepts dd/mm/yyyy or d/m/yyyy\r\n  const [d, m, y] = dateDDMMYYYY.split('/').map((s) => parseInt(s, 10))\r\n  const [hh, mm] = timeHHMM.split(':').map((s) => parseInt(s, 10))\r\n  const pad = (n: number) => n.toString().padStart(2, '0')\r\n  return `${y}-${pad(m)}-${pad(d)}T${pad(hh)}:${pad(mm)}:00.000Z`\r\n}\r\n\r\nfunction sanitizeCountry(raw: string): string | null {\r\n  const c = raw.replace(/\\[unknown\\]/i, '').replace(/\\s{2,}/g, ' ').trim()\r\n  if (!c || /unknown/i.test(raw)) return null\r\n  return c\r\n}\r\n\r\nfunction capitalize(s: string) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Basic country name to ISO2 normalization. Fallback returns undefined.\r\nexport function resolveCountryIso2(name: string): string | undefined {\r\n  const n = name\r\n    .toLowerCase()\r\n    .replace(/[^a-z\\s]/g, '')\r\n    .replace(/\\s+/g, ' ')\r\n    .trim()\r\n  const map: Record<string, string> = {\r\n    'russian federation': 'RU',\r\n    russia: 'RU',\r\n    'united states': 'US',\r\n    'united states of america': 'US',\r\n    usa: 'US',\r\n    america: 'US',\r\n    canada: 'CA',\r\n    mexico: 'MX',\r\n    brazil: 'BR',\r\n    chile: 'CL',\r\n    peru: 'PE',\r\n    argentina: 'AR',\r\n    colombia: 'CO',\r\n    ecuador: 'EC',\r\n    bolivia: 'BO',\r\n    'dominican republic': 'DO',\r\n    haiti: 'HT',\r\n    jamaica: 'JM',\r\n    cuba: 'CU',\r\n    'puerto rico': 'PR',\r\n    iceland: 'IS',\r\n    greenland: 'GL',\r\n    ireland: 'IE',\r\n    'united kingdom': 'GB',\r\n    uk: 'GB',\r\n    england: 'GB',\r\n    scotland: 'GB',\r\n    wales: 'GB',\r\n    france: 'FR',\r\n    spain: 'ES',\r\n    portugal: 'PT',\r\n    germany: 'DE',\r\n    italy: 'IT',\r\n    switzerland: 'CH',\r\n    austria: 'AT',\r\n    netherlands: 'NL',\r\n    belgium: 'BE',\r\n    luxembourg: 'LU',\r\n    norway: 'NO',\r\n    sweden: 'SE',\r\n    finland: 'FI',\r\n    denmark: 'DK',\r\n    estonia: 'EE',\r\n    latvia: 'LV',\r\n    lithuania: 'LT',\r\n    poland: 'PL',\r\n    czechia: 'CZ',\r\n    'czech republic': 'CZ',\r\n    slovakia: 'SK',\r\n    hungary: 'HU',\r\n    greece: 'GR',\r\n    turkey: 'TR',\r\n    cyprus: 'CY',\r\n    romania: 'RO',\r\n    bulgaria: 'BG',\r\n    serbia: 'RS',\r\n    croatia: 'HR',\r\n    slovenia: 'SI',\r\n    albania: 'AL',\r\n    macedonia: 'MK',\r\n    kosovo: 'XK',\r\n    montenegro: 'ME',\r\n    bosnia: 'BA',\r\n    'bosnia and herzegovina': 'BA',\r\n    ukraine: 'UA',\r\n    belarus: 'BY',\r\n    moldova: 'MD',\r\n    rwanda: 'RW',\r\n    uganda: 'UG',\r\n    kenya: 'KE',\r\n    tanzania: 'TZ',\r\n    somalia: 'SO',\r\n    ethiopia: 'ET',\r\n    sudan: 'SD',\r\n    'south sudan': 'SS',\r\n    egypt: 'EG',\r\n    libya: 'LY',\r\n    tunisia: 'TN',\r\n    algeria: 'DZ',\r\n    morocco: 'MA',\r\n    'western sahara': 'EH',\r\n    nigeria: 'NG',\r\n    niger: 'NE',\r\n    ghana: 'GH',\r\n    benin: 'BJ',\r\n    togo: 'TG',\r\n    'cote d ivoire': 'CI',\r\n    'cote divoire': 'CI',\r\n    \"cote d'ivoire\": 'CI',\r\n    'ivory coast': 'CI',\r\n    senegal: 'SN',\r\n    mali: 'ML',\r\n    'burkina faso': 'BF',\r\n    guinea: 'GN',\r\n    liberia: 'LR',\r\n    sierra: 'SL',\r\n    'sierra leone': 'SL',\r\n    cameroon: 'CM',\r\n    gabon: 'GA',\r\n    congo: 'CG',\r\n    'republic of the congo': 'CG',\r\n    'democratic republic of the congo': 'CD',\r\n    drc: 'CD',\r\n    angola: 'AO',\r\n    zambia: 'ZM',\r\n    zimbabwe: 'ZW',\r\n    botswana: 'BW',\r\n    namibia: 'NA',\r\n    mozambique: 'MZ',\r\n    madagascar: 'MG',\r\n    'south africa': 'ZA',\r\n    lesotho: 'LS',\r\n    swaziland: 'SZ',\r\n    eswatini: 'SZ',\r\n    china: 'CN',\r\n    mongolia: 'MN',\r\n    japan: 'JP',\r\n    korea: 'KR',\r\n    'south korea': 'KR',\r\n    'north korea': 'KP',\r\n    taiwan: 'TW',\r\n    india: 'IN',\r\n    pakistan: 'PK',\r\n    bangladesh: 'BD',\r\n    nepal: 'NP',\r\n    bhutan: 'BT',\r\n    sri: 'LK',\r\n    'sri lanka': 'LK',\r\n    maldives: 'MV',\r\n    myanmar: 'MM',\r\n    'myanmar burma': 'MM',\r\n    burma: 'MM',\r\n    thailand: 'TH',\r\n    laos: 'LA',\r\n    'lao pdr': 'LA',\r\n    cambodia: 'KH',\r\n    vietnam: 'VN',\r\n    'viet nam': 'VN',\r\n    malaysia: 'MY',\r\n    singapore: 'SG',\r\n    philippines: 'PH',\r\n    indonesia: 'ID',\r\n    brunei: 'BN',\r\n    timor: 'TL',\r\n    'timor leste': 'TL',\r\n    australia: 'AU',\r\n    'papua new guinea': 'PG',\r\n    new: 'NZ',\r\n    'new zealand': 'NZ',\r\n    fiji: 'FJ',\r\n    vanuatu: 'VU',\r\n    tonga: 'TO',\r\n    samoa: 'WS',\r\n    'solomon islands': 'SB',\r\n    'marshall islands': 'MH',\r\n    kiribati: 'KI',\r\n    micronesia: 'FM',\r\n    palau: 'PW',\r\n    philippinessea: 'PH',\r\n    iran: 'IR',\r\n    iraq: 'IQ',\r\n    syria: 'SY',\r\n    lebanon: 'LB',\r\n    jordan: 'JO',\r\n    israel: 'IL',\r\n    palestine: 'PS',\r\n    'saudi arabia': 'SA',\r\n    yemen: 'YE',\r\n    oman: 'OM',\r\n    uae: 'AE',\r\n    'united arab emirates': 'AE',\r\n    qatar: 'QA',\r\n    bahrain: 'BH',\r\n    kuwait: 'KW'\r\n  }\r\n  return map[n]\r\n}\r\n", "import { XMLParser } from 'fast-xml-parser'\r\n\r\nexport type ParsedGdacsItem = {\r\n  external_id: string\r\n  disaster_type: string\r\n  severity: 'GREEN' | 'ORANGE' | 'RED'\r\n  title: string\r\n  country?: string\r\n  coordinates_lat?: number\r\n  coordinates_lng?: number\r\n  event_timestamp: string\r\n  description?: string\r\n  affected_population?: number\r\n}\r\n\r\nfunction mapAlertLevel(level?: string): 'GREEN' | 'ORANGE' | 'RED' {\r\n  const v = (level || '').toLowerCase()\r\n  if (v === 'red') return 'RED'\r\n  if (v === 'orange') return 'ORANGE'\r\n  return 'GREEN'\r\n}\r\n\r\nfunction inferType(title: string): string {\r\n  const t = title.toLowerCase()\r\n  if (t.includes('earthquake')) return 'earthquake'\r\n  if (t.includes('flood')) return 'flood'\r\n  if (t.includes('cyclone') || t.includes('tropical cyclone') || t.includes('typhoon') || t.includes('hurricane')) return 'cyclone'\r\n  if (t.includes('wildfire') || t.includes('fire')) return 'wildfire'\r\n  return 'other'\r\n}\r\n\r\nfunction extractAffectedPopulation(text: string): number | undefined {\r\n  if (!text) return undefined\r\n  \r\n  // Look for population numbers near relevant keywords\r\n  const patterns = [\r\n    // Direct patterns: \"affected: 500,000 people\", \"population affected: 1.2 million\"\r\n    /(?:affected.*?population|population.*?affected).*?:?\\s*(\\d{1,3}(?:,\\d{3})*|\\d+(?:\\.\\d+)?)\\s*(million|mln|k|thousand)/i,\r\n    /(\\d{1,3}(?:,\\d{3})*|\\d+(?:\\.\\d+)?)\\s*(million|mln|k|thousand)?\\s*(?:people\\s+)?(?:affected|displaced|evacuated)/i,\r\n    \r\n    // XML field patterns that might exist in GDACS\r\n    /(?:gdacs:)?(?:population|affected).*?(\\d{1,3}(?:,\\d{3})*|\\d+)/i,\r\n    \r\n    // General number patterns near population keywords\r\n    /(\\d{1,3}(?:,\\d{3})*)\\s*(?:people|persons|individuals)?\\s*(?:affected|displaced|evacuated|at risk)/i,\r\n  ]\r\n  \r\n  for (const pattern of patterns) {\r\n    const match = pattern.exec(text)\r\n    if (match) {\r\n      const numStr = match[1].replace(/,/g, '')\r\n      let num = parseFloat(numStr)\r\n      \r\n      if (!isFinite(num)) continue\r\n      \r\n      const multiplier = (match[2] || '').toLowerCase()\r\n      if (multiplier === 'million' || multiplier === 'mln') {\r\n        num *= 1_000_000\r\n      } else if (multiplier === 'k' || multiplier === 'thousand') {\r\n        num *= 1_000\r\n      }\r\n      \r\n      // Sanity check: reasonable population numbers\r\n      if (num >= 10 && num <= 100_000_000) {\r\n        return Math.round(num)\r\n      }\r\n    }\r\n  }\r\n  \r\n  return undefined\r\n}\r\n\r\nexport function parseGdacsFeed(xml: string): ParsedGdacsItem[] {\r\n  const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '' })\r\n  const doc = parser.parse(xml)\r\n  const items = doc?.rss?.channel?.item\r\n  if (!items) return []\r\n  const list = Array.isArray(items) ? items : [items]\r\n  const result: ParsedGdacsItem[] = []\r\n  for (const it of list) {\r\n    const eventId = String(it['gdacs:eventid'] || it.guid || it.link || it.title || '')\r\n    if (!eventId) continue\r\n    const ext = `gdacs:${eventId}`\r\n    const title: string = String(it.title || '')\r\n    const alert = String(it['gdacs:alertlevel'] || '')\r\n    const severity = mapAlertLevel(alert)\r\n    const t = inferType(title)\r\n    const pub = it.pubDate ? new Date(it.pubDate) : new Date()\r\n    const when = isNaN(pub.getTime()) ? new Date() : pub\r\n    const country = it['gdacs:country'] ? String(it['gdacs:country']) : undefined\r\n    const geopt = it['georss:point'] ? String(it['georss:point']) : ''\r\n    let lat: number | undefined\r\n    let lng: number | undefined\r\n    if (geopt) {\r\n      const [latStr, lngStr] = geopt.trim().split(/\\s+/)\r\n      lat = Number(latStr)\r\n      lng = Number(lngStr)\r\n      if (!isFinite(lat)) lat = undefined\r\n      if (!isFinite(lng)) lng = undefined\r\n    }\r\n    const description: string | undefined = it.description ? String(it.description) : undefined\r\n\r\n    // Extract affected population from title, description, and specific GDACS fields\r\n    const fullText = `${title} ${description || ''} ${it['gdacs:population'] || ''} ${it['gdacs:totdeath'] || ''} ${it['gdacs:totpop'] || ''}`\r\n    const affected_population = extractAffectedPopulation(fullText)\r\n\r\n    result.push({\r\n      external_id: ext,\r\n      disaster_type: t,\r\n      severity,\r\n      title,\r\n      country,\r\n      coordinates_lat: lat,\r\n      coordinates_lng: lng,\r\n      event_timestamp: when.toISOString(),\r\n      description,\r\n      affected_population,\r\n    })\r\n  }\r\n  return result\r\n}\r\n", "import { XMLParser } from 'fast-xml-parser'\r\nimport { resolveCountryIso2 } from './parser'\r\n\r\nexport type ParsedReliefWebItem = {\r\n  external_id: string\r\n  disaster_type: string\r\n  severity: 'GREEN' | 'ORANGE' | 'RED'\r\n  title: string\r\n  country?: string\r\n  coordinates_lat?: number\r\n  coordinates_lng?: number\r\n  event_timestamp: string\r\n  description?: string\r\n  affected_population?: number\r\n}\r\n\r\nfunction inferTypeFromText(text: string): string {\r\n  const t = text.toLowerCase()\r\n  \r\n  // Primary disaster types\r\n  if (/earthquake|quake/i.test(text)) return 'earthquake'\r\n  if (/flood|flooding|flash\\s+flood/i.test(text)) return 'flood'\r\n  if (/cyclone|typhoon|hurricane|tropical\\s+storm|tc[-_\\s]?\\d/i.test(text)) return 'cyclone'\r\n  if (/wild\\s*fire|wildfire|forest\\s*fire/i.test(text)) return 'wildfire'\r\n  if (/landslide|mudslide|debris\\s+flow|slope\\s+failure/i.test(text)) return 'landslide'\r\n  if (/drought|water\\s+scarcity|dry\\s+spell/i.test(text)) return 'drought'\r\n  \r\n  // Extended disaster types from ReliefWeb\r\n  if (/volcano|volcanic|eruption/i.test(text)) return 'volcano'\r\n  if (/heat\\s+wave|extreme\\s+heat|temperature/i.test(text)) return 'heatwave'\r\n  \r\n  // Disease outbreaks and epidemics\r\n  if (/cholera|ebola|diphtheria|outbreak|epidemic|disease/i.test(text)) return 'epidemic'\r\n  \r\n  // Return 'other' for unclassified disasters\r\n  return 'other'\r\n}\r\n\r\nfunction extractCategories(it: any): string[] {\r\n  const cats = it?.category\r\n  if (!cats) return []\r\n  if (Array.isArray(cats)) {\r\n    return cats\r\n      .map((c) => {\r\n        if (typeof c === 'string') return c\r\n        if (c && typeof c === 'object') {\r\n          return (c as any)['#text'] || (c as any).text || ''\r\n        }\r\n        return ''\r\n      })\r\n      .filter((s) => !!s)\r\n  }\r\n  if (typeof cats === 'string') return [cats]\r\n  if (cats && typeof cats === 'object') return [((cats as any)['#text'] || (cats as any).text || '')].filter(Boolean)\r\n  return []\r\n}\r\n\r\nfunction extractCountryFromDescription(description: string): string | undefined {\r\n  // Extract from HTML tags like: <div class=\"tag country\">Affected country: Democratic Republic of the Congo</div>\r\n  const countryMatch = description.match(/<div class=\"tag country\">Affected country:\\s*([^<]+)<\\/div>/i)\r\n  if (countryMatch) {\r\n    return countryMatch[1].trim()\r\n  }\r\n  return undefined\r\n}\r\n\r\nfunction extractGlideNumber(description: string, categories: string[]): string | undefined {\r\n  // Extract GLIDE number from description like: <div class=\"tag glide\">Glide: EP-2025-000157-COD</div>\r\n  const glideMatch = description.match(/<div class=\"tag glide\">Glide:\\s*([^<]+)<\\/div>/i)\r\n  if (glideMatch) {\r\n    return glideMatch[1].trim()\r\n  }\r\n  \r\n  // Also check categories for GLIDE numbers\r\n  for (const cat of categories) {\r\n    if (/^[A-Z]{2}-\\d{4}-\\d{6}-[A-Z]{3}$/.test(cat)) {\r\n      return cat\r\n    }\r\n  }\r\n  return undefined\r\n}\r\n\r\nfunction extractCountryFromCategories(categories: string[]): string | undefined {\r\n  // ReliefWeb categories may include country names; pick the first that looks like a proper name\r\n  for (const c of categories) {\r\n    const s = String(c).trim()\r\n    if (!s) continue\r\n    // Skip GLIDE numbers\r\n    if (/^[A-Z]{2}-\\d{4}-\\d{6}-[A-Z]{3}$/.test(s)) continue\r\n    // Simple heuristic: ignore generic tags like Disaster, Update, Floods if too generic\r\n    if (/^(disaster|update|report|appeal|floods?|earthquakes?|cyclones?|typhoons?)$/i.test(s)) continue\r\n    // Prefer words with spaces (country names) or capitalized words\r\n    if (/^[A-Z][A-Za-z\\s\\-\\(\\)']+$/.test(s)) {\r\n      return s\r\n    }\r\n  }\r\n  return undefined\r\n}\r\n\r\nfunction parseMagnitude(text: string): number | undefined {\r\n  const m = /(m(?:agnitude)?\\s*([\\d.]+)|\\b([\\d.]+)\\s*m)\\b/i.exec(text)\r\n  const val = m ? parseFloat(m[2] || m[3]) : NaN\r\n  return isFinite(val) ? val : undefined\r\n}\r\n\r\nfunction parseCycloneCategory(text: string): number | undefined {\r\n  const m = /\\bcat(?:egory)?\\s*([1-5])\\b/i.exec(text)\r\n  return m ? parseInt(m[1], 10) : undefined\r\n}\r\n\r\nfunction parseNumberNearKeywords(text: string, keywords: RegExp): number | undefined {\r\n  // Find patterns like 12,345 or 12k near the keywords window\r\n  const window = 120\r\n  const matches: number[] = []\r\n  for (const kw of text.matchAll(keywords)) {\r\n    const idx = kw.index ?? 0\r\n    const slice = text.slice(Math.max(0, idx - window), Math.min(text.length, idx + window))\r\n    const nums = slice.match(/\\b(\\d{1,3}(?:,\\d{3})+|\\d+(?:\\.\\d+)?)(?:\\s*(k|K|m|M))?\\b|\\b(\\d+(?:\\.\\d+)?)\\s*(million|mln)\\b/g)\r\n    if (nums) {\r\n      for (const n of nums) {\r\n        const millionWord = /(million|mln)/i.exec(n)\r\n        if (millionWord) {\r\n          const num = parseFloat(n.replace(/[^\\d.]/g, ''))\r\n          if (isFinite(num)) matches.push(num * 1_000_000)\r\n          continue\r\n        }\r\n        const suffix = /(k|K|m|M)$/.exec(n)?.[1]\r\n        const raw = n.replace(/,/g, '').replace(/(k|K|m|M)$/i, '')\r\n        const val = parseFloat(raw)\r\n        if (!isFinite(val)) continue\r\n        if (!suffix) matches.push(val)\r\n        else if (suffix.toLowerCase() === 'k') matches.push(val * 1_000)\r\n        else if (suffix.toLowerCase() === 'm') matches.push(val * 1_000_000)\r\n      }\r\n    }\r\n  }\r\n  if (!matches.length) return undefined\r\n  return Math.max(...matches)\r\n}\r\n\r\nfunction extractAffectedPopulation(text: string): number | undefined {\r\n  // Use the existing parseNumberNearKeywords function to extract affected population\r\n  const affected = parseNumberNearKeywords(text, /(affected|displaced|evacuated|people.*affected|affected.*people|population.*affected|affected.*population)/gi)\r\n  return affected\r\n}\r\n\r\nfunction inferSeverityFromText(text: string, disasterType: string): 'GREEN'|'ORANGE'|'RED' {\r\n  const t = text.toLowerCase()\r\n  \r\n  // Strong keywords for RED severity\r\n  const redWords = /(catastrophic|devastating|massive\\s+destruction|widespread\\s+destruction|disaster\\s+declared|state\\s+of\\s+calamity|national\\s+emergency)/i\r\n  \r\n  // Moderate keywords for ORANGE severity  \r\n  const orangeWords = /(major|severe|state\\s+of\\s+emergency|evacuation|evacuations|flash\\s+flood|emergency\\s+declared|widespread|critical)/i\r\n\r\n  // Numeric signals\r\n  const mag = parseMagnitude(text)\r\n  const cat = parseCycloneCategory(text)\r\n  const deaths = parseNumberNearKeywords(text, /(death|deaths|killed|fatalities|died)/gi)\r\n  const affected = parseNumberNearKeywords(text, /(affected|displaced|evacuated|people)/gi)\r\n  const injured = parseNumberNearKeywords(text, /(injured|injuries)/gi)\r\n\r\n  // Type-specific severity assessment\r\n  if (disasterType === 'earthquake') {\r\n    if (mag !== undefined) {\r\n      if (mag >= 6.5) return 'RED'\r\n      if (mag >= 5.5) return 'ORANGE'\r\n    }\r\n    if (deaths !== undefined) {\r\n      if (deaths >= 100) return 'RED'\r\n      if (deaths >= 10) return 'ORANGE'\r\n    }\r\n  }\r\n  \r\n  if (disasterType === 'cyclone') {\r\n    if (cat !== undefined) {\r\n      if (cat >= 3) return 'RED'\r\n      if (cat >= 1) return 'ORANGE'\r\n    }\r\n  }\r\n  \r\n  if (disasterType === 'flood') {\r\n    if (deaths !== undefined && deaths >= 50) return 'RED'\r\n    if (affected !== undefined && affected >= 100_000) return 'RED'\r\n    if (deaths !== undefined && deaths >= 10) return 'ORANGE'\r\n    if (affected !== undefined && affected >= 10_000) return 'ORANGE'\r\n  }\r\n  \r\n  if (disasterType === 'wildfire') {\r\n    if (/out\\s+of\\s+control|uncontrolled|evacuations|homes?\\s+destroyed/i.test(text)) return 'ORANGE'\r\n    if (deaths !== undefined && deaths >= 5) return 'RED'\r\n  }\r\n  \r\n  if (disasterType === 'epidemic') {\r\n    // Disease outbreaks - focus on spread and fatality rate\r\n    if (deaths !== undefined && deaths >= 20) return 'RED'\r\n    if (affected !== undefined && affected >= 1000) return 'ORANGE'\r\n    if (/outbreak\\s+declared|epidemic|pandemic/i.test(text)) return 'ORANGE'\r\n  }\r\n  \r\n  if (disasterType === 'drought') {\r\n    if (affected !== undefined && affected >= 1_000_000) return 'RED'\r\n    if (affected !== undefined && affected >= 100_000) return 'ORANGE'\r\n    if (/severe\\s+drought|prolonged\\s+drought|acute\\s+food\\s+insecurity|famine/i.test(text)) return 'ORANGE'\r\n  }\r\n  \r\n  if (disasterType === 'heatwave') {\r\n    if (deaths !== undefined && deaths >= 10) return 'RED'\r\n    if (/extreme\\s+heat|record\\s+temperature|heat\\s+emergency/i.test(text)) return 'ORANGE'\r\n  }\r\n\r\n  // Generic thresholds for casualties and affected populations\r\n  if (deaths !== undefined) {\r\n    if (deaths >= 100) return 'RED'\r\n    if (deaths >= 10) return 'ORANGE'\r\n  }\r\n  \r\n  if (injured !== undefined && injured >= 100) return 'ORANGE'\r\n  \r\n  if (affected !== undefined) {\r\n    if (affected >= 500_000) return 'RED'\r\n    if (affected >= 50_000) return 'ORANGE'\r\n  }\r\n\r\n  // Keyword-based fallback\r\n  if (redWords.test(text)) return 'RED'\r\n  if (orangeWords.test(text)) return 'ORANGE'\r\n\r\n  return 'GREEN'\r\n}\r\n\r\nexport function parseReliefwebFeed(xml: string): ParsedReliefWebItem[] {\r\n  const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '' })\r\n  const doc = parser.parse(xml)\r\n  const items = doc?.rss?.channel?.item\r\n  if (!items) return []\r\n  const list = Array.isArray(items) ? items : [items]\r\n  const result: ParsedReliefWebItem[] = []\r\n  \r\n  for (const it of list) {\r\n    const guid = String(it.guid?.['#text'] || it.guid || it.link || it.title || '')\r\n    if (!guid) continue\r\n    \r\n    const title: string = String(it.title || '')\r\n    const description: string = it.description ? String(it.description) : ''\r\n    const pub = it.pubDate ? new Date(it.pubDate) : new Date()\r\n    const when = isNaN(pub.getTime()) ? new Date() : pub\r\n    const categories = extractCategories(it)\r\n    \r\n    // Enhanced country extraction - try description first, then categories\r\n    const countryFromDesc = extractCountryFromDescription(description)\r\n    const countryFromCats = extractCountryFromCategories(categories)\r\n    const countryName = (countryFromDesc || countryFromCats)?.replace(/\\(.*?\\)/g, '').trim()\r\n    \r\n    // Extract GLIDE number for more specific external_id\r\n    const glideNumber = extractGlideNumber(description, categories)\r\n    const ext = glideNumber ? `reliefweb:${glideNumber}` : `reliefweb:${guid}`\r\n    \r\n    // Enhanced disaster type inference using all available text\r\n    const fullText = `${title} ${description} ${categories.join(' ')}`\r\n    const disaster_type = inferTypeFromText(fullText)\r\n    const severity: ParsedReliefWebItem['severity'] = inferSeverityFromText(fullText, disaster_type)\r\n    \r\n    // Extract affected population from all available text\r\n    const affected_population = extractAffectedPopulation(fullText)\r\n\r\n    result.push({\r\n      external_id: ext,\r\n      disaster_type,\r\n      severity,\r\n      title,\r\n      country: (countryName && resolveCountryIso2(countryName)) || undefined,\r\n      event_timestamp: when.toISOString(),\r\n      description,\r\n      affected_population,\r\n    })\r\n  }\r\n  return result\r\n}\r\n", "import { XMLParser } from 'fast-xml-parser'\r\nimport { resolveCountryIso2 } from './parser'\r\n\r\nexport type ParsedUSGSItem = {\r\n  external_id: string\r\n  disaster_type: string\r\n  severity: 'GREEN' | 'ORANGE' | 'RED'\r\n  title: string\r\n  country?: string\r\n  coordinates_lat?: number\r\n  coordinates_lng?: number\r\n  event_timestamp: string\r\n  description?: string\r\n  affected_population?: number\r\n}\r\n\r\nfunction extractMagnitude(title: string): number | null {\r\n  // Extract magnitude from title like \"M 7.8 - 127 km E of Petropavlovsk-Kamchatsky, Russia\"\r\n  const magnitudeMatch = title.match(/M\\s*(\\d+(?:\\.\\d+)?)/i)\r\n  return magnitudeMatch ? parseFloat(magnitudeMatch[1]) : null\r\n}\r\n\r\nfunction extractPagerSeverity(summary: string): 'GREEN' | 'ORANGE' | 'RED' {\r\n  // Extract PAGER alert level from summary HTML\r\n  if (/pager-red|PAGER.*?RED/i.test(summary)) return 'RED'\r\n  if (/pager-orange|PAGER.*?ORANGE/i.test(summary)) return 'ORANGE'\r\n  if (/pager-yellow|PAGER.*?YELLOW/i.test(summary)) return 'ORANGE'  // Treat yellow as orange\r\n  return 'GREEN'\r\n}\r\n\r\nfunction extractLocationFromTitle(title: string): { country?: string; region?: string } {\r\n  // Extract location from title like \"M 7.8 - 127 km E of Petropavlovsk-Kamchatsky, Russia\"\r\n  const locationMatch = title.match(/(?:km|mi)\\s+[NSEW]+\\s+of\\s+([^,]+),?\\s*(.+)$/i)\r\n  if (locationMatch) {\r\n    const city = locationMatch[1]?.trim()\r\n    const countryRegion = locationMatch[2]?.trim()\r\n    return { country: countryRegion, region: city }\r\n  }\r\n  \r\n  // Handle cases like \"M 6.4 - Vanuatu region\"\r\n  const regionMatch = title.match(/M\\s*\\d+(?:\\.\\d+)?\\s*-\\s*(.+)\\s+region$/i)\r\n  if (regionMatch) {\r\n    return { country: regionMatch[1]?.trim() }\r\n  }\r\n  \r\n  // Handle direct country names \"M 6.4 - Afghanistan\"\r\n  const countryMatch = title.match(/M\\s*\\d+(?:\\.\\d+)?\\s*-\\s*(.+)$/i)\r\n  if (countryMatch) {\r\n    return { country: countryMatch[1]?.trim() }\r\n  }\r\n  \r\n  return {}\r\n}\r\n\r\nfunction extractDepth(summary: string): number | null {\r\n  // Extract depth from HTML like \"<dt>Depth</dt><dd>19.50 km (12.12 mi)</dd>\"\r\n  const depthMatch = summary.match(/<dt>Depth<\\/dt><dd>(\\d+(?:\\.\\d+)?)\\s*km/i)\r\n  return depthMatch ? parseFloat(depthMatch[1]) : null\r\n}\r\n\r\nfunction extractTimestamp(summary: string): string | null {\r\n  // Extract UTC timestamp from HTML like \"<dt>Time</dt><dd>2025-09-18 18:58:13 UTC</dd>\"\r\n  const timeMatch = summary.match(/<dt>Time<\\/dt><dd>(\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2})\\s+UTC/i)\r\n  if (timeMatch) {\r\n    return `${timeMatch[1]}Z`\r\n  }\r\n  return null\r\n}\r\n\r\nfunction estimateAffectedPopulation(magnitude: number, depth: number | null, summary: string): number | undefined {\r\n  // Estimate affected population based on magnitude, depth, and PAGER level\r\n  if (!magnitude) return undefined\r\n  \r\n  // For significant earthquakes, use PAGER level and magnitude to estimate\r\n  const isRed = /pager-red|PAGER.*?RED/i.test(summary)\r\n  const isOrange = /pager-orange|PAGER.*?ORANGE/i.test(summary)\r\n  const isYellow = /pager-yellow|PAGER.*?YELLOW/i.test(summary)\r\n  \r\n  // Very rough estimates based on historical data\r\n  if (isRed && magnitude >= 7.0) return 1000000  // 1M+ for major disasters\r\n  if (isRed && magnitude >= 6.0) return 500000   // 500K+ for significant red alerts\r\n  if (isOrange && magnitude >= 6.5) return 100000 // 100K+ for major orange alerts\r\n  if (isOrange && magnitude >= 5.5) return 50000  // 50K+ for moderate orange alerts\r\n  if (isYellow && magnitude >= 6.0) return 25000  // 25K+ for yellow alerts\r\n  if (magnitude >= 7.0) return 10000              // Base estimate for M7+\r\n  if (magnitude >= 6.0) return 5000               // Base estimate for M6+\r\n  \r\n  return undefined\r\n}\r\n\r\nexport function parseUSGSFeed(xmlText: string): ParsedUSGSItem[] {\r\n  try {\r\n    const parser = new XMLParser({\r\n      ignoreAttributes: false,\r\n      attributeNamePrefix: '@_',\r\n      parseAttributeValue: true,\r\n      trimValues: true,\r\n      processEntities: true\r\n    })\r\n    \r\n    const parsed = parser.parse(xmlText)\r\n    const feed = parsed?.feed\r\n    if (!feed) return []\r\n    \r\n    const entries = Array.isArray(feed.entry) ? feed.entry : (feed.entry ? [feed.entry] : [])\r\n    const results: ParsedUSGSItem[] = []\r\n    \r\n    for (const entry of entries) {\r\n      try {\r\n        const id = entry.id || ''\r\n        const title = entry.title || ''\r\n        const summary = entry.summary?.['#text'] || entry.summary || ''\r\n        const updated = entry.updated || ''\r\n        \r\n        // Extract USGS event ID from URN format: \"urn:earthquake-usgs-gov:us:6000rcrj\"\r\n        const eventIdMatch = id.match(/urn:earthquake-usgs-gov:([^:]+):(.+)$/)\r\n        const eventId = eventIdMatch ? `${eventIdMatch[1]}_${eventIdMatch[2]}` : id\r\n        const external_id = `usgs:${eventId}`\r\n        \r\n        // Extract coordinates from georss:point\r\n        let coordinates_lat: number | undefined\r\n        let coordinates_lng: number | undefined\r\n        \r\n        if (entry['georss:point']) {\r\n          const coords = String(entry['georss:point']).trim().split(/\\s+/)\r\n          if (coords.length >= 2) {\r\n            coordinates_lat = parseFloat(coords[0])\r\n            coordinates_lng = parseFloat(coords[1])\r\n          }\r\n        }\r\n        \r\n        // Extract magnitude and location info\r\n        const magnitude = extractMagnitude(title)\r\n        const locationInfo = extractLocationFromTitle(title)\r\n        const depth = extractDepth(summary)\r\n        const eventTimestamp = extractTimestamp(summary) || updated\r\n        \r\n        // Determine severity from PAGER alert level\r\n        const severity = extractPagerSeverity(summary)\r\n        \r\n        // Estimate affected population\r\n        const affected_population = magnitude ? estimateAffectedPopulation(magnitude, depth, summary) : undefined\r\n        \r\n        // Resolve country ISO code\r\n        let country: string | undefined\r\n        if (locationInfo.country) {\r\n          country = resolveCountryIso2(locationInfo.country) || locationInfo.country\r\n        }\r\n        \r\n        // Build description with key earthquake details\r\n        let description = `Magnitude ${magnitude || 'unknown'} earthquake`\r\n        if (locationInfo.region) {\r\n          description += ` near ${locationInfo.region}`\r\n        }\r\n        if (locationInfo.country) {\r\n          description += ` in ${locationInfo.country}`\r\n        }\r\n        if (depth) {\r\n          description += ` at ${depth} km depth`\r\n        }\r\n        \r\n        // Add PAGER and intensity info if available\r\n        const pagerMatch = summary.match(/PAGER.*?<strong[^>]*>([^<]+)<\\/strong>/i)\r\n        if (pagerMatch) {\r\n          description += `. PAGER alert level: ${pagerMatch[1]}`\r\n        }\r\n        \r\n        const shakeMapMatch = summary.match(/ShakeMap.*?<strong[^>]*>([^<]+)<\\/strong>/i)\r\n        if (shakeMapMatch) {\r\n          description += `. Maximum intensity: ${shakeMapMatch[1]}`\r\n        }\r\n        \r\n        results.push({\r\n          external_id,\r\n          disaster_type: 'earthquake', // All USGS feeds are earthquakes\r\n          severity,\r\n          title,\r\n          country,\r\n          coordinates_lat,\r\n          coordinates_lng,\r\n          event_timestamp: eventTimestamp,\r\n          description,\r\n          affected_population\r\n        })\r\n        \r\n      } catch (error) {\r\n        console.warn('Failed to parse USGS entry:', error, entry)\r\n        continue\r\n      }\r\n    }\r\n    \r\n    return results\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to parse USGS feed:', error)\r\n    return []\r\n  }\r\n}", "import { XMLParser } from 'fast-xml-parser'\r\n\r\nexport type ParsedNOAACAPItem = {\r\n  external_id: string\r\n  disaster_type: string\r\n  severity: 'GREEN' | 'ORANGE' | 'RED'\r\n  title: string\r\n  country?: string\r\n  coordinates_lat?: number\r\n  coordinates_lng?: number\r\n  event_timestamp: string\r\n  description?: string\r\n  affected_population?: number\r\n}\r\n\r\n// NOAA CAP (Common Alerting Protocol) parser for US alerts including tsunami warnings\r\nexport function parseNOAACAPFeed(xmlContent: string): ParsedNOAACAPItem[] {\r\n  try {\r\n    console.log('Parsing NOAA CAP feed XML');\r\n    \r\n    const parser = new XMLParser({\r\n      ignoreAttributes: false,\r\n      attributeNamePrefix: '@_',\r\n      parseAttributeValue: true\r\n    });\r\n    \r\n    const doc = parser.parse(xmlContent);\r\n    \r\n    if (!doc.feed || !doc.feed.entry) {\r\n      console.log('No entries found in NOAA CAP feed');\r\n      return [];\r\n    }\r\n\r\n    // Ensure entries is always an array\r\n    const entries = Array.isArray(doc.feed.entry) ? doc.feed.entry : [doc.feed.entry];\r\n    const disasters: ParsedNOAACAPItem[] = [];\r\n\r\n    console.log(`Found ${entries.length} CAP alert entries`);\r\n\r\n    for (const entry of entries) {\r\n      try {\r\n        const disaster = parseNOAACAPEntry(entry);\r\n        if (disaster) {\r\n          disasters.push(disaster);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing NOAA CAP entry:', error);\r\n        // Continue processing other entries\r\n      }\r\n    }\r\n\r\n    console.log(`Parsed ${disasters.length} disasters from NOAA CAP feed`);\r\n    return disasters;\r\n  } catch (error) {\r\n    console.error('Error parsing NOAA CAP feed XML:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction parseNOAACAPEntry(entry: any): ParsedNOAACAPItem | null {\r\n  // Get basic fields from parsed JSON structure\r\n  const id = entry.id || '';\r\n  const title = entry.title || '';\r\n  const summary = entry.summary || '';\r\n  const updated = entry.updated || '';\r\n  const published = entry.published || '';\r\n\r\n  if (!id || !title) {\r\n    return null;\r\n  }\r\n\r\n  // Skip test messages and monitoring messages\r\n  if (title.toLowerCase().includes('test message') || \r\n      summary.toLowerCase().includes('monitoring message') ||\r\n      summary.toLowerCase().includes('please disregard')) {\r\n    return null;\r\n  }\r\n\r\n  // Get CAP-specific fields - they should be in the entry object\r\n  const capEvent = entry['cap:event'] || '';\r\n  const capSeverity = entry['cap:severity'] || '';\r\n  const capUrgency = entry['cap:urgency'] || '';\r\n  const capAreaDesc = entry['cap:areaDesc'] || '';\r\n  const capPolygon = entry['cap:polygon'] || '';\r\n  \r\n  // Map CAP event to our disaster type\r\n  const disasterType = mapCAPEventToDisasterType(capEvent, title);\r\n  \r\n  // Skip if we don't handle this type of alert\r\n  if (!disasterType) {\r\n    return null;\r\n  }\r\n\r\n  // Map severity to our system\r\n  const severity = mapCAPSeverityToOurs(capSeverity, capUrgency, title);\r\n  \r\n  // Extract location information\r\n  const location = extractLocationFromCAP(capAreaDesc, capPolygon);\r\n  \r\n  // Use published date if available, otherwise updated\r\n  const dateStr = published || updated;\r\n  const date = dateStr ? new Date(dateStr) : new Date();\r\n\r\n  // Create external ID from the NOAA alert ID\r\n  const externalId = `noaa-cap-${extractAlertIdFromUrl(id)}`;\r\n\r\n  const disaster: ParsedNOAACAPItem = {\r\n    external_id: externalId,\r\n    disaster_type: disasterType,\r\n    severity: severity as 'GREEN' | 'ORANGE' | 'RED',\r\n    title: title,\r\n    description: summary || title,\r\n    event_timestamp: date.toISOString(),\r\n    coordinates_lat: location.latitude || undefined,\r\n    coordinates_lng: location.longitude || undefined,\r\n    country: location.country,\r\n    affected_population: estimateAffectedPopulation(capSeverity, capUrgency, capAreaDesc),\r\n  };\r\n\r\n  return disaster;\r\n}\r\n\r\n\r\n\r\nfunction mapCAPEventToDisasterType(capEvent: string | null, title: string): string | null {\r\n  if (!capEvent && !title) return null;\r\n  \r\n  const eventText = (capEvent || title).toLowerCase();\r\n  \r\n  // Tsunami alerts\r\n  if (eventText.includes('tsunami')) {\r\n    return 'other'; // We don't have a specific tsunami type, use 'other'\r\n  }\r\n  \r\n  // Flood events\r\n  if (eventText.includes('flood') || eventText.includes('flash flood')) {\r\n    return 'flood';\r\n  }\r\n  \r\n  // Fire weather - map to wildfire\r\n  if (eventText.includes('red flag') || eventText.includes('fire weather') || \r\n      eventText.includes('extreme fire')) {\r\n    return 'wildfire';\r\n  }\r\n  \r\n  // Severe weather that could be cyclone-related\r\n  if (eventText.includes('hurricane') || eventText.includes('tropical storm') || \r\n      eventText.includes('typhoon') || eventText.includes('cyclone')) {\r\n    return 'cyclone';\r\n  }\r\n  \r\n  // Earthquake-related (rare in CAP but possible)\r\n  if (eventText.includes('earthquake') || eventText.includes('seismic')) {\r\n    return 'earthquake';\r\n  }\r\n  \r\n  // Landslide\r\n  if (eventText.includes('landslide') || eventText.includes('debris flow')) {\r\n    return 'landslide';\r\n  }\r\n  \r\n  // Drought\r\n  if (eventText.includes('drought') || eventText.includes('water shortage')) {\r\n    return 'drought';\r\n  }\r\n  \r\n  // For now, skip other types of alerts (beach hazards, air quality, etc.)\r\n  // We can add them later if needed\r\n  return null;\r\n}\r\n\r\nfunction mapCAPSeverityToOurs(severity: string | null, urgency: string | null, title: string): string {\r\n  const sev = (severity || '').toLowerCase();\r\n  const urg = (urgency || '').toLowerCase();\r\n  const titleLower = title.toLowerCase();\r\n  \r\n  // Tsunami warnings are always RED\r\n  if (titleLower.includes('tsunami warning')) {\r\n    return 'RED';\r\n  }\r\n  \r\n  // Extreme events are RED\r\n  if (sev === 'extreme' || titleLower.includes('extreme') || titleLower.includes('emergency')) {\r\n    return 'RED';\r\n  }\r\n  \r\n  // Severe + Immediate = RED\r\n  if (sev === 'severe' && urg === 'immediate') {\r\n    return 'RED';\r\n  }\r\n  \r\n  // Flash Flood Warnings are typically RED\r\n  if (titleLower.includes('flash flood warning')) {\r\n    return 'RED';\r\n  }\r\n  \r\n  // Warnings are typically ORANGE\r\n  if (titleLower.includes('warning') && !titleLower.includes('watch')) {\r\n    return 'ORANGE';\r\n  }\r\n  \r\n  // Severe events are ORANGE\r\n  if (sev === 'severe') {\r\n    return 'ORANGE';\r\n  }\r\n  \r\n  // Moderate events are ORANGE\r\n  if (sev === 'moderate') {\r\n    return 'ORANGE';\r\n  }\r\n  \r\n  // Minor events or advisories are GREEN\r\n  if (sev === 'minor' || titleLower.includes('advisory') || titleLower.includes('watch')) {\r\n    return 'GREEN';\r\n  }\r\n  \r\n  // Default to ORANGE for safety\r\n  return 'ORANGE';\r\n}\r\n\r\nfunction extractLocationFromCAP(areaDesc: string | null, polygon: string | null): {\r\n  latitude: number | null;\r\n  longitude: number | null;\r\n  country: string;\r\n} {\r\n  // Default to US since this is a US CAP feed\r\n  let country = 'US';\r\n  let latitude: number | null = null;\r\n  let longitude: number | null = null;\r\n  \r\n  // Try to extract coordinates from polygon\r\n  if (polygon && polygon.trim()) {\r\n    const coords = parsePolygonCoordinates(polygon);\r\n    if (coords.length > 0) {\r\n      // Use the centroid of the polygon\r\n      latitude = coords.reduce((sum, coord) => sum + coord.lat, 0) / coords.length;\r\n      longitude = coords.reduce((sum, coord) => sum + coord.lng, 0) / coords.length;\r\n    }\r\n  }\r\n  \r\n  // If no polygon coordinates, try to get approximate location from area description\r\n  if (!latitude && areaDesc) {\r\n    const location = estimateLocationFromAreaDesc(areaDesc);\r\n    latitude = location.latitude;\r\n    longitude = location.longitude;\r\n  }\r\n  \r\n  // Check if it's a US territory\r\n  if (areaDesc) {\r\n    const areaLower = areaDesc.toLowerCase();\r\n    if (areaLower.includes('puerto rico') || areaLower.includes('pr')) {\r\n      country = 'PR';\r\n    } else if (areaLower.includes('virgin islands') || areaLower.includes('vi')) {\r\n      country = 'VI';\r\n    } else if (areaLower.includes('guam') || areaLower.includes('gu')) {\r\n      country = 'GU';\r\n    }\r\n  }\r\n  \r\n  return { latitude, longitude, country };\r\n}\r\n\r\nfunction parsePolygonCoordinates(polygon: string): Array<{lat: number, lng: number}> {\r\n  const coords: Array<{lat: number, lng: number}> = [];\r\n  \r\n  // Polygon format: \"lat1,lng1 lat2,lng2 lat3,lng3 ...\"\r\n  const pairs = polygon.trim().split(/\\s+/);\r\n  \r\n  for (const pair of pairs) {\r\n    const [latStr, lngStr] = pair.split(',');\r\n    const lat = parseFloat(latStr);\r\n    const lng = parseFloat(lngStr);\r\n    \r\n    if (!isNaN(lat) && !isNaN(lng)) {\r\n      coords.push({ lat, lng });\r\n    }\r\n  }\r\n  \r\n  return coords;\r\n}\r\n\r\nfunction estimateLocationFromAreaDesc(areaDesc: string): {\r\n  latitude: number | null;\r\n  longitude: number | null;\r\n} {\r\n  // Very basic location estimation based on known areas\r\n  // This is a simplified approach - in production, you'd want a more comprehensive mapping\r\n  \r\n  const areaLower = areaDesc.toLowerCase();\r\n  \r\n  // Some common areas and their approximate coordinates\r\n  const locationMap: Record<string, {lat: number, lng: number}> = {\r\n    'california': { lat: 36.7783, lng: -119.4179 },\r\n    'florida': { lat: 27.6648, lng: -81.5158 },\r\n    'texas': { lat: 31.9686, lng: -99.9018 },\r\n    'new york': { lat: 42.1657, lng: -74.9481 },\r\n    'washington': { lat: 47.7511, lng: -120.7401 },\r\n    'oregon': { lat: 43.8041, lng: -120.5542 },\r\n    'nevada': { lat: 38.8026, lng: -116.4194 },\r\n    'arizona': { lat: 34.0489, lng: -111.0937 },\r\n    'hawaii': { lat: 19.8968, lng: -155.5828 },\r\n    'alaska': { lat: 64.0685, lng: -152.2782 },\r\n    'puerto rico': { lat: 18.2208, lng: -66.5901 },\r\n  };\r\n  \r\n  for (const [region, coords] of Object.entries(locationMap)) {\r\n    if (areaLower.includes(region)) {\r\n      return { latitude: coords.lat, longitude: coords.lng };\r\n    }\r\n  }\r\n  \r\n  // Default to center of continental US\r\n  return { latitude: 39.8283, longitude: -98.5795 };\r\n}\r\n\r\nfunction extractAlertIdFromUrl(url: string): string {\r\n  // Extract a unique identifier from the NOAA alert URL\r\n  // URL format: https://api.weather.gov/alerts/urn:oid:2.49.0.1.840.0.{hash}.{version}.{subversion}\r\n  const match = url.match(/urn:oid:2\\.49\\.0\\.1\\.840\\.0\\.([a-f0-9]+)\\.(\\d+)\\.(\\d+)$/);\r\n  if (match) {\r\n    return `${match[1]}-${match[2]}-${match[3]}`;\r\n  }\r\n  \r\n  // Fallback: use last part of URL\r\n  return url.split('/').pop()?.replace(/[^a-zA-Z0-9-]/g, '-') || 'unknown';\r\n}\r\n\r\nfunction estimateAffectedPopulation(severity: string | null, urgency: string | null, areaDesc: string | null): number {\r\n  // Estimate affected population based on severity, urgency, and area\r\n  let basePopulation = 10000; // Default base\r\n  \r\n  // Adjust based on severity\r\n  switch (severity?.toLowerCase()) {\r\n    case 'extreme':\r\n      basePopulation *= 5;\r\n      break;\r\n    case 'severe':\r\n      basePopulation *= 3;\r\n      break;\r\n    case 'moderate':\r\n      basePopulation *= 2;\r\n      break;\r\n    case 'minor':\r\n      basePopulation *= 0.5;\r\n      break;\r\n  }\r\n  \r\n  // Adjust based on urgency\r\n  switch (urgency?.toLowerCase()) {\r\n    case 'immediate':\r\n      basePopulation *= 2;\r\n      break;\r\n    case 'expected':\r\n      basePopulation *= 1.5;\r\n      break;\r\n  }\r\n  \r\n  // Adjust based on area type (very rough estimates)\r\n  if (areaDesc) {\r\n    const areaLower = areaDesc.toLowerCase();\r\n    \r\n    // Large metropolitan areas\r\n    if (areaLower.includes('los angeles') || areaLower.includes('new york') || \r\n        areaLower.includes('chicago') || areaLower.includes('houston')) {\r\n      basePopulation *= 10;\r\n    }\r\n    // Major cities\r\n    else if (areaLower.includes('city') || areaLower.includes('metro')) {\r\n      basePopulation *= 5;\r\n    }\r\n    // Counties\r\n    else if (areaLower.includes('county')) {\r\n      basePopulation *= 2;\r\n    }\r\n    // Coastal areas (often more populated)\r\n    else if (areaLower.includes('coastal') || areaLower.includes('beach')) {\r\n      basePopulation *= 3;\r\n    }\r\n  }\r\n  \r\n  return Math.round(basePopulation);\r\n}", "export type ParsedFIRMSItem = {\r\n  external_id: string\r\n  disaster_type: 'wildfire'\r\n  severity: 'GREEN' | 'ORANGE' | 'RED'\r\n  title: string\r\n  country?: string\r\n  coordinates_lat: number\r\n  coordinates_lng: number\r\n  event_timestamp: string\r\n  description?: string\r\n  affected_population?: number\r\n}\r\n\r\n// NASA FIRMS (Fire Information for Resource Management System) parser\r\n// Uses CSV API to get active fire detection data from MODIS and VIIRS satellites\r\nexport function parseFIRMSResponse(csvContent: string): ParsedFIRMSItem[] {\r\n  try {\r\n    console.log('Parsing NASA FIRMS CSV response');\r\n    \r\n    const lines = csvContent.trim().split('\\n');\r\n    if (lines.length <= 1) {\r\n      console.log('No fire data found in FIRMS response');\r\n      return [];\r\n    }\r\n\r\n    // Expected CSV headers for MODIS/VIIRS active fire data:\r\n    // latitude,longitude,brightness,scan,track,acq_date,acq_time,satellite,instrument,confidence,version,bright_t31,frp,daynight\r\n    const headers = lines[0].split(',').map(h => h.trim());\r\n    const disasters: ParsedFIRMSItem[] = [];\r\n\r\n    console.log(`Found ${lines.length - 1} fire detection records`);\r\n\r\n    for (let i = 1; i < lines.length; i++) {\r\n      try {\r\n        const values = lines[i].split(',').map(v => v.trim());\r\n        if (values.length < headers.length) continue;\r\n\r\n        const record: Record<string, string> = {};\r\n        headers.forEach((header, index) => {\r\n          record[header] = values[index];\r\n        });\r\n\r\n        const disaster = parseFIRMSRecord(record);\r\n        if (disaster) {\r\n          disasters.push(disaster);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error parsing FIRMS record at line ${i}:`, error);\r\n        // Continue processing other records\r\n      }\r\n    }\r\n\r\n    console.log(`Successfully parsed ${disasters.length} fire detections`);\r\n    return disasters;\r\n  } catch (error) {\r\n    console.error('Error parsing FIRMS CSV response:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction parseFIRMSRecord(record: Record<string, string>): ParsedFIRMSItem | null {\r\n  try {\r\n    const latitude = parseFloat(record.latitude);\r\n    const longitude = parseFloat(record.longitude);\r\n    const confidence = parseInt(record.confidence || '0', 10);\r\n    const brightness = parseFloat(record.brightness || '0');\r\n    const frp = parseFloat(record.frp || '0'); // Fire Radiative Power\r\n    const acq_date = record.acq_date; // YYYY-MM-DD\r\n    const acq_time = record.acq_time; // HHMM\r\n    const satellite = record.satellite || 'Unknown';\r\n    const instrument = record.instrument || 'Unknown';\r\n\r\n    // Validate required fields\r\n    if (isNaN(latitude) || isNaN(longitude) || !acq_date || !acq_time) {\r\n      return null;\r\n    }\r\n\r\n    // Create timestamp from date and time\r\n    const year = acq_date.substring(0, 4);\r\n    const month = acq_date.substring(5, 7);\r\n    const day = acq_date.substring(8, 10);\r\n    const hour = acq_time.substring(0, 2);\r\n    const minute = acq_time.substring(2, 4);\r\n    const timestamp = `${year}-${month}-${day}T${hour}:${minute}:00Z`;\r\n\r\n    // Generate unique external ID based on coordinates and timestamp\r\n    const external_id = `firms-${latitude.toFixed(4)}-${longitude.toFixed(4)}-${acq_date}-${acq_time}`;\r\n\r\n    // Determine severity based on confidence, brightness, and FRP\r\n    let severity: 'GREEN' | 'ORANGE' | 'RED' = 'GREEN';\r\n    \r\n    // High confidence (>80%) or high FRP (>100 MW) indicates major fire\r\n    if (confidence >= 80 || frp >= 100) {\r\n      severity = 'RED';\r\n    } \r\n    // Medium confidence (50-79%) or medium FRP (50-99 MW) indicates moderate fire\r\n    else if (confidence >= 50 || frp >= 50) {\r\n      severity = 'ORANGE';\r\n    }\r\n    // Low confidence (<50%) or low FRP (<50 MW) indicates minor fire/smoke\r\n    else {\r\n      severity = 'GREEN';\r\n    }\r\n\r\n    // Create descriptive title\r\n    const confidenceDesc = confidence >= 80 ? 'High' : confidence >= 50 ? 'Medium' : 'Low';\r\n    const title = `Active Fire Detection (${confidenceDesc} Confidence)`;\r\n\r\n    // Create description with fire characteristics\r\n    const description = [\r\n      `Satellite: ${satellite} ${instrument}`,\r\n      `Confidence: ${confidence}%`,\r\n      brightness > 0 ? `Brightness: ${brightness.toFixed(1)}K` : null,\r\n      frp > 0 ? `Fire Radiative Power: ${frp.toFixed(1)} MW` : null,\r\n      `Detection: ${acq_date} ${acq_time} UTC`\r\n    ].filter(Boolean).join(' | ');\r\n\r\n    // Determine country from coordinates (simplified approach)\r\n    const country = determineCountryFromCoordinates(latitude, longitude);\r\n\r\n    return {\r\n      external_id,\r\n      disaster_type: 'wildfire',\r\n      severity,\r\n      title,\r\n      country,\r\n      coordinates_lat: latitude,\r\n      coordinates_lng: longitude,\r\n      event_timestamp: timestamp,\r\n      description,\r\n      affected_population: undefined\r\n    };\r\n  } catch (error) {\r\n    console.error('Error parsing FIRMS record:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Simple country determination based on coordinate ranges\r\n// This is a basic implementation - in production, you'd use a proper geocoding service\r\nfunction determineCountryFromCoordinates(lat: number, lng: number): string | undefined {\r\n  // USA (continental)\r\n  if (lat >= 24 && lat <= 49 && lng >= -125 && lng <= -66) {\r\n    return 'US';\r\n  }\r\n  \r\n  // Canada\r\n  if (lat >= 42 && lat <= 70 && lng >= -141 && lng <= -52) {\r\n    return 'CA';\r\n  }\r\n  \r\n  // Mexico\r\n  if (lat >= 14 && lat <= 33 && lng >= -118 && lng <= -86) {\r\n    return 'MX';\r\n  }\r\n  \r\n  // Australia\r\n  if (lat >= -44 && lat <= -10 && lng >= 113 && lng <= 154) {\r\n    return 'AU';\r\n  }\r\n  \r\n  // Brazil (simplified)\r\n  if (lat >= -34 && lat <= 6 && lng >= -74 && lng <= -32) {\r\n    return 'BR';\r\n  }\r\n  \r\n  // Russia (simplified)\r\n  if (lat >= 41 && lat <= 82 && lng >= 20 && lng <= 170) {\r\n    return 'RU';\r\n  }\r\n  \r\n  // China (simplified)  \r\n  if (lat >= 18 && lat <= 54 && lng >= 73 && lng <= 135) {\r\n    return 'CN';\r\n  }\r\n  \r\n  // India (simplified)\r\n  if (lat >= 8 && lat <= 37 && lng >= 68 && lng <= 97) {\r\n    return 'IN';\r\n  }\r\n  \r\n  // Add more countries as needed\r\n  return undefined;\r\n}\r\n\r\n// Fetch active fire data from FIRMS API for a global area\r\nexport async function fetchFIRMSGlobalData(mapKey: string, daysBack: number = 1): Promise<ParsedFIRMSItem[]> {\r\n  try {\r\n    // Global bounding box (entire world)\r\n    const bbox = '-180,-90,180,90';\r\n    \r\n    // MODIS NRT (Near Real Time) data source\r\n    const source = 'MODIS_NRT';\r\n    \r\n    // API URL format: /api/area/csv/[MAP_KEY]/[SOURCE]/[AREA_COORDINATES]/[DAY_RANGE]/[DATE]\r\n    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\r\n    const url = `https://firms.modaps.eosdis.nasa.gov/api/area/csv/${mapKey}/${source}/${bbox}/${daysBack}/${today}`;\r\n    \r\n    console.log(`Fetching FIRMS data from: ${url}`);\r\n    \r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'User-Agent': 'Flare360-DisasterMonitoring/1.0 (disaster-monitoring)'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`FIRMS API returned ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    const csvContent = await response.text();\r\n    \r\n    // Check for API error messages\r\n    if (csvContent.includes('Invalid MAP_KEY') || csvContent.includes('Error:')) {\r\n      throw new Error(`FIRMS API error: ${csvContent}`);\r\n    }\r\n    \r\n    return parseFIRMSResponse(csvContent);\r\n  } catch (error) {\r\n    console.error('Error fetching FIRMS data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Fetch regional fire data for better performance (smaller areas = faster response)\r\nexport async function fetchFIRMSRegionalData(mapKey: string, region: 'north_america' | 'europe' | 'asia' | 'oceania' | 'south_america' | 'africa', daysBack: number = 1): Promise<ParsedFIRMSItem[]> {\r\n  try {\r\n    // Regional bounding boxes\r\n    const regions = {\r\n      north_america: '-170,15,-50,75',     // North America\r\n      europe: '-25,35,45,75',              // Europe  \r\n      asia: '25,10,180,80',                // Asia\r\n      oceania: '110,-50,180,0',            // Oceania/Australia\r\n      south_america: '-85,-60,-30,15',     // South America\r\n      africa: '-20,-40,55,40'              // Africa\r\n    };\r\n    \r\n    const bbox = regions[region];\r\n    const source = 'MODIS_NRT';\r\n    const today = new Date().toISOString().split('T')[0];\r\n    \r\n    const url = `https://firms.modaps.eosdis.nasa.gov/api/area/csv/${mapKey}/${source}/${bbox}/${daysBack}/${today}`;\r\n    \r\n    console.log(`Fetching FIRMS ${region} data from: ${url}`);\r\n    \r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'User-Agent': 'Flare360-DisasterMonitoring/1.0 (disaster-monitoring)'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`FIRMS API returned ${response.status}: ${response.statusText}`);\r\n    }\r\n    \r\n    const csvContent = await response.text();\r\n    return parseFIRMSResponse(csvContent);\r\n  } catch (error) {\r\n    console.error(`Error fetching FIRMS ${region} data:`, error);\r\n    throw error;\r\n  }\r\n}", "export const textEncoder = new TextEncoder();\r\n\r\nconst base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n// Use a lookup table to find the index.\r\nconst base64Lookup = new Uint8Array(256);\r\nfor (var i = 0; i < base64Chars.length; i++) {\r\n    base64Lookup[base64Chars.charCodeAt(i)] = i;\r\n}\r\n\r\nexport function decodeBase64(base64) {\r\n    let bufferLength = Math.ceil(base64.length / 4) * 3;\r\n    const len = base64.length;\r\n\r\n    let p = 0;\r\n\r\n    if (base64.length % 4 === 3) {\r\n        bufferLength--;\r\n    } else if (base64.length % 4 === 2) {\r\n        bufferLength -= 2;\r\n    } else if (base64[base64.length - 1] === '=') {\r\n        bufferLength--;\r\n        if (base64[base64.length - 2] === '=') {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    const arrayBuffer = new ArrayBuffer(bufferLength);\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n\r\n    for (let i = 0; i < len; i += 4) {\r\n        let encoded1 = base64Lookup[base64.charCodeAt(i)];\r\n        let encoded2 = base64Lookup[base64.charCodeAt(i + 1)];\r\n        let encoded3 = base64Lookup[base64.charCodeAt(i + 2)];\r\n        let encoded4 = base64Lookup[base64.charCodeAt(i + 3)];\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arrayBuffer;\r\n}\r\n\r\nexport function getDecoder(charset) {\r\n    charset = charset || 'utf8';\r\n    let decoder;\r\n\r\n    try {\r\n        decoder = new TextDecoder(charset);\r\n    } catch (err) {\r\n        decoder = new TextDecoder('windows-1252');\r\n    }\r\n\r\n    return decoder;\r\n}\r\n\r\n/**\r\n * Converts a Blob into an ArrayBuffer\r\n * @param {Blob} blob Blob to convert\r\n * @returns {ArrayBuffer} Converted value\r\n */\r\nexport async function blobToArrayBuffer(blob) {\r\n    if ('arrayBuffer' in blob) {\r\n        return await blob.arrayBuffer();\r\n    }\r\n\r\n    const fr = new FileReader();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        fr.onload = function (e) {\r\n            resolve(e.target.result);\r\n        };\r\n\r\n        fr.onerror = function (e) {\r\n            reject(fr.error);\r\n        };\r\n\r\n        fr.readAsArrayBuffer(blob);\r\n    });\r\n}\r\n\r\nexport function getHex(c) {\r\n    if ((c >= 0x30 /* 0 */ && c <= 0x39) /* 9 */ || (c >= 0x61 /* a */ && c <= 0x66) /* f */ || (c >= 0x41 /* A */ && c <= 0x46) /* F */) {\r\n        return String.fromCharCode(c);\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Decode a complete mime word encoded string\r\n *\r\n * @param {String} str Mime word encoded string\r\n * @return {String} Decoded unicode string\r\n */\r\nexport function decodeWord(charset, encoding, str) {\r\n    // RFC2231 added language tag to the encoding\r\n    // see: https://tools.ietf.org/html/rfc2231#section-5\r\n    // this implementation silently ignores this tag\r\n    let splitPos = charset.indexOf('*');\r\n    if (splitPos >= 0) {\r\n        charset = charset.substr(0, splitPos);\r\n    }\r\n\r\n    encoding = encoding.toUpperCase();\r\n\r\n    let byteStr;\r\n\r\n    if (encoding === 'Q') {\r\n        str = str\r\n            // remove spaces between = and hex char, this might indicate invalidly applied line splitting\r\n            .replace(/=\\s+([0-9a-fA-F])/g, '=$1')\r\n            // convert all underscores to spaces\r\n            .replace(/[_\\s]/g, ' ');\r\n\r\n        let buf = textEncoder.encode(str);\r\n        let encodedBytes = [];\r\n        for (let i = 0, len = buf.length; i < len; i++) {\r\n            let c = buf[i];\r\n            if (i <= len - 2 && c === 0x3d /* = */) {\r\n                let c1 = getHex(buf[i + 1]);\r\n                let c2 = getHex(buf[i + 2]);\r\n                if (c1 && c2) {\r\n                    let c = parseInt(c1 + c2, 16);\r\n                    encodedBytes.push(c);\r\n                    i += 2;\r\n                    continue;\r\n                }\r\n            }\r\n            encodedBytes.push(c);\r\n        }\r\n        byteStr = new ArrayBuffer(encodedBytes.length);\r\n        let dataView = new DataView(byteStr);\r\n        for (let i = 0, len = encodedBytes.length; i < len; i++) {\r\n            dataView.setUint8(i, encodedBytes[i]);\r\n        }\r\n    } else if (encoding === 'B') {\r\n        byteStr = decodeBase64(str.replace(/[^a-zA-Z0-9\\+\\/=]+/g, ''));\r\n    } else {\r\n        // keep as is, convert ArrayBuffer to unicode string, assume utf8\r\n        byteStr = textEncoder.encode(str);\r\n    }\r\n\r\n    return getDecoder(charset).decode(byteStr);\r\n}\r\n\r\nexport function decodeWords(str) {\r\n    let joinString = true;\r\n    let done = false;\r\n\r\n    while (!done) {\r\n        let result = (str || '')\r\n            .toString()\r\n            // find base64 words that can be joined\r\n            .replace(/(=\\?([^?]+)\\?[Bb]\\?([^?]*)\\?=)\\s*(?==\\?([^?]+)\\?[Bb]\\?[^?]*\\?=)/g, (match, left, chLeft, encodedLeftStr, chRight) => {\r\n                if (!joinString) {\r\n                    return match;\r\n                }\r\n                // only mark b64 chunks to be joined if charsets match and left side does not end with =\r\n                if (chLeft === chRight && encodedLeftStr.length % 4 === 0 && !/=$/.test(encodedLeftStr)) {\r\n                    // set a joiner marker\r\n                    return left + '__\\x00JOIN\\x00__';\r\n                }\r\n\r\n                return match;\r\n            })\r\n            // find QP words that can be joined\r\n            .replace(/(=\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)\\s*(?==\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)/g, (match, left, chLeft, chRight) => {\r\n                if (!joinString) {\r\n                    return match;\r\n                }\r\n                // only mark QP chunks to be joined if charsets match\r\n                if (chLeft === chRight) {\r\n                    // set a joiner marker\r\n                    return left + '__\\x00JOIN\\x00__';\r\n                }\r\n                return match;\r\n            })\r\n            // join base64 encoded words\r\n            .replace(/(\\?=)?__\\x00JOIN\\x00__(=\\?([^?]+)\\?[QqBb]\\?)?/g, '')\r\n            // remove spaces between mime encoded words\r\n            .replace(/(=\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)\\s+(?==\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)/g, '$1')\r\n            // decode words\r\n            .replace(/=\\?([\\w_\\-*]+)\\?([QqBb])\\?([^?]*)\\?=/g, (m, charset, encoding, text) => decodeWord(charset, encoding, text));\r\n\r\n        if (joinString && result.indexOf('\\ufffd') >= 0) {\r\n            // text contains \\ufffd (EF BF BD), so unicode conversion failed, retry without joining strings\r\n            joinString = false;\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function decodeURIComponentWithCharset(encodedStr, charset) {\r\n    charset = charset || 'utf-8';\r\n\r\n    let encodedBytes = [];\r\n    for (let i = 0; i < encodedStr.length; i++) {\r\n        let c = encodedStr.charAt(i);\r\n        if (c === '%' && /^[a-f0-9]{2}/i.test(encodedStr.substr(i + 1, 2))) {\r\n            // encoded sequence\r\n            let byte = encodedStr.substr(i + 1, 2);\r\n            i += 2;\r\n            encodedBytes.push(parseInt(byte, 16));\r\n        } else if (c.charCodeAt(0) > 126) {\r\n            c = textEncoder.encode(c);\r\n            for (let j = 0; j < c.length; j++) {\r\n                encodedBytes.push(c[j]);\r\n            }\r\n        } else {\r\n            // \"normal\" char\r\n            encodedBytes.push(c.charCodeAt(0));\r\n        }\r\n    }\r\n\r\n    const byteStr = new ArrayBuffer(encodedBytes.length);\r\n    const dataView = new DataView(byteStr);\r\n    for (let i = 0, len = encodedBytes.length; i < len; i++) {\r\n        dataView.setUint8(i, encodedBytes[i]);\r\n    }\r\n\r\n    return getDecoder(charset).decode(byteStr);\r\n}\r\n\r\nexport function decodeParameterValueContinuations(header) {\r\n    // handle parameter value continuations\r\n    // https://tools.ietf.org/html/rfc2231#section-3\r\n\r\n    // preprocess values\r\n    let paramKeys = new Map();\r\n\r\n    Object.keys(header.params).forEach(key => {\r\n        let match = key.match(/\\*((\\d+)\\*?)?$/);\r\n        if (!match) {\r\n            // nothing to do here, does not seem like a continuation param\r\n            return;\r\n        }\r\n\r\n        let actualKey = key.substr(0, match.index).toLowerCase();\r\n        let nr = Number(match[2]) || 0;\r\n\r\n        let paramVal;\r\n        if (!paramKeys.has(actualKey)) {\r\n            paramVal = {\r\n                charset: false,\r\n                values: []\r\n            };\r\n            paramKeys.set(actualKey, paramVal);\r\n        } else {\r\n            paramVal = paramKeys.get(actualKey);\r\n        }\r\n\r\n        let value = header.params[key];\r\n        if (nr === 0 && match[0].charAt(match[0].length - 1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\r\n            paramVal.charset = match[1] || 'utf-8';\r\n            value = match[2];\r\n        }\r\n\r\n        paramVal.values.push({ nr, value });\r\n\r\n        // remove the old reference\r\n        delete header.params[key];\r\n    });\r\n\r\n    paramKeys.forEach((paramVal, key) => {\r\n        header.params[key] = decodeURIComponentWithCharset(\r\n            paramVal.values\r\n                .sort((a, b) => a.nr - b.nr)\r\n                .map(a => a.value)\r\n                .join(''),\r\n            paramVal.charset\r\n        );\r\n    });\r\n}\r\n", "import { blobToArrayBuffer } from './decode-strings.js';\r\n\r\nexport default class PassThroughDecoder {\r\n    constructor() {\r\n        this.chunks = [];\r\n    }\r\n\r\n    update(line) {\r\n        this.chunks.push(line);\r\n        this.chunks.push('\\n');\r\n    }\r\n\r\n    finalize() {\r\n        // convert an array of arraybuffers into a blob and then back into a single arraybuffer\r\n        return blobToArrayBuffer(new Blob(this.chunks, { type: 'application/octet-stream' }));\r\n    }\r\n}\r\n", "import { decodeBase64, blobToArrayBuffer } from './decode-strings.js';\r\n\r\nexport default class Base64Decoder {\r\n    constructor(opts) {\r\n        opts = opts || {};\r\n\r\n        this.decoder = opts.decoder || new TextDecoder();\r\n\r\n        this.maxChunkSize = 100 * 1024;\r\n\r\n        this.chunks = [];\r\n\r\n        this.remainder = '';\r\n    }\r\n\r\n    update(buffer) {\r\n        let str = this.decoder.decode(buffer);\r\n\r\n        if (/[^a-zA-Z0-9+\\/]/.test(str)) {\r\n            str = str.replace(/[^a-zA-Z0-9+\\/]+/g, '');\r\n        }\r\n\r\n        this.remainder += str;\r\n\r\n        if (this.remainder.length >= this.maxChunkSize) {\r\n            let allowedBytes = Math.floor(this.remainder.length / 4) * 4;\r\n            let base64Str;\r\n\r\n            if (allowedBytes === this.remainder.length) {\r\n                base64Str = this.remainder;\r\n                this.remainder = '';\r\n            } else {\r\n                base64Str = this.remainder.substr(0, allowedBytes);\r\n                this.remainder = this.remainder.substr(allowedBytes);\r\n            }\r\n\r\n            if (base64Str.length) {\r\n                this.chunks.push(decodeBase64(base64Str));\r\n            }\r\n        }\r\n    }\r\n\r\n    finalize() {\r\n        if (this.remainder && !/^=+$/.test(this.remainder)) {\r\n            this.chunks.push(decodeBase64(this.remainder));\r\n        }\r\n\r\n        return blobToArrayBuffer(new Blob(this.chunks, { type: 'application/octet-stream' }));\r\n    }\r\n}\r\n", "import { blobToArrayBuffer } from './decode-strings.js';\r\n\r\nexport default class QPDecoder {\r\n    constructor(opts) {\r\n        opts = opts || {};\r\n\r\n        this.decoder = opts.decoder || new TextDecoder();\r\n\r\n        this.maxChunkSize = 100 * 1024;\r\n\r\n        this.remainder = '';\r\n\r\n        this.chunks = [];\r\n    }\r\n\r\n    decodeQPBytes(encodedBytes) {\r\n        let buf = new ArrayBuffer(encodedBytes.length);\r\n        let dataView = new DataView(buf);\r\n        for (let i = 0, len = encodedBytes.length; i < len; i++) {\r\n            dataView.setUint8(i, parseInt(encodedBytes[i], 16));\r\n        }\r\n        return buf;\r\n    }\r\n\r\n    decodeChunks(str) {\r\n        // unwrap newlines\r\n        str = str.replace(/=\\r?\\n/g, '');\r\n\r\n        let list = str.split(/(?==)/);\r\n        let encodedBytes = [];\r\n        for (let part of list) {\r\n            if (part.charAt(0) !== '=') {\r\n                if (encodedBytes.length) {\r\n                    this.chunks.push(this.decodeQPBytes(encodedBytes));\r\n                    encodedBytes = [];\r\n                }\r\n                this.chunks.push(part);\r\n                continue;\r\n            }\r\n\r\n            if (part.length === 3) {\r\n                encodedBytes.push(part.substr(1));\r\n                continue;\r\n            }\r\n\r\n            if (part.length > 3) {\r\n                encodedBytes.push(part.substr(1, 2));\r\n                this.chunks.push(this.decodeQPBytes(encodedBytes));\r\n                encodedBytes = [];\r\n\r\n                part = part.substr(3);\r\n                this.chunks.push(part);\r\n            }\r\n        }\r\n        if (encodedBytes.length) {\r\n            this.chunks.push(this.decodeQPBytes(encodedBytes));\r\n            encodedBytes = [];\r\n        }\r\n    }\r\n\r\n    update(buffer) {\r\n        // expect full lines, so add line terminator as well\r\n        let str = this.decoder.decode(buffer) + '\\n';\r\n\r\n        str = this.remainder + str;\r\n\r\n        if (str.length < this.maxChunkSize) {\r\n            this.remainder = str;\r\n            return;\r\n        }\r\n\r\n        this.remainder = '';\r\n\r\n        let partialEnding = str.match(/=[a-fA-F0-9]?$/);\r\n        if (partialEnding) {\r\n            if (partialEnding.index === 0) {\r\n                this.remainder = str;\r\n                return;\r\n            }\r\n            this.remainder = str.substr(partialEnding.index);\r\n            str = str.substr(0, partialEnding.index);\r\n        }\r\n\r\n        this.decodeChunks(str);\r\n    }\r\n\r\n    finalize() {\r\n        if (this.remainder.length) {\r\n            this.decodeChunks(this.remainder);\r\n            this.remainder = '';\r\n        }\r\n\r\n        // convert an array of arraybuffers into a blob and then back into a single arraybuffer\r\n        return blobToArrayBuffer(new Blob(this.chunks, { type: 'application/octet-stream' }));\r\n    }\r\n}\r\n", "import { getDecoder, decodeParameterValueContinuations, textEncoder } from './decode-strings.js';\r\nimport PassThroughDecoder from './pass-through-decoder.js';\r\nimport Base64Decoder from './base64-decoder.js';\r\nimport QPDecoder from './qp-decoder.js';\r\n\r\nexport default class MimeNode {\r\n    constructor(opts) {\r\n        opts = opts || {};\r\n\r\n        this.postalMime = opts.postalMime;\r\n\r\n        this.root = !!opts.parentNode;\r\n        this.childNodes = [];\r\n        if (opts.parentNode) {\r\n            opts.parentNode.childNodes.push(this);\r\n        }\r\n\r\n        this.state = 'header';\r\n\r\n        this.headerLines = [];\r\n\r\n        this.contentType = {\r\n            value: 'text/plain',\r\n            default: true\r\n        };\r\n\r\n        this.contentTransferEncoding = {\r\n            value: '8bit'\r\n        };\r\n\r\n        this.contentDisposition = {\r\n            value: ''\r\n        };\r\n\r\n        this.headers = [];\r\n\r\n        this.contentDecoder = false;\r\n    }\r\n\r\n    setupContentDecoder(transferEncoding) {\r\n        if (/base64/i.test(transferEncoding)) {\r\n            this.contentDecoder = new Base64Decoder();\r\n        } else if (/quoted-printable/i.test(transferEncoding)) {\r\n            this.contentDecoder = new QPDecoder({ decoder: getDecoder(this.contentType.parsed.params.charset) });\r\n        } else {\r\n            this.contentDecoder = new PassThroughDecoder();\r\n        }\r\n    }\r\n\r\n    async finalize() {\r\n        if (this.state === 'finished') {\r\n            return;\r\n        }\r\n\r\n        if (this.state === 'header') {\r\n            this.processHeaders();\r\n        }\r\n\r\n        // remove self from boundary listing\r\n        let boundaries = this.postalMime.boundaries;\r\n        for (let i = boundaries.length - 1; i >= 0; i--) {\r\n            let boundary = boundaries[i];\r\n            if (boundary.node === this) {\r\n                boundaries.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        await this.finalizeChildNodes();\r\n\r\n        this.content = this.contentDecoder ? await this.contentDecoder.finalize() : null;\r\n\r\n        this.state = 'finished';\r\n    }\r\n\r\n    async finalizeChildNodes() {\r\n        for (let childNode of this.childNodes) {\r\n            await childNode.finalize();\r\n        }\r\n    }\r\n\r\n    parseStructuredHeader(str) {\r\n        let response = {\r\n            value: false,\r\n            params: {}\r\n        };\r\n\r\n        let key = false;\r\n        let value = '';\r\n        let stage = 'value';\r\n\r\n        let quote = false;\r\n        let escaped = false;\r\n        let chr;\r\n\r\n        for (let i = 0, len = str.length; i < len; i++) {\r\n            chr = str.charAt(i);\r\n            switch (stage) {\r\n                case 'key':\r\n                    if (chr === '=') {\r\n                        key = value.trim().toLowerCase();\r\n                        stage = 'value';\r\n                        value = '';\r\n                        break;\r\n                    }\r\n                    value += chr;\r\n                    break;\r\n                case 'value':\r\n                    if (escaped) {\r\n                        value += chr;\r\n                    } else if (chr === '\\\\') {\r\n                        escaped = true;\r\n                        continue;\r\n                    } else if (quote && chr === quote) {\r\n                        quote = false;\r\n                    } else if (!quote && chr === '\"') {\r\n                        quote = chr;\r\n                    } else if (!quote && chr === ';') {\r\n                        if (key === false) {\r\n                            response.value = value.trim();\r\n                        } else {\r\n                            response.params[key] = value.trim();\r\n                        }\r\n                        stage = 'key';\r\n                        value = '';\r\n                    } else {\r\n                        value += chr;\r\n                    }\r\n                    escaped = false;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // finalize remainder\r\n        value = value.trim();\r\n        if (stage === 'value') {\r\n            if (key === false) {\r\n                // default value\r\n                response.value = value;\r\n            } else {\r\n                // subkey value\r\n                response.params[key] = value;\r\n            }\r\n        } else if (value) {\r\n            // treat as key without value, see emptykey:\r\n            // Header-Key: somevalue; key=value; emptykey\r\n            response.params[value.toLowerCase()] = '';\r\n        }\r\n\r\n        if (response.value) {\r\n            response.value = response.value.toLowerCase();\r\n        }\r\n\r\n        // convert Parameter Value Continuations into single strings\r\n        decodeParameterValueContinuations(response);\r\n\r\n        return response;\r\n    }\r\n\r\n    decodeFlowedText(str, delSp) {\r\n        return (\r\n            str\r\n                .split(/\\r?\\n/)\r\n                // remove soft linebreaks\r\n                // soft linebreaks are added after space symbols\r\n                .reduce((previousValue, currentValue) => {\r\n                    if (/ $/.test(previousValue) && !/(^|\\n)-- $/.test(previousValue)) {\r\n                        if (delSp) {\r\n                            // delsp adds space to text to be able to fold it\r\n                            // these spaces can be removed once the text is unfolded\r\n                            return previousValue.slice(0, -1) + currentValue;\r\n                        } else {\r\n                            return previousValue + currentValue;\r\n                        }\r\n                    } else {\r\n                        return previousValue + '\\n' + currentValue;\r\n                    }\r\n                })\r\n                // remove whitespace stuffing\r\n                // http://tools.ietf.org/html/rfc3676#section-4.4\r\n                .replace(/^ /gm, '')\r\n        );\r\n    }\r\n\r\n    getTextContent() {\r\n        if (!this.content) {\r\n            return '';\r\n        }\r\n\r\n        let str = getDecoder(this.contentType.parsed.params.charset).decode(this.content);\r\n\r\n        if (/^flowed$/i.test(this.contentType.parsed.params.format)) {\r\n            str = this.decodeFlowedText(str, /^yes$/i.test(this.contentType.parsed.params.delsp));\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    processHeaders() {\r\n        for (let i = this.headerLines.length - 1; i >= 0; i--) {\r\n            let line = this.headerLines[i];\r\n            if (i && /^\\s/.test(line)) {\r\n                this.headerLines[i - 1] += '\\n' + line;\r\n                this.headerLines.splice(i, 1);\r\n            } else {\r\n                // remove folding and extra WS\r\n                line = line.replace(/\\s+/g, ' ');\r\n                let sep = line.indexOf(':');\r\n                let key = sep < 0 ? line.trim() : line.substr(0, sep).trim();\r\n                let value = sep < 0 ? '' : line.substr(sep + 1).trim();\r\n                this.headers.push({ key: key.toLowerCase(), originalKey: key, value });\r\n\r\n                switch (key.toLowerCase()) {\r\n                    case 'content-type':\r\n                        if (this.contentType.default) {\r\n                            this.contentType = { value, parsed: {} };\r\n                        }\r\n                        break;\r\n                    case 'content-transfer-encoding':\r\n                        this.contentTransferEncoding = { value, parsed: {} };\r\n                        break;\r\n                    case 'content-disposition':\r\n                        this.contentDisposition = { value, parsed: {} };\r\n                        break;\r\n                    case 'content-id':\r\n                        this.contentId = value;\r\n                        break;\r\n                    case 'content-description':\r\n                        this.contentDescription = value;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.contentType.parsed = this.parseStructuredHeader(this.contentType.value);\r\n        this.contentType.multipart = /^multipart\\//i.test(this.contentType.parsed.value)\r\n            ? this.contentType.parsed.value.substr(this.contentType.parsed.value.indexOf('/') + 1)\r\n            : false;\r\n\r\n        if (this.contentType.multipart && this.contentType.parsed.params.boundary) {\r\n            // add self to boundary terminator listing\r\n            this.postalMime.boundaries.push({\r\n                value: textEncoder.encode(this.contentType.parsed.params.boundary),\r\n                node: this\r\n            });\r\n        }\r\n\r\n        this.contentDisposition.parsed = this.parseStructuredHeader(this.contentDisposition.value);\r\n\r\n        this.contentTransferEncoding.encoding = this.contentTransferEncoding.value\r\n            .toLowerCase()\r\n            .split(/[^\\w-]/)\r\n            .shift();\r\n\r\n        this.setupContentDecoder(this.contentTransferEncoding.encoding);\r\n    }\r\n\r\n    feed(line) {\r\n        switch (this.state) {\r\n            case 'header':\r\n                if (!line.length) {\r\n                    this.state = 'body';\r\n                    return this.processHeaders();\r\n                }\r\n                this.headerLines.push(getDecoder().decode(line));\r\n                break;\r\n            case 'body': {\r\n                // add line to body\r\n                this.contentDecoder.update(line);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Entity map from https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references\r\nexport const htmlEntities = {\r\n    '&AElig': '\\u00C6',\r\n    '&AElig;': '\\u00C6',\r\n    '&AMP': '\\u0026',\r\n    '&AMP;': '\\u0026',\r\n    '&Aacute': '\\u00C1',\r\n    '&Aacute;': '\\u00C1',\r\n    '&Abreve;': '\\u0102',\r\n    '&Acirc': '\\u00C2',\r\n    '&Acirc;': '\\u00C2',\r\n    '&Acy;': '\\u0410',\r\n    '&Afr;': '\\uD835\\uDD04',\r\n    '&Agrave': '\\u00C0',\r\n    '&Agrave;': '\\u00C0',\r\n    '&Alpha;': '\\u0391',\r\n    '&Amacr;': '\\u0100',\r\n    '&And;': '\\u2A53',\r\n    '&Aogon;': '\\u0104',\r\n    '&Aopf;': '\\uD835\\uDD38',\r\n    '&ApplyFunction;': '\\u2061',\r\n    '&Aring': '\\u00C5',\r\n    '&Aring;': '\\u00C5',\r\n    '&Ascr;': '\\uD835\\uDC9C',\r\n    '&Assign;': '\\u2254',\r\n    '&Atilde': '\\u00C3',\r\n    '&Atilde;': '\\u00C3',\r\n    '&Auml': '\\u00C4',\r\n    '&Auml;': '\\u00C4',\r\n    '&Backslash;': '\\u2216',\r\n    '&Barv;': '\\u2AE7',\r\n    '&Barwed;': '\\u2306',\r\n    '&Bcy;': '\\u0411',\r\n    '&Because;': '\\u2235',\r\n    '&Bernoullis;': '\\u212C',\r\n    '&Beta;': '\\u0392',\r\n    '&Bfr;': '\\uD835\\uDD05',\r\n    '&Bopf;': '\\uD835\\uDD39',\r\n    '&Breve;': '\\u02D8',\r\n    '&Bscr;': '\\u212C',\r\n    '&Bumpeq;': '\\u224E',\r\n    '&CHcy;': '\\u0427',\r\n    '&COPY': '\\u00A9',\r\n    '&COPY;': '\\u00A9',\r\n    '&Cacute;': '\\u0106',\r\n    '&Cap;': '\\u22D2',\r\n    '&CapitalDifferentialD;': '\\u2145',\r\n    '&Cayleys;': '\\u212D',\r\n    '&Ccaron;': '\\u010C',\r\n    '&Ccedil': '\\u00C7',\r\n    '&Ccedil;': '\\u00C7',\r\n    '&Ccirc;': '\\u0108',\r\n    '&Cconint;': '\\u2230',\r\n    '&Cdot;': '\\u010A',\r\n    '&Cedilla;': '\\u00B8',\r\n    '&CenterDot;': '\\u00B7',\r\n    '&Cfr;': '\\u212D',\r\n    '&Chi;': '\\u03A7',\r\n    '&CircleDot;': '\\u2299',\r\n    '&CircleMinus;': '\\u2296',\r\n    '&CirclePlus;': '\\u2295',\r\n    '&CircleTimes;': '\\u2297',\r\n    '&ClockwiseContourIntegral;': '\\u2232',\r\n    '&CloseCurlyDoubleQuote;': '\\u201D',\r\n    '&CloseCurlyQuote;': '\\u2019',\r\n    '&Colon;': '\\u2237',\r\n    '&Colone;': '\\u2A74',\r\n    '&Congruent;': '\\u2261',\r\n    '&Conint;': '\\u222F',\r\n    '&ContourIntegral;': '\\u222E',\r\n    '&Copf;': '\\u2102',\r\n    '&Coproduct;': '\\u2210',\r\n    '&CounterClockwiseContourIntegral;': '\\u2233',\r\n    '&Cross;': '\\u2A2F',\r\n    '&Cscr;': '\\uD835\\uDC9E',\r\n    '&Cup;': '\\u22D3',\r\n    '&CupCap;': '\\u224D',\r\n    '&DD;': '\\u2145',\r\n    '&DDotrahd;': '\\u2911',\r\n    '&DJcy;': '\\u0402',\r\n    '&DScy;': '\\u0405',\r\n    '&DZcy;': '\\u040F',\r\n    '&Dagger;': '\\u2021',\r\n    '&Darr;': '\\u21A1',\r\n    '&Dashv;': '\\u2AE4',\r\n    '&Dcaron;': '\\u010E',\r\n    '&Dcy;': '\\u0414',\r\n    '&Del;': '\\u2207',\r\n    '&Delta;': '\\u0394',\r\n    '&Dfr;': '\\uD835\\uDD07',\r\n    '&DiacriticalAcute;': '\\u00B4',\r\n    '&DiacriticalDot;': '\\u02D9',\r\n    '&DiacriticalDoubleAcute;': '\\u02DD',\r\n    '&DiacriticalGrave;': '\\u0060',\r\n    '&DiacriticalTilde;': '\\u02DC',\r\n    '&Diamond;': '\\u22C4',\r\n    '&DifferentialD;': '\\u2146',\r\n    '&Dopf;': '\\uD835\\uDD3B',\r\n    '&Dot;': '\\u00A8',\r\n    '&DotDot;': '\\u20DC',\r\n    '&DotEqual;': '\\u2250',\r\n    '&DoubleContourIntegral;': '\\u222F',\r\n    '&DoubleDot;': '\\u00A8',\r\n    '&DoubleDownArrow;': '\\u21D3',\r\n    '&DoubleLeftArrow;': '\\u21D0',\r\n    '&DoubleLeftRightArrow;': '\\u21D4',\r\n    '&DoubleLeftTee;': '\\u2AE4',\r\n    '&DoubleLongLeftArrow;': '\\u27F8',\r\n    '&DoubleLongLeftRightArrow;': '\\u27FA',\r\n    '&DoubleLongRightArrow;': '\\u27F9',\r\n    '&DoubleRightArrow;': '\\u21D2',\r\n    '&DoubleRightTee;': '\\u22A8',\r\n    '&DoubleUpArrow;': '\\u21D1',\r\n    '&DoubleUpDownArrow;': '\\u21D5',\r\n    '&DoubleVerticalBar;': '\\u2225',\r\n    '&DownArrow;': '\\u2193',\r\n    '&DownArrowBar;': '\\u2913',\r\n    '&DownArrowUpArrow;': '\\u21F5',\r\n    '&DownBreve;': '\\u0311',\r\n    '&DownLeftRightVector;': '\\u2950',\r\n    '&DownLeftTeeVector;': '\\u295E',\r\n    '&DownLeftVector;': '\\u21BD',\r\n    '&DownLeftVectorBar;': '\\u2956',\r\n    '&DownRightTeeVector;': '\\u295F',\r\n    '&DownRightVector;': '\\u21C1',\r\n    '&DownRightVectorBar;': '\\u2957',\r\n    '&DownTee;': '\\u22A4',\r\n    '&DownTeeArrow;': '\\u21A7',\r\n    '&Downarrow;': '\\u21D3',\r\n    '&Dscr;': '\\uD835\\uDC9F',\r\n    '&Dstrok;': '\\u0110',\r\n    '&ENG;': '\\u014A',\r\n    '&ETH': '\\u00D0',\r\n    '&ETH;': '\\u00D0',\r\n    '&Eacute': '\\u00C9',\r\n    '&Eacute;': '\\u00C9',\r\n    '&Ecaron;': '\\u011A',\r\n    '&Ecirc': '\\u00CA',\r\n    '&Ecirc;': '\\u00CA',\r\n    '&Ecy;': '\\u042D',\r\n    '&Edot;': '\\u0116',\r\n    '&Efr;': '\\uD835\\uDD08',\r\n    '&Egrave': '\\u00C8',\r\n    '&Egrave;': '\\u00C8',\r\n    '&Element;': '\\u2208',\r\n    '&Emacr;': '\\u0112',\r\n    '&EmptySmallSquare;': '\\u25FB',\r\n    '&EmptyVerySmallSquare;': '\\u25AB',\r\n    '&Eogon;': '\\u0118',\r\n    '&Eopf;': '\\uD835\\uDD3C',\r\n    '&Epsilon;': '\\u0395',\r\n    '&Equal;': '\\u2A75',\r\n    '&EqualTilde;': '\\u2242',\r\n    '&Equilibrium;': '\\u21CC',\r\n    '&Escr;': '\\u2130',\r\n    '&Esim;': '\\u2A73',\r\n    '&Eta;': '\\u0397',\r\n    '&Euml': '\\u00CB',\r\n    '&Euml;': '\\u00CB',\r\n    '&Exists;': '\\u2203',\r\n    '&ExponentialE;': '\\u2147',\r\n    '&Fcy;': '\\u0424',\r\n    '&Ffr;': '\\uD835\\uDD09',\r\n    '&FilledSmallSquare;': '\\u25FC',\r\n    '&FilledVerySmallSquare;': '\\u25AA',\r\n    '&Fopf;': '\\uD835\\uDD3D',\r\n    '&ForAll;': '\\u2200',\r\n    '&Fouriertrf;': '\\u2131',\r\n    '&Fscr;': '\\u2131',\r\n    '&GJcy;': '\\u0403',\r\n    '&GT': '\\u003E',\r\n    '&GT;': '\\u003E',\r\n    '&Gamma;': '\\u0393',\r\n    '&Gammad;': '\\u03DC',\r\n    '&Gbreve;': '\\u011E',\r\n    '&Gcedil;': '\\u0122',\r\n    '&Gcirc;': '\\u011C',\r\n    '&Gcy;': '\\u0413',\r\n    '&Gdot;': '\\u0120',\r\n    '&Gfr;': '\\uD835\\uDD0A',\r\n    '&Gg;': '\\u22D9',\r\n    '&Gopf;': '\\uD835\\uDD3E',\r\n    '&GreaterEqual;': '\\u2265',\r\n    '&GreaterEqualLess;': '\\u22DB',\r\n    '&GreaterFullEqual;': '\\u2267',\r\n    '&GreaterGreater;': '\\u2AA2',\r\n    '&GreaterLess;': '\\u2277',\r\n    '&GreaterSlantEqual;': '\\u2A7E',\r\n    '&GreaterTilde;': '\\u2273',\r\n    '&Gscr;': '\\uD835\\uDCA2',\r\n    '&Gt;': '\\u226B',\r\n    '&HARDcy;': '\\u042A',\r\n    '&Hacek;': '\\u02C7',\r\n    '&Hat;': '\\u005E',\r\n    '&Hcirc;': '\\u0124',\r\n    '&Hfr;': '\\u210C',\r\n    '&HilbertSpace;': '\\u210B',\r\n    '&Hopf;': '\\u210D',\r\n    '&HorizontalLine;': '\\u2500',\r\n    '&Hscr;': '\\u210B',\r\n    '&Hstrok;': '\\u0126',\r\n    '&HumpDownHump;': '\\u224E',\r\n    '&HumpEqual;': '\\u224F',\r\n    '&IEcy;': '\\u0415',\r\n    '&IJlig;': '\\u0132',\r\n    '&IOcy;': '\\u0401',\r\n    '&Iacute': '\\u00CD',\r\n    '&Iacute;': '\\u00CD',\r\n    '&Icirc': '\\u00CE',\r\n    '&Icirc;': '\\u00CE',\r\n    '&Icy;': '\\u0418',\r\n    '&Idot;': '\\u0130',\r\n    '&Ifr;': '\\u2111',\r\n    '&Igrave': '\\u00CC',\r\n    '&Igrave;': '\\u00CC',\r\n    '&Im;': '\\u2111',\r\n    '&Imacr;': '\\u012A',\r\n    '&ImaginaryI;': '\\u2148',\r\n    '&Implies;': '\\u21D2',\r\n    '&Int;': '\\u222C',\r\n    '&Integral;': '\\u222B',\r\n    '&Intersection;': '\\u22C2',\r\n    '&InvisibleComma;': '\\u2063',\r\n    '&InvisibleTimes;': '\\u2062',\r\n    '&Iogon;': '\\u012E',\r\n    '&Iopf;': '\\uD835\\uDD40',\r\n    '&Iota;': '\\u0399',\r\n    '&Iscr;': '\\u2110',\r\n    '&Itilde;': '\\u0128',\r\n    '&Iukcy;': '\\u0406',\r\n    '&Iuml': '\\u00CF',\r\n    '&Iuml;': '\\u00CF',\r\n    '&Jcirc;': '\\u0134',\r\n    '&Jcy;': '\\u0419',\r\n    '&Jfr;': '\\uD835\\uDD0D',\r\n    '&Jopf;': '\\uD835\\uDD41',\r\n    '&Jscr;': '\\uD835\\uDCA5',\r\n    '&Jsercy;': '\\u0408',\r\n    '&Jukcy;': '\\u0404',\r\n    '&KHcy;': '\\u0425',\r\n    '&KJcy;': '\\u040C',\r\n    '&Kappa;': '\\u039A',\r\n    '&Kcedil;': '\\u0136',\r\n    '&Kcy;': '\\u041A',\r\n    '&Kfr;': '\\uD835\\uDD0E',\r\n    '&Kopf;': '\\uD835\\uDD42',\r\n    '&Kscr;': '\\uD835\\uDCA6',\r\n    '&LJcy;': '\\u0409',\r\n    '&LT': '\\u003C',\r\n    '&LT;': '\\u003C',\r\n    '&Lacute;': '\\u0139',\r\n    '&Lambda;': '\\u039B',\r\n    '&Lang;': '\\u27EA',\r\n    '&Laplacetrf;': '\\u2112',\r\n    '&Larr;': '\\u219E',\r\n    '&Lcaron;': '\\u013D',\r\n    '&Lcedil;': '\\u013B',\r\n    '&Lcy;': '\\u041B',\r\n    '&LeftAngleBracket;': '\\u27E8',\r\n    '&LeftArrow;': '\\u2190',\r\n    '&LeftArrowBar;': '\\u21E4',\r\n    '&LeftArrowRightArrow;': '\\u21C6',\r\n    '&LeftCeiling;': '\\u2308',\r\n    '&LeftDoubleBracket;': '\\u27E6',\r\n    '&LeftDownTeeVector;': '\\u2961',\r\n    '&LeftDownVector;': '\\u21C3',\r\n    '&LeftDownVectorBar;': '\\u2959',\r\n    '&LeftFloor;': '\\u230A',\r\n    '&LeftRightArrow;': '\\u2194',\r\n    '&LeftRightVector;': '\\u294E',\r\n    '&LeftTee;': '\\u22A3',\r\n    '&LeftTeeArrow;': '\\u21A4',\r\n    '&LeftTeeVector;': '\\u295A',\r\n    '&LeftTriangle;': '\\u22B2',\r\n    '&LeftTriangleBar;': '\\u29CF',\r\n    '&LeftTriangleEqual;': '\\u22B4',\r\n    '&LeftUpDownVector;': '\\u2951',\r\n    '&LeftUpTeeVector;': '\\u2960',\r\n    '&LeftUpVector;': '\\u21BF',\r\n    '&LeftUpVectorBar;': '\\u2958',\r\n    '&LeftVector;': '\\u21BC',\r\n    '&LeftVectorBar;': '\\u2952',\r\n    '&Leftarrow;': '\\u21D0',\r\n    '&Leftrightarrow;': '\\u21D4',\r\n    '&LessEqualGreater;': '\\u22DA',\r\n    '&LessFullEqual;': '\\u2266',\r\n    '&LessGreater;': '\\u2276',\r\n    '&LessLess;': '\\u2AA1',\r\n    '&LessSlantEqual;': '\\u2A7D',\r\n    '&LessTilde;': '\\u2272',\r\n    '&Lfr;': '\\uD835\\uDD0F',\r\n    '&Ll;': '\\u22D8',\r\n    '&Lleftarrow;': '\\u21DA',\r\n    '&Lmidot;': '\\u013F',\r\n    '&LongLeftArrow;': '\\u27F5',\r\n    '&LongLeftRightArrow;': '\\u27F7',\r\n    '&LongRightArrow;': '\\u27F6',\r\n    '&Longleftarrow;': '\\u27F8',\r\n    '&Longleftrightarrow;': '\\u27FA',\r\n    '&Longrightarrow;': '\\u27F9',\r\n    '&Lopf;': '\\uD835\\uDD43',\r\n    '&LowerLeftArrow;': '\\u2199',\r\n    '&LowerRightArrow;': '\\u2198',\r\n    '&Lscr;': '\\u2112',\r\n    '&Lsh;': '\\u21B0',\r\n    '&Lstrok;': '\\u0141',\r\n    '&Lt;': '\\u226A',\r\n    '&Map;': '\\u2905',\r\n    '&Mcy;': '\\u041C',\r\n    '&MediumSpace;': '\\u205F',\r\n    '&Mellintrf;': '\\u2133',\r\n    '&Mfr;': '\\uD835\\uDD10',\r\n    '&MinusPlus;': '\\u2213',\r\n    '&Mopf;': '\\uD835\\uDD44',\r\n    '&Mscr;': '\\u2133',\r\n    '&Mu;': '\\u039C',\r\n    '&NJcy;': '\\u040A',\r\n    '&Nacute;': '\\u0143',\r\n    '&Ncaron;': '\\u0147',\r\n    '&Ncedil;': '\\u0145',\r\n    '&Ncy;': '\\u041D',\r\n    '&NegativeMediumSpace;': '\\u200B',\r\n    '&NegativeThickSpace;': '\\u200B',\r\n    '&NegativeThinSpace;': '\\u200B',\r\n    '&NegativeVeryThinSpace;': '\\u200B',\r\n    '&NestedGreaterGreater;': '\\u226B',\r\n    '&NestedLessLess;': '\\u226A',\r\n    '&NewLine;': '\\u000A',\r\n    '&Nfr;': '\\uD835\\uDD11',\r\n    '&NoBreak;': '\\u2060',\r\n    '&NonBreakingSpace;': '\\u00A0',\r\n    '&Nopf;': '\\u2115',\r\n    '&Not;': '\\u2AEC',\r\n    '&NotCongruent;': '\\u2262',\r\n    '&NotCupCap;': '\\u226D',\r\n    '&NotDoubleVerticalBar;': '\\u2226',\r\n    '&NotElement;': '\\u2209',\r\n    '&NotEqual;': '\\u2260',\r\n    '&NotEqualTilde;': '\\u2242\\u0338',\r\n    '&NotExists;': '\\u2204',\r\n    '&NotGreater;': '\\u226F',\r\n    '&NotGreaterEqual;': '\\u2271',\r\n    '&NotGreaterFullEqual;': '\\u2267\\u0338',\r\n    '&NotGreaterGreater;': '\\u226B\\u0338',\r\n    '&NotGreaterLess;': '\\u2279',\r\n    '&NotGreaterSlantEqual;': '\\u2A7E\\u0338',\r\n    '&NotGreaterTilde;': '\\u2275',\r\n    '&NotHumpDownHump;': '\\u224E\\u0338',\r\n    '&NotHumpEqual;': '\\u224F\\u0338',\r\n    '&NotLeftTriangle;': '\\u22EA',\r\n    '&NotLeftTriangleBar;': '\\u29CF\\u0338',\r\n    '&NotLeftTriangleEqual;': '\\u22EC',\r\n    '&NotLess;': '\\u226E',\r\n    '&NotLessEqual;': '\\u2270',\r\n    '&NotLessGreater;': '\\u2278',\r\n    '&NotLessLess;': '\\u226A\\u0338',\r\n    '&NotLessSlantEqual;': '\\u2A7D\\u0338',\r\n    '&NotLessTilde;': '\\u2274',\r\n    '&NotNestedGreaterGreater;': '\\u2AA2\\u0338',\r\n    '&NotNestedLessLess;': '\\u2AA1\\u0338',\r\n    '&NotPrecedes;': '\\u2280',\r\n    '&NotPrecedesEqual;': '\\u2AAF\\u0338',\r\n    '&NotPrecedesSlantEqual;': '\\u22E0',\r\n    '&NotReverseElement;': '\\u220C',\r\n    '&NotRightTriangle;': '\\u22EB',\r\n    '&NotRightTriangleBar;': '\\u29D0\\u0338',\r\n    '&NotRightTriangleEqual;': '\\u22ED',\r\n    '&NotSquareSubset;': '\\u228F\\u0338',\r\n    '&NotSquareSubsetEqual;': '\\u22E2',\r\n    '&NotSquareSuperset;': '\\u2290\\u0338',\r\n    '&NotSquareSupersetEqual;': '\\u22E3',\r\n    '&NotSubset;': '\\u2282\\u20D2',\r\n    '&NotSubsetEqual;': '\\u2288',\r\n    '&NotSucceeds;': '\\u2281',\r\n    '&NotSucceedsEqual;': '\\u2AB0\\u0338',\r\n    '&NotSucceedsSlantEqual;': '\\u22E1',\r\n    '&NotSucceedsTilde;': '\\u227F\\u0338',\r\n    '&NotSuperset;': '\\u2283\\u20D2',\r\n    '&NotSupersetEqual;': '\\u2289',\r\n    '&NotTilde;': '\\u2241',\r\n    '&NotTildeEqual;': '\\u2244',\r\n    '&NotTildeFullEqual;': '\\u2247',\r\n    '&NotTildeTilde;': '\\u2249',\r\n    '&NotVerticalBar;': '\\u2224',\r\n    '&Nscr;': '\\uD835\\uDCA9',\r\n    '&Ntilde': '\\u00D1',\r\n    '&Ntilde;': '\\u00D1',\r\n    '&Nu;': '\\u039D',\r\n    '&OElig;': '\\u0152',\r\n    '&Oacute': '\\u00D3',\r\n    '&Oacute;': '\\u00D3',\r\n    '&Ocirc': '\\u00D4',\r\n    '&Ocirc;': '\\u00D4',\r\n    '&Ocy;': '\\u041E',\r\n    '&Odblac;': '\\u0150',\r\n    '&Ofr;': '\\uD835\\uDD12',\r\n    '&Ograve': '\\u00D2',\r\n    '&Ograve;': '\\u00D2',\r\n    '&Omacr;': '\\u014C',\r\n    '&Omega;': '\\u03A9',\r\n    '&Omicron;': '\\u039F',\r\n    '&Oopf;': '\\uD835\\uDD46',\r\n    '&OpenCurlyDoubleQuote;': '\\u201C',\r\n    '&OpenCurlyQuote;': '\\u2018',\r\n    '&Or;': '\\u2A54',\r\n    '&Oscr;': '\\uD835\\uDCAA',\r\n    '&Oslash': '\\u00D8',\r\n    '&Oslash;': '\\u00D8',\r\n    '&Otilde': '\\u00D5',\r\n    '&Otilde;': '\\u00D5',\r\n    '&Otimes;': '\\u2A37',\r\n    '&Ouml': '\\u00D6',\r\n    '&Ouml;': '\\u00D6',\r\n    '&OverBar;': '\\u203E',\r\n    '&OverBrace;': '\\u23DE',\r\n    '&OverBracket;': '\\u23B4',\r\n    '&OverParenthesis;': '\\u23DC',\r\n    '&PartialD;': '\\u2202',\r\n    '&Pcy;': '\\u041F',\r\n    '&Pfr;': '\\uD835\\uDD13',\r\n    '&Phi;': '\\u03A6',\r\n    '&Pi;': '\\u03A0',\r\n    '&PlusMinus;': '\\u00B1',\r\n    '&Poincareplane;': '\\u210C',\r\n    '&Popf;': '\\u2119',\r\n    '&Pr;': '\\u2ABB',\r\n    '&Precedes;': '\\u227A',\r\n    '&PrecedesEqual;': '\\u2AAF',\r\n    '&PrecedesSlantEqual;': '\\u227C',\r\n    '&PrecedesTilde;': '\\u227E',\r\n    '&Prime;': '\\u2033',\r\n    '&Product;': '\\u220F',\r\n    '&Proportion;': '\\u2237',\r\n    '&Proportional;': '\\u221D',\r\n    '&Pscr;': '\\uD835\\uDCAB',\r\n    '&Psi;': '\\u03A8',\r\n    '&QUOT': '\\u0022',\r\n    '&QUOT;': '\\u0022',\r\n    '&Qfr;': '\\uD835\\uDD14',\r\n    '&Qopf;': '\\u211A',\r\n    '&Qscr;': '\\uD835\\uDCAC',\r\n    '&RBarr;': '\\u2910',\r\n    '&REG': '\\u00AE',\r\n    '&REG;': '\\u00AE',\r\n    '&Racute;': '\\u0154',\r\n    '&Rang;': '\\u27EB',\r\n    '&Rarr;': '\\u21A0',\r\n    '&Rarrtl;': '\\u2916',\r\n    '&Rcaron;': '\\u0158',\r\n    '&Rcedil;': '\\u0156',\r\n    '&Rcy;': '\\u0420',\r\n    '&Re;': '\\u211C',\r\n    '&ReverseElement;': '\\u220B',\r\n    '&ReverseEquilibrium;': '\\u21CB',\r\n    '&ReverseUpEquilibrium;': '\\u296F',\r\n    '&Rfr;': '\\u211C',\r\n    '&Rho;': '\\u03A1',\r\n    '&RightAngleBracket;': '\\u27E9',\r\n    '&RightArrow;': '\\u2192',\r\n    '&RightArrowBar;': '\\u21E5',\r\n    '&RightArrowLeftArrow;': '\\u21C4',\r\n    '&RightCeiling;': '\\u2309',\r\n    '&RightDoubleBracket;': '\\u27E7',\r\n    '&RightDownTeeVector;': '\\u295D',\r\n    '&RightDownVector;': '\\u21C2',\r\n    '&RightDownVectorBar;': '\\u2955',\r\n    '&RightFloor;': '\\u230B',\r\n    '&RightTee;': '\\u22A2',\r\n    '&RightTeeArrow;': '\\u21A6',\r\n    '&RightTeeVector;': '\\u295B',\r\n    '&RightTriangle;': '\\u22B3',\r\n    '&RightTriangleBar;': '\\u29D0',\r\n    '&RightTriangleEqual;': '\\u22B5',\r\n    '&RightUpDownVector;': '\\u294F',\r\n    '&RightUpTeeVector;': '\\u295C',\r\n    '&RightUpVector;': '\\u21BE',\r\n    '&RightUpVectorBar;': '\\u2954',\r\n    '&RightVector;': '\\u21C0',\r\n    '&RightVectorBar;': '\\u2953',\r\n    '&Rightarrow;': '\\u21D2',\r\n    '&Ropf;': '\\u211D',\r\n    '&RoundImplies;': '\\u2970',\r\n    '&Rrightarrow;': '\\u21DB',\r\n    '&Rscr;': '\\u211B',\r\n    '&Rsh;': '\\u21B1',\r\n    '&RuleDelayed;': '\\u29F4',\r\n    '&SHCHcy;': '\\u0429',\r\n    '&SHcy;': '\\u0428',\r\n    '&SOFTcy;': '\\u042C',\r\n    '&Sacute;': '\\u015A',\r\n    '&Sc;': '\\u2ABC',\r\n    '&Scaron;': '\\u0160',\r\n    '&Scedil;': '\\u015E',\r\n    '&Scirc;': '\\u015C',\r\n    '&Scy;': '\\u0421',\r\n    '&Sfr;': '\\uD835\\uDD16',\r\n    '&ShortDownArrow;': '\\u2193',\r\n    '&ShortLeftArrow;': '\\u2190',\r\n    '&ShortRightArrow;': '\\u2192',\r\n    '&ShortUpArrow;': '\\u2191',\r\n    '&Sigma;': '\\u03A3',\r\n    '&SmallCircle;': '\\u2218',\r\n    '&Sopf;': '\\uD835\\uDD4A',\r\n    '&Sqrt;': '\\u221A',\r\n    '&Square;': '\\u25A1',\r\n    '&SquareIntersection;': '\\u2293',\r\n    '&SquareSubset;': '\\u228F',\r\n    '&SquareSubsetEqual;': '\\u2291',\r\n    '&SquareSuperset;': '\\u2290',\r\n    '&SquareSupersetEqual;': '\\u2292',\r\n    '&SquareUnion;': '\\u2294',\r\n    '&Sscr;': '\\uD835\\uDCAE',\r\n    '&Star;': '\\u22C6',\r\n    '&Sub;': '\\u22D0',\r\n    '&Subset;': '\\u22D0',\r\n    '&SubsetEqual;': '\\u2286',\r\n    '&Succeeds;': '\\u227B',\r\n    '&SucceedsEqual;': '\\u2AB0',\r\n    '&SucceedsSlantEqual;': '\\u227D',\r\n    '&SucceedsTilde;': '\\u227F',\r\n    '&SuchThat;': '\\u220B',\r\n    '&Sum;': '\\u2211',\r\n    '&Sup;': '\\u22D1',\r\n    '&Superset;': '\\u2283',\r\n    '&SupersetEqual;': '\\u2287',\r\n    '&Supset;': '\\u22D1',\r\n    '&THORN': '\\u00DE',\r\n    '&THORN;': '\\u00DE',\r\n    '&TRADE;': '\\u2122',\r\n    '&TSHcy;': '\\u040B',\r\n    '&TScy;': '\\u0426',\r\n    '&Tab;': '\\u0009',\r\n    '&Tau;': '\\u03A4',\r\n    '&Tcaron;': '\\u0164',\r\n    '&Tcedil;': '\\u0162',\r\n    '&Tcy;': '\\u0422',\r\n    '&Tfr;': '\\uD835\\uDD17',\r\n    '&Therefore;': '\\u2234',\r\n    '&Theta;': '\\u0398',\r\n    '&ThickSpace;': '\\u205F\\u200A',\r\n    '&ThinSpace;': '\\u2009',\r\n    '&Tilde;': '\\u223C',\r\n    '&TildeEqual;': '\\u2243',\r\n    '&TildeFullEqual;': '\\u2245',\r\n    '&TildeTilde;': '\\u2248',\r\n    '&Topf;': '\\uD835\\uDD4B',\r\n    '&TripleDot;': '\\u20DB',\r\n    '&Tscr;': '\\uD835\\uDCAF',\r\n    '&Tstrok;': '\\u0166',\r\n    '&Uacute': '\\u00DA',\r\n    '&Uacute;': '\\u00DA',\r\n    '&Uarr;': '\\u219F',\r\n    '&Uarrocir;': '\\u2949',\r\n    '&Ubrcy;': '\\u040E',\r\n    '&Ubreve;': '\\u016C',\r\n    '&Ucirc': '\\u00DB',\r\n    '&Ucirc;': '\\u00DB',\r\n    '&Ucy;': '\\u0423',\r\n    '&Udblac;': '\\u0170',\r\n    '&Ufr;': '\\uD835\\uDD18',\r\n    '&Ugrave': '\\u00D9',\r\n    '&Ugrave;': '\\u00D9',\r\n    '&Umacr;': '\\u016A',\r\n    '&UnderBar;': '\\u005F',\r\n    '&UnderBrace;': '\\u23DF',\r\n    '&UnderBracket;': '\\u23B5',\r\n    '&UnderParenthesis;': '\\u23DD',\r\n    '&Union;': '\\u22C3',\r\n    '&UnionPlus;': '\\u228E',\r\n    '&Uogon;': '\\u0172',\r\n    '&Uopf;': '\\uD835\\uDD4C',\r\n    '&UpArrow;': '\\u2191',\r\n    '&UpArrowBar;': '\\u2912',\r\n    '&UpArrowDownArrow;': '\\u21C5',\r\n    '&UpDownArrow;': '\\u2195',\r\n    '&UpEquilibrium;': '\\u296E',\r\n    '&UpTee;': '\\u22A5',\r\n    '&UpTeeArrow;': '\\u21A5',\r\n    '&Uparrow;': '\\u21D1',\r\n    '&Updownarrow;': '\\u21D5',\r\n    '&UpperLeftArrow;': '\\u2196',\r\n    '&UpperRightArrow;': '\\u2197',\r\n    '&Upsi;': '\\u03D2',\r\n    '&Upsilon;': '\\u03A5',\r\n    '&Uring;': '\\u016E',\r\n    '&Uscr;': '\\uD835\\uDCB0',\r\n    '&Utilde;': '\\u0168',\r\n    '&Uuml': '\\u00DC',\r\n    '&Uuml;': '\\u00DC',\r\n    '&VDash;': '\\u22AB',\r\n    '&Vbar;': '\\u2AEB',\r\n    '&Vcy;': '\\u0412',\r\n    '&Vdash;': '\\u22A9',\r\n    '&Vdashl;': '\\u2AE6',\r\n    '&Vee;': '\\u22C1',\r\n    '&Verbar;': '\\u2016',\r\n    '&Vert;': '\\u2016',\r\n    '&VerticalBar;': '\\u2223',\r\n    '&VerticalLine;': '\\u007C',\r\n    '&VerticalSeparator;': '\\u2758',\r\n    '&VerticalTilde;': '\\u2240',\r\n    '&VeryThinSpace;': '\\u200A',\r\n    '&Vfr;': '\\uD835\\uDD19',\r\n    '&Vopf;': '\\uD835\\uDD4D',\r\n    '&Vscr;': '\\uD835\\uDCB1',\r\n    '&Vvdash;': '\\u22AA',\r\n    '&Wcirc;': '\\u0174',\r\n    '&Wedge;': '\\u22C0',\r\n    '&Wfr;': '\\uD835\\uDD1A',\r\n    '&Wopf;': '\\uD835\\uDD4E',\r\n    '&Wscr;': '\\uD835\\uDCB2',\r\n    '&Xfr;': '\\uD835\\uDD1B',\r\n    '&Xi;': '\\u039E',\r\n    '&Xopf;': '\\uD835\\uDD4F',\r\n    '&Xscr;': '\\uD835\\uDCB3',\r\n    '&YAcy;': '\\u042F',\r\n    '&YIcy;': '\\u0407',\r\n    '&YUcy;': '\\u042E',\r\n    '&Yacute': '\\u00DD',\r\n    '&Yacute;': '\\u00DD',\r\n    '&Ycirc;': '\\u0176',\r\n    '&Ycy;': '\\u042B',\r\n    '&Yfr;': '\\uD835\\uDD1C',\r\n    '&Yopf;': '\\uD835\\uDD50',\r\n    '&Yscr;': '\\uD835\\uDCB4',\r\n    '&Yuml;': '\\u0178',\r\n    '&ZHcy;': '\\u0416',\r\n    '&Zacute;': '\\u0179',\r\n    '&Zcaron;': '\\u017D',\r\n    '&Zcy;': '\\u0417',\r\n    '&Zdot;': '\\u017B',\r\n    '&ZeroWidthSpace;': '\\u200B',\r\n    '&Zeta;': '\\u0396',\r\n    '&Zfr;': '\\u2128',\r\n    '&Zopf;': '\\u2124',\r\n    '&Zscr;': '\\uD835\\uDCB5',\r\n    '&aacute': '\\u00E1',\r\n    '&aacute;': '\\u00E1',\r\n    '&abreve;': '\\u0103',\r\n    '&ac;': '\\u223E',\r\n    '&acE;': '\\u223E\\u0333',\r\n    '&acd;': '\\u223F',\r\n    '&acirc': '\\u00E2',\r\n    '&acirc;': '\\u00E2',\r\n    '&acute': '\\u00B4',\r\n    '&acute;': '\\u00B4',\r\n    '&acy;': '\\u0430',\r\n    '&aelig': '\\u00E6',\r\n    '&aelig;': '\\u00E6',\r\n    '&af;': '\\u2061',\r\n    '&afr;': '\\uD835\\uDD1E',\r\n    '&agrave': '\\u00E0',\r\n    '&agrave;': '\\u00E0',\r\n    '&alefsym;': '\\u2135',\r\n    '&aleph;': '\\u2135',\r\n    '&alpha;': '\\u03B1',\r\n    '&amacr;': '\\u0101',\r\n    '&amalg;': '\\u2A3F',\r\n    '&amp': '\\u0026',\r\n    '&amp;': '\\u0026',\r\n    '&and;': '\\u2227',\r\n    '&andand;': '\\u2A55',\r\n    '&andd;': '\\u2A5C',\r\n    '&andslope;': '\\u2A58',\r\n    '&andv;': '\\u2A5A',\r\n    '&ang;': '\\u2220',\r\n    '&ange;': '\\u29A4',\r\n    '&angle;': '\\u2220',\r\n    '&angmsd;': '\\u2221',\r\n    '&angmsdaa;': '\\u29A8',\r\n    '&angmsdab;': '\\u29A9',\r\n    '&angmsdac;': '\\u29AA',\r\n    '&angmsdad;': '\\u29AB',\r\n    '&angmsdae;': '\\u29AC',\r\n    '&angmsdaf;': '\\u29AD',\r\n    '&angmsdag;': '\\u29AE',\r\n    '&angmsdah;': '\\u29AF',\r\n    '&angrt;': '\\u221F',\r\n    '&angrtvb;': '\\u22BE',\r\n    '&angrtvbd;': '\\u299D',\r\n    '&angsph;': '\\u2222',\r\n    '&angst;': '\\u00C5',\r\n    '&angzarr;': '\\u237C',\r\n    '&aogon;': '\\u0105',\r\n    '&aopf;': '\\uD835\\uDD52',\r\n    '&ap;': '\\u2248',\r\n    '&apE;': '\\u2A70',\r\n    '&apacir;': '\\u2A6F',\r\n    '&ape;': '\\u224A',\r\n    '&apid;': '\\u224B',\r\n    '&apos;': '\\u0027',\r\n    '&approx;': '\\u2248',\r\n    '&approxeq;': '\\u224A',\r\n    '&aring': '\\u00E5',\r\n    '&aring;': '\\u00E5',\r\n    '&ascr;': '\\uD835\\uDCB6',\r\n    '&ast;': '\\u002A',\r\n    '&asymp;': '\\u2248',\r\n    '&asympeq;': '\\u224D',\r\n    '&atilde': '\\u00E3',\r\n    '&atilde;': '\\u00E3',\r\n    '&auml': '\\u00E4',\r\n    '&auml;': '\\u00E4',\r\n    '&awconint;': '\\u2233',\r\n    '&awint;': '\\u2A11',\r\n    '&bNot;': '\\u2AED',\r\n    '&backcong;': '\\u224C',\r\n    '&backepsilon;': '\\u03F6',\r\n    '&backprime;': '\\u2035',\r\n    '&backsim;': '\\u223D',\r\n    '&backsimeq;': '\\u22CD',\r\n    '&barvee;': '\\u22BD',\r\n    '&barwed;': '\\u2305',\r\n    '&barwedge;': '\\u2305',\r\n    '&bbrk;': '\\u23B5',\r\n    '&bbrktbrk;': '\\u23B6',\r\n    '&bcong;': '\\u224C',\r\n    '&bcy;': '\\u0431',\r\n    '&bdquo;': '\\u201E',\r\n    '&becaus;': '\\u2235',\r\n    '&because;': '\\u2235',\r\n    '&bemptyv;': '\\u29B0',\r\n    '&bepsi;': '\\u03F6',\r\n    '&bernou;': '\\u212C',\r\n    '&beta;': '\\u03B2',\r\n    '&beth;': '\\u2136',\r\n    '&between;': '\\u226C',\r\n    '&bfr;': '\\uD835\\uDD1F',\r\n    '&bigcap;': '\\u22C2',\r\n    '&bigcirc;': '\\u25EF',\r\n    '&bigcup;': '\\u22C3',\r\n    '&bigodot;': '\\u2A00',\r\n    '&bigoplus;': '\\u2A01',\r\n    '&bigotimes;': '\\u2A02',\r\n    '&bigsqcup;': '\\u2A06',\r\n    '&bigstar;': '\\u2605',\r\n    '&bigtriangledown;': '\\u25BD',\r\n    '&bigtriangleup;': '\\u25B3',\r\n    '&biguplus;': '\\u2A04',\r\n    '&bigvee;': '\\u22C1',\r\n    '&bigwedge;': '\\u22C0',\r\n    '&bkarow;': '\\u290D',\r\n    '&blacklozenge;': '\\u29EB',\r\n    '&blacksquare;': '\\u25AA',\r\n    '&blacktriangle;': '\\u25B4',\r\n    '&blacktriangledown;': '\\u25BE',\r\n    '&blacktriangleleft;': '\\u25C2',\r\n    '&blacktriangleright;': '\\u25B8',\r\n    '&blank;': '\\u2423',\r\n    '&blk12;': '\\u2592',\r\n    '&blk14;': '\\u2591',\r\n    '&blk34;': '\\u2593',\r\n    '&block;': '\\u2588',\r\n    '&bne;': '\\u003D\\u20E5',\r\n    '&bnequiv;': '\\u2261\\u20E5',\r\n    '&bnot;': '\\u2310',\r\n    '&bopf;': '\\uD835\\uDD53',\r\n    '&bot;': '\\u22A5',\r\n    '&bottom;': '\\u22A5',\r\n    '&bowtie;': '\\u22C8',\r\n    '&boxDL;': '\\u2557',\r\n    '&boxDR;': '\\u2554',\r\n    '&boxDl;': '\\u2556',\r\n    '&boxDr;': '\\u2553',\r\n    '&boxH;': '\\u2550',\r\n    '&boxHD;': '\\u2566',\r\n    '&boxHU;': '\\u2569',\r\n    '&boxHd;': '\\u2564',\r\n    '&boxHu;': '\\u2567',\r\n    '&boxUL;': '\\u255D',\r\n    '&boxUR;': '\\u255A',\r\n    '&boxUl;': '\\u255C',\r\n    '&boxUr;': '\\u2559',\r\n    '&boxV;': '\\u2551',\r\n    '&boxVH;': '\\u256C',\r\n    '&boxVL;': '\\u2563',\r\n    '&boxVR;': '\\u2560',\r\n    '&boxVh;': '\\u256B',\r\n    '&boxVl;': '\\u2562',\r\n    '&boxVr;': '\\u255F',\r\n    '&boxbox;': '\\u29C9',\r\n    '&boxdL;': '\\u2555',\r\n    '&boxdR;': '\\u2552',\r\n    '&boxdl;': '\\u2510',\r\n    '&boxdr;': '\\u250C',\r\n    '&boxh;': '\\u2500',\r\n    '&boxhD;': '\\u2565',\r\n    '&boxhU;': '\\u2568',\r\n    '&boxhd;': '\\u252C',\r\n    '&boxhu;': '\\u2534',\r\n    '&boxminus;': '\\u229F',\r\n    '&boxplus;': '\\u229E',\r\n    '&boxtimes;': '\\u22A0',\r\n    '&boxuL;': '\\u255B',\r\n    '&boxuR;': '\\u2558',\r\n    '&boxul;': '\\u2518',\r\n    '&boxur;': '\\u2514',\r\n    '&boxv;': '\\u2502',\r\n    '&boxvH;': '\\u256A',\r\n    '&boxvL;': '\\u2561',\r\n    '&boxvR;': '\\u255E',\r\n    '&boxvh;': '\\u253C',\r\n    '&boxvl;': '\\u2524',\r\n    '&boxvr;': '\\u251C',\r\n    '&bprime;': '\\u2035',\r\n    '&breve;': '\\u02D8',\r\n    '&brvbar': '\\u00A6',\r\n    '&brvbar;': '\\u00A6',\r\n    '&bscr;': '\\uD835\\uDCB7',\r\n    '&bsemi;': '\\u204F',\r\n    '&bsim;': '\\u223D',\r\n    '&bsime;': '\\u22CD',\r\n    '&bsol;': '\\u005C',\r\n    '&bsolb;': '\\u29C5',\r\n    '&bsolhsub;': '\\u27C8',\r\n    '&bull;': '\\u2022',\r\n    '&bullet;': '\\u2022',\r\n    '&bump;': '\\u224E',\r\n    '&bumpE;': '\\u2AAE',\r\n    '&bumpe;': '\\u224F',\r\n    '&bumpeq;': '\\u224F',\r\n    '&cacute;': '\\u0107',\r\n    '&cap;': '\\u2229',\r\n    '&capand;': '\\u2A44',\r\n    '&capbrcup;': '\\u2A49',\r\n    '&capcap;': '\\u2A4B',\r\n    '&capcup;': '\\u2A47',\r\n    '&capdot;': '\\u2A40',\r\n    '&caps;': '\\u2229\\uFE00',\r\n    '&caret;': '\\u2041',\r\n    '&caron;': '\\u02C7',\r\n    '&ccaps;': '\\u2A4D',\r\n    '&ccaron;': '\\u010D',\r\n    '&ccedil': '\\u00E7',\r\n    '&ccedil;': '\\u00E7',\r\n    '&ccirc;': '\\u0109',\r\n    '&ccups;': '\\u2A4C',\r\n    '&ccupssm;': '\\u2A50',\r\n    '&cdot;': '\\u010B',\r\n    '&cedil': '\\u00B8',\r\n    '&cedil;': '\\u00B8',\r\n    '&cemptyv;': '\\u29B2',\r\n    '&cent': '\\u00A2',\r\n    '&cent;': '\\u00A2',\r\n    '&centerdot;': '\\u00B7',\r\n    '&cfr;': '\\uD835\\uDD20',\r\n    '&chcy;': '\\u0447',\r\n    '&check;': '\\u2713',\r\n    '&checkmark;': '\\u2713',\r\n    '&chi;': '\\u03C7',\r\n    '&cir;': '\\u25CB',\r\n    '&cirE;': '\\u29C3',\r\n    '&circ;': '\\u02C6',\r\n    '&circeq;': '\\u2257',\r\n    '&circlearrowleft;': '\\u21BA',\r\n    '&circlearrowright;': '\\u21BB',\r\n    '&circledR;': '\\u00AE',\r\n    '&circledS;': '\\u24C8',\r\n    '&circledast;': '\\u229B',\r\n    '&circledcirc;': '\\u229A',\r\n    '&circleddash;': '\\u229D',\r\n    '&cire;': '\\u2257',\r\n    '&cirfnint;': '\\u2A10',\r\n    '&cirmid;': '\\u2AEF',\r\n    '&cirscir;': '\\u29C2',\r\n    '&clubs;': '\\u2663',\r\n    '&clubsuit;': '\\u2663',\r\n    '&colon;': '\\u003A',\r\n    '&colone;': '\\u2254',\r\n    '&coloneq;': '\\u2254',\r\n    '&comma;': '\\u002C',\r\n    '&commat;': '\\u0040',\r\n    '&comp;': '\\u2201',\r\n    '&compfn;': '\\u2218',\r\n    '&complement;': '\\u2201',\r\n    '&complexes;': '\\u2102',\r\n    '&cong;': '\\u2245',\r\n    '&congdot;': '\\u2A6D',\r\n    '&conint;': '\\u222E',\r\n    '&copf;': '\\uD835\\uDD54',\r\n    '&coprod;': '\\u2210',\r\n    '&copy': '\\u00A9',\r\n    '&copy;': '\\u00A9',\r\n    '&copysr;': '\\u2117',\r\n    '&crarr;': '\\u21B5',\r\n    '&cross;': '\\u2717',\r\n    '&cscr;': '\\uD835\\uDCB8',\r\n    '&csub;': '\\u2ACF',\r\n    '&csube;': '\\u2AD1',\r\n    '&csup;': '\\u2AD0',\r\n    '&csupe;': '\\u2AD2',\r\n    '&ctdot;': '\\u22EF',\r\n    '&cudarrl;': '\\u2938',\r\n    '&cudarrr;': '\\u2935',\r\n    '&cuepr;': '\\u22DE',\r\n    '&cuesc;': '\\u22DF',\r\n    '&cularr;': '\\u21B6',\r\n    '&cularrp;': '\\u293D',\r\n    '&cup;': '\\u222A',\r\n    '&cupbrcap;': '\\u2A48',\r\n    '&cupcap;': '\\u2A46',\r\n    '&cupcup;': '\\u2A4A',\r\n    '&cupdot;': '\\u228D',\r\n    '&cupor;': '\\u2A45',\r\n    '&cups;': '\\u222A\\uFE00',\r\n    '&curarr;': '\\u21B7',\r\n    '&curarrm;': '\\u293C',\r\n    '&curlyeqprec;': '\\u22DE',\r\n    '&curlyeqsucc;': '\\u22DF',\r\n    '&curlyvee;': '\\u22CE',\r\n    '&curlywedge;': '\\u22CF',\r\n    '&curren': '\\u00A4',\r\n    '&curren;': '\\u00A4',\r\n    '&curvearrowleft;': '\\u21B6',\r\n    '&curvearrowright;': '\\u21B7',\r\n    '&cuvee;': '\\u22CE',\r\n    '&cuwed;': '\\u22CF',\r\n    '&cwconint;': '\\u2232',\r\n    '&cwint;': '\\u2231',\r\n    '&cylcty;': '\\u232D',\r\n    '&dArr;': '\\u21D3',\r\n    '&dHar;': '\\u2965',\r\n    '&dagger;': '\\u2020',\r\n    '&daleth;': '\\u2138',\r\n    '&darr;': '\\u2193',\r\n    '&dash;': '\\u2010',\r\n    '&dashv;': '\\u22A3',\r\n    '&dbkarow;': '\\u290F',\r\n    '&dblac;': '\\u02DD',\r\n    '&dcaron;': '\\u010F',\r\n    '&dcy;': '\\u0434',\r\n    '&dd;': '\\u2146',\r\n    '&ddagger;': '\\u2021',\r\n    '&ddarr;': '\\u21CA',\r\n    '&ddotseq;': '\\u2A77',\r\n    '&deg': '\\u00B0',\r\n    '&deg;': '\\u00B0',\r\n    '&delta;': '\\u03B4',\r\n    '&demptyv;': '\\u29B1',\r\n    '&dfisht;': '\\u297F',\r\n    '&dfr;': '\\uD835\\uDD21',\r\n    '&dharl;': '\\u21C3',\r\n    '&dharr;': '\\u21C2',\r\n    '&diam;': '\\u22C4',\r\n    '&diamond;': '\\u22C4',\r\n    '&diamondsuit;': '\\u2666',\r\n    '&diams;': '\\u2666',\r\n    '&die;': '\\u00A8',\r\n    '&digamma;': '\\u03DD',\r\n    '&disin;': '\\u22F2',\r\n    '&div;': '\\u00F7',\r\n    '&divide': '\\u00F7',\r\n    '&divide;': '\\u00F7',\r\n    '&divideontimes;': '\\u22C7',\r\n    '&divonx;': '\\u22C7',\r\n    '&djcy;': '\\u0452',\r\n    '&dlcorn;': '\\u231E',\r\n    '&dlcrop;': '\\u230D',\r\n    '&dollar;': '\\u0024',\r\n    '&dopf;': '\\uD835\\uDD55',\r\n    '&dot;': '\\u02D9',\r\n    '&doteq;': '\\u2250',\r\n    '&doteqdot;': '\\u2251',\r\n    '&dotminus;': '\\u2238',\r\n    '&dotplus;': '\\u2214',\r\n    '&dotsquare;': '\\u22A1',\r\n    '&doublebarwedge;': '\\u2306',\r\n    '&downarrow;': '\\u2193',\r\n    '&downdownarrows;': '\\u21CA',\r\n    '&downharpoonleft;': '\\u21C3',\r\n    '&downharpoonright;': '\\u21C2',\r\n    '&drbkarow;': '\\u2910',\r\n    '&drcorn;': '\\u231F',\r\n    '&drcrop;': '\\u230C',\r\n    '&dscr;': '\\uD835\\uDCB9',\r\n    '&dscy;': '\\u0455',\r\n    '&dsol;': '\\u29F6',\r\n    '&dstrok;': '\\u0111',\r\n    '&dtdot;': '\\u22F1',\r\n    '&dtri;': '\\u25BF',\r\n    '&dtrif;': '\\u25BE',\r\n    '&duarr;': '\\u21F5',\r\n    '&duhar;': '\\u296F',\r\n    '&dwangle;': '\\u29A6',\r\n    '&dzcy;': '\\u045F',\r\n    '&dzigrarr;': '\\u27FF',\r\n    '&eDDot;': '\\u2A77',\r\n    '&eDot;': '\\u2251',\r\n    '&eacute': '\\u00E9',\r\n    '&eacute;': '\\u00E9',\r\n    '&easter;': '\\u2A6E',\r\n    '&ecaron;': '\\u011B',\r\n    '&ecir;': '\\u2256',\r\n    '&ecirc': '\\u00EA',\r\n    '&ecirc;': '\\u00EA',\r\n    '&ecolon;': '\\u2255',\r\n    '&ecy;': '\\u044D',\r\n    '&edot;': '\\u0117',\r\n    '&ee;': '\\u2147',\r\n    '&efDot;': '\\u2252',\r\n    '&efr;': '\\uD835\\uDD22',\r\n    '&eg;': '\\u2A9A',\r\n    '&egrave': '\\u00E8',\r\n    '&egrave;': '\\u00E8',\r\n    '&egs;': '\\u2A96',\r\n    '&egsdot;': '\\u2A98',\r\n    '&el;': '\\u2A99',\r\n    '&elinters;': '\\u23E7',\r\n    '&ell;': '\\u2113',\r\n    '&els;': '\\u2A95',\r\n    '&elsdot;': '\\u2A97',\r\n    '&emacr;': '\\u0113',\r\n    '&empty;': '\\u2205',\r\n    '&emptyset;': '\\u2205',\r\n    '&emptyv;': '\\u2205',\r\n    '&emsp13;': '\\u2004',\r\n    '&emsp14;': '\\u2005',\r\n    '&emsp;': '\\u2003',\r\n    '&eng;': '\\u014B',\r\n    '&ensp;': '\\u2002',\r\n    '&eogon;': '\\u0119',\r\n    '&eopf;': '\\uD835\\uDD56',\r\n    '&epar;': '\\u22D5',\r\n    '&eparsl;': '\\u29E3',\r\n    '&eplus;': '\\u2A71',\r\n    '&epsi;': '\\u03B5',\r\n    '&epsilon;': '\\u03B5',\r\n    '&epsiv;': '\\u03F5',\r\n    '&eqcirc;': '\\u2256',\r\n    '&eqcolon;': '\\u2255',\r\n    '&eqsim;': '\\u2242',\r\n    '&eqslantgtr;': '\\u2A96',\r\n    '&eqslantless;': '\\u2A95',\r\n    '&equals;': '\\u003D',\r\n    '&equest;': '\\u225F',\r\n    '&equiv;': '\\u2261',\r\n    '&equivDD;': '\\u2A78',\r\n    '&eqvparsl;': '\\u29E5',\r\n    '&erDot;': '\\u2253',\r\n    '&erarr;': '\\u2971',\r\n    '&escr;': '\\u212F',\r\n    '&esdot;': '\\u2250',\r\n    '&esim;': '\\u2242',\r\n    '&eta;': '\\u03B7',\r\n    '&eth': '\\u00F0',\r\n    '&eth;': '\\u00F0',\r\n    '&euml': '\\u00EB',\r\n    '&euml;': '\\u00EB',\r\n    '&euro;': '\\u20AC',\r\n    '&excl;': '\\u0021',\r\n    '&exist;': '\\u2203',\r\n    '&expectation;': '\\u2130',\r\n    '&exponentiale;': '\\u2147',\r\n    '&fallingdotseq;': '\\u2252',\r\n    '&fcy;': '\\u0444',\r\n    '&female;': '\\u2640',\r\n    '&ffilig;': '\\uFB03',\r\n    '&fflig;': '\\uFB00',\r\n    '&ffllig;': '\\uFB04',\r\n    '&ffr;': '\\uD835\\uDD23',\r\n    '&filig;': '\\uFB01',\r\n    '&fjlig;': '\\u0066\\u006A',\r\n    '&flat;': '\\u266D',\r\n    '&fllig;': '\\uFB02',\r\n    '&fltns;': '\\u25B1',\r\n    '&fnof;': '\\u0192',\r\n    '&fopf;': '\\uD835\\uDD57',\r\n    '&forall;': '\\u2200',\r\n    '&fork;': '\\u22D4',\r\n    '&forkv;': '\\u2AD9',\r\n    '&fpartint;': '\\u2A0D',\r\n    '&frac12': '\\u00BD',\r\n    '&frac12;': '\\u00BD',\r\n    '&frac13;': '\\u2153',\r\n    '&frac14': '\\u00BC',\r\n    '&frac14;': '\\u00BC',\r\n    '&frac15;': '\\u2155',\r\n    '&frac16;': '\\u2159',\r\n    '&frac18;': '\\u215B',\r\n    '&frac23;': '\\u2154',\r\n    '&frac25;': '\\u2156',\r\n    '&frac34': '\\u00BE',\r\n    '&frac34;': '\\u00BE',\r\n    '&frac35;': '\\u2157',\r\n    '&frac38;': '\\u215C',\r\n    '&frac45;': '\\u2158',\r\n    '&frac56;': '\\u215A',\r\n    '&frac58;': '\\u215D',\r\n    '&frac78;': '\\u215E',\r\n    '&frasl;': '\\u2044',\r\n    '&frown;': '\\u2322',\r\n    '&fscr;': '\\uD835\\uDCBB',\r\n    '&gE;': '\\u2267',\r\n    '&gEl;': '\\u2A8C',\r\n    '&gacute;': '\\u01F5',\r\n    '&gamma;': '\\u03B3',\r\n    '&gammad;': '\\u03DD',\r\n    '&gap;': '\\u2A86',\r\n    '&gbreve;': '\\u011F',\r\n    '&gcirc;': '\\u011D',\r\n    '&gcy;': '\\u0433',\r\n    '&gdot;': '\\u0121',\r\n    '&ge;': '\\u2265',\r\n    '&gel;': '\\u22DB',\r\n    '&geq;': '\\u2265',\r\n    '&geqq;': '\\u2267',\r\n    '&geqslant;': '\\u2A7E',\r\n    '&ges;': '\\u2A7E',\r\n    '&gescc;': '\\u2AA9',\r\n    '&gesdot;': '\\u2A80',\r\n    '&gesdoto;': '\\u2A82',\r\n    '&gesdotol;': '\\u2A84',\r\n    '&gesl;': '\\u22DB\\uFE00',\r\n    '&gesles;': '\\u2A94',\r\n    '&gfr;': '\\uD835\\uDD24',\r\n    '&gg;': '\\u226B',\r\n    '&ggg;': '\\u22D9',\r\n    '&gimel;': '\\u2137',\r\n    '&gjcy;': '\\u0453',\r\n    '&gl;': '\\u2277',\r\n    '&glE;': '\\u2A92',\r\n    '&gla;': '\\u2AA5',\r\n    '&glj;': '\\u2AA4',\r\n    '&gnE;': '\\u2269',\r\n    '&gnap;': '\\u2A8A',\r\n    '&gnapprox;': '\\u2A8A',\r\n    '&gne;': '\\u2A88',\r\n    '&gneq;': '\\u2A88',\r\n    '&gneqq;': '\\u2269',\r\n    '&gnsim;': '\\u22E7',\r\n    '&gopf;': '\\uD835\\uDD58',\r\n    '&grave;': '\\u0060',\r\n    '&gscr;': '\\u210A',\r\n    '&gsim;': '\\u2273',\r\n    '&gsime;': '\\u2A8E',\r\n    '&gsiml;': '\\u2A90',\r\n    '&gt': '\\u003E',\r\n    '&gt;': '\\u003E',\r\n    '&gtcc;': '\\u2AA7',\r\n    '&gtcir;': '\\u2A7A',\r\n    '&gtdot;': '\\u22D7',\r\n    '&gtlPar;': '\\u2995',\r\n    '&gtquest;': '\\u2A7C',\r\n    '&gtrapprox;': '\\u2A86',\r\n    '&gtrarr;': '\\u2978',\r\n    '&gtrdot;': '\\u22D7',\r\n    '&gtreqless;': '\\u22DB',\r\n    '&gtreqqless;': '\\u2A8C',\r\n    '&gtrless;': '\\u2277',\r\n    '&gtrsim;': '\\u2273',\r\n    '&gvertneqq;': '\\u2269\\uFE00',\r\n    '&gvnE;': '\\u2269\\uFE00',\r\n    '&hArr;': '\\u21D4',\r\n    '&hairsp;': '\\u200A',\r\n    '&half;': '\\u00BD',\r\n    '&hamilt;': '\\u210B',\r\n    '&hardcy;': '\\u044A',\r\n    '&harr;': '\\u2194',\r\n    '&harrcir;': '\\u2948',\r\n    '&harrw;': '\\u21AD',\r\n    '&hbar;': '\\u210F',\r\n    '&hcirc;': '\\u0125',\r\n    '&hearts;': '\\u2665',\r\n    '&heartsuit;': '\\u2665',\r\n    '&hellip;': '\\u2026',\r\n    '&hercon;': '\\u22B9',\r\n    '&hfr;': '\\uD835\\uDD25',\r\n    '&hksearow;': '\\u2925',\r\n    '&hkswarow;': '\\u2926',\r\n    '&hoarr;': '\\u21FF',\r\n    '&homtht;': '\\u223B',\r\n    '&hookleftarrow;': '\\u21A9',\r\n    '&hookrightarrow;': '\\u21AA',\r\n    '&hopf;': '\\uD835\\uDD59',\r\n    '&horbar;': '\\u2015',\r\n    '&hscr;': '\\uD835\\uDCBD',\r\n    '&hslash;': '\\u210F',\r\n    '&hstrok;': '\\u0127',\r\n    '&hybull;': '\\u2043',\r\n    '&hyphen;': '\\u2010',\r\n    '&iacute': '\\u00ED',\r\n    '&iacute;': '\\u00ED',\r\n    '&ic;': '\\u2063',\r\n    '&icirc': '\\u00EE',\r\n    '&icirc;': '\\u00EE',\r\n    '&icy;': '\\u0438',\r\n    '&iecy;': '\\u0435',\r\n    '&iexcl': '\\u00A1',\r\n    '&iexcl;': '\\u00A1',\r\n    '&iff;': '\\u21D4',\r\n    '&ifr;': '\\uD835\\uDD26',\r\n    '&igrave': '\\u00EC',\r\n    '&igrave;': '\\u00EC',\r\n    '&ii;': '\\u2148',\r\n    '&iiiint;': '\\u2A0C',\r\n    '&iiint;': '\\u222D',\r\n    '&iinfin;': '\\u29DC',\r\n    '&iiota;': '\\u2129',\r\n    '&ijlig;': '\\u0133',\r\n    '&imacr;': '\\u012B',\r\n    '&image;': '\\u2111',\r\n    '&imagline;': '\\u2110',\r\n    '&imagpart;': '\\u2111',\r\n    '&imath;': '\\u0131',\r\n    '&imof;': '\\u22B7',\r\n    '&imped;': '\\u01B5',\r\n    '&in;': '\\u2208',\r\n    '&incare;': '\\u2105',\r\n    '&infin;': '\\u221E',\r\n    '&infintie;': '\\u29DD',\r\n    '&inodot;': '\\u0131',\r\n    '&int;': '\\u222B',\r\n    '&intcal;': '\\u22BA',\r\n    '&integers;': '\\u2124',\r\n    '&intercal;': '\\u22BA',\r\n    '&intlarhk;': '\\u2A17',\r\n    '&intprod;': '\\u2A3C',\r\n    '&iocy;': '\\u0451',\r\n    '&iogon;': '\\u012F',\r\n    '&iopf;': '\\uD835\\uDD5A',\r\n    '&iota;': '\\u03B9',\r\n    '&iprod;': '\\u2A3C',\r\n    '&iquest': '\\u00BF',\r\n    '&iquest;': '\\u00BF',\r\n    '&iscr;': '\\uD835\\uDCBE',\r\n    '&isin;': '\\u2208',\r\n    '&isinE;': '\\u22F9',\r\n    '&isindot;': '\\u22F5',\r\n    '&isins;': '\\u22F4',\r\n    '&isinsv;': '\\u22F3',\r\n    '&isinv;': '\\u2208',\r\n    '&it;': '\\u2062',\r\n    '&itilde;': '\\u0129',\r\n    '&iukcy;': '\\u0456',\r\n    '&iuml': '\\u00EF',\r\n    '&iuml;': '\\u00EF',\r\n    '&jcirc;': '\\u0135',\r\n    '&jcy;': '\\u0439',\r\n    '&jfr;': '\\uD835\\uDD27',\r\n    '&jmath;': '\\u0237',\r\n    '&jopf;': '\\uD835\\uDD5B',\r\n    '&jscr;': '\\uD835\\uDCBF',\r\n    '&jsercy;': '\\u0458',\r\n    '&jukcy;': '\\u0454',\r\n    '&kappa;': '\\u03BA',\r\n    '&kappav;': '\\u03F0',\r\n    '&kcedil;': '\\u0137',\r\n    '&kcy;': '\\u043A',\r\n    '&kfr;': '\\uD835\\uDD28',\r\n    '&kgreen;': '\\u0138',\r\n    '&khcy;': '\\u0445',\r\n    '&kjcy;': '\\u045C',\r\n    '&kopf;': '\\uD835\\uDD5C',\r\n    '&kscr;': '\\uD835\\uDCC0',\r\n    '&lAarr;': '\\u21DA',\r\n    '&lArr;': '\\u21D0',\r\n    '&lAtail;': '\\u291B',\r\n    '&lBarr;': '\\u290E',\r\n    '&lE;': '\\u2266',\r\n    '&lEg;': '\\u2A8B',\r\n    '&lHar;': '\\u2962',\r\n    '&lacute;': '\\u013A',\r\n    '&laemptyv;': '\\u29B4',\r\n    '&lagran;': '\\u2112',\r\n    '&lambda;': '\\u03BB',\r\n    '&lang;': '\\u27E8',\r\n    '&langd;': '\\u2991',\r\n    '&langle;': '\\u27E8',\r\n    '&lap;': '\\u2A85',\r\n    '&laquo': '\\u00AB',\r\n    '&laquo;': '\\u00AB',\r\n    '&larr;': '\\u2190',\r\n    '&larrb;': '\\u21E4',\r\n    '&larrbfs;': '\\u291F',\r\n    '&larrfs;': '\\u291D',\r\n    '&larrhk;': '\\u21A9',\r\n    '&larrlp;': '\\u21AB',\r\n    '&larrpl;': '\\u2939',\r\n    '&larrsim;': '\\u2973',\r\n    '&larrtl;': '\\u21A2',\r\n    '&lat;': '\\u2AAB',\r\n    '&latail;': '\\u2919',\r\n    '&late;': '\\u2AAD',\r\n    '&lates;': '\\u2AAD\\uFE00',\r\n    '&lbarr;': '\\u290C',\r\n    '&lbbrk;': '\\u2772',\r\n    '&lbrace;': '\\u007B',\r\n    '&lbrack;': '\\u005B',\r\n    '&lbrke;': '\\u298B',\r\n    '&lbrksld;': '\\u298F',\r\n    '&lbrkslu;': '\\u298D',\r\n    '&lcaron;': '\\u013E',\r\n    '&lcedil;': '\\u013C',\r\n    '&lceil;': '\\u2308',\r\n    '&lcub;': '\\u007B',\r\n    '&lcy;': '\\u043B',\r\n    '&ldca;': '\\u2936',\r\n    '&ldquo;': '\\u201C',\r\n    '&ldquor;': '\\u201E',\r\n    '&ldrdhar;': '\\u2967',\r\n    '&ldrushar;': '\\u294B',\r\n    '&ldsh;': '\\u21B2',\r\n    '&le;': '\\u2264',\r\n    '&leftarrow;': '\\u2190',\r\n    '&leftarrowtail;': '\\u21A2',\r\n    '&leftharpoondown;': '\\u21BD',\r\n    '&leftharpoonup;': '\\u21BC',\r\n    '&leftleftarrows;': '\\u21C7',\r\n    '&leftrightarrow;': '\\u2194',\r\n    '&leftrightarrows;': '\\u21C6',\r\n    '&leftrightharpoons;': '\\u21CB',\r\n    '&leftrightsquigarrow;': '\\u21AD',\r\n    '&leftthreetimes;': '\\u22CB',\r\n    '&leg;': '\\u22DA',\r\n    '&leq;': '\\u2264',\r\n    '&leqq;': '\\u2266',\r\n    '&leqslant;': '\\u2A7D',\r\n    '&les;': '\\u2A7D',\r\n    '&lescc;': '\\u2AA8',\r\n    '&lesdot;': '\\u2A7F',\r\n    '&lesdoto;': '\\u2A81',\r\n    '&lesdotor;': '\\u2A83',\r\n    '&lesg;': '\\u22DA\\uFE00',\r\n    '&lesges;': '\\u2A93',\r\n    '&lessapprox;': '\\u2A85',\r\n    '&lessdot;': '\\u22D6',\r\n    '&lesseqgtr;': '\\u22DA',\r\n    '&lesseqqgtr;': '\\u2A8B',\r\n    '&lessgtr;': '\\u2276',\r\n    '&lesssim;': '\\u2272',\r\n    '&lfisht;': '\\u297C',\r\n    '&lfloor;': '\\u230A',\r\n    '&lfr;': '\\uD835\\uDD29',\r\n    '&lg;': '\\u2276',\r\n    '&lgE;': '\\u2A91',\r\n    '&lhard;': '\\u21BD',\r\n    '&lharu;': '\\u21BC',\r\n    '&lharul;': '\\u296A',\r\n    '&lhblk;': '\\u2584',\r\n    '&ljcy;': '\\u0459',\r\n    '&ll;': '\\u226A',\r\n    '&llarr;': '\\u21C7',\r\n    '&llcorner;': '\\u231E',\r\n    '&llhard;': '\\u296B',\r\n    '&lltri;': '\\u25FA',\r\n    '&lmidot;': '\\u0140',\r\n    '&lmoust;': '\\u23B0',\r\n    '&lmoustache;': '\\u23B0',\r\n    '&lnE;': '\\u2268',\r\n    '&lnap;': '\\u2A89',\r\n    '&lnapprox;': '\\u2A89',\r\n    '&lne;': '\\u2A87',\r\n    '&lneq;': '\\u2A87',\r\n    '&lneqq;': '\\u2268',\r\n    '&lnsim;': '\\u22E6',\r\n    '&loang;': '\\u27EC',\r\n    '&loarr;': '\\u21FD',\r\n    '&lobrk;': '\\u27E6',\r\n    '&longleftarrow;': '\\u27F5',\r\n    '&longleftrightarrow;': '\\u27F7',\r\n    '&longmapsto;': '\\u27FC',\r\n    '&longrightarrow;': '\\u27F6',\r\n    '&looparrowleft;': '\\u21AB',\r\n    '&looparrowright;': '\\u21AC',\r\n    '&lopar;': '\\u2985',\r\n    '&lopf;': '\\uD835\\uDD5D',\r\n    '&loplus;': '\\u2A2D',\r\n    '&lotimes;': '\\u2A34',\r\n    '&lowast;': '\\u2217',\r\n    '&lowbar;': '\\u005F',\r\n    '&loz;': '\\u25CA',\r\n    '&lozenge;': '\\u25CA',\r\n    '&lozf;': '\\u29EB',\r\n    '&lpar;': '\\u0028',\r\n    '&lparlt;': '\\u2993',\r\n    '&lrarr;': '\\u21C6',\r\n    '&lrcorner;': '\\u231F',\r\n    '&lrhar;': '\\u21CB',\r\n    '&lrhard;': '\\u296D',\r\n    '&lrm;': '\\u200E',\r\n    '&lrtri;': '\\u22BF',\r\n    '&lsaquo;': '\\u2039',\r\n    '&lscr;': '\\uD835\\uDCC1',\r\n    '&lsh;': '\\u21B0',\r\n    '&lsim;': '\\u2272',\r\n    '&lsime;': '\\u2A8D',\r\n    '&lsimg;': '\\u2A8F',\r\n    '&lsqb;': '\\u005B',\r\n    '&lsquo;': '\\u2018',\r\n    '&lsquor;': '\\u201A',\r\n    '&lstrok;': '\\u0142',\r\n    '&lt': '\\u003C',\r\n    '&lt;': '\\u003C',\r\n    '&ltcc;': '\\u2AA6',\r\n    '&ltcir;': '\\u2A79',\r\n    '&ltdot;': '\\u22D6',\r\n    '&lthree;': '\\u22CB',\r\n    '&ltimes;': '\\u22C9',\r\n    '&ltlarr;': '\\u2976',\r\n    '&ltquest;': '\\u2A7B',\r\n    '&ltrPar;': '\\u2996',\r\n    '&ltri;': '\\u25C3',\r\n    '&ltrie;': '\\u22B4',\r\n    '&ltrif;': '\\u25C2',\r\n    '&lurdshar;': '\\u294A',\r\n    '&luruhar;': '\\u2966',\r\n    '&lvertneqq;': '\\u2268\\uFE00',\r\n    '&lvnE;': '\\u2268\\uFE00',\r\n    '&mDDot;': '\\u223A',\r\n    '&macr': '\\u00AF',\r\n    '&macr;': '\\u00AF',\r\n    '&male;': '\\u2642',\r\n    '&malt;': '\\u2720',\r\n    '&maltese;': '\\u2720',\r\n    '&map;': '\\u21A6',\r\n    '&mapsto;': '\\u21A6',\r\n    '&mapstodown;': '\\u21A7',\r\n    '&mapstoleft;': '\\u21A4',\r\n    '&mapstoup;': '\\u21A5',\r\n    '&marker;': '\\u25AE',\r\n    '&mcomma;': '\\u2A29',\r\n    '&mcy;': '\\u043C',\r\n    '&mdash;': '\\u2014',\r\n    '&measuredangle;': '\\u2221',\r\n    '&mfr;': '\\uD835\\uDD2A',\r\n    '&mho;': '\\u2127',\r\n    '&micro': '\\u00B5',\r\n    '&micro;': '\\u00B5',\r\n    '&mid;': '\\u2223',\r\n    '&midast;': '\\u002A',\r\n    '&midcir;': '\\u2AF0',\r\n    '&middot': '\\u00B7',\r\n    '&middot;': '\\u00B7',\r\n    '&minus;': '\\u2212',\r\n    '&minusb;': '\\u229F',\r\n    '&minusd;': '\\u2238',\r\n    '&minusdu;': '\\u2A2A',\r\n    '&mlcp;': '\\u2ADB',\r\n    '&mldr;': '\\u2026',\r\n    '&mnplus;': '\\u2213',\r\n    '&models;': '\\u22A7',\r\n    '&mopf;': '\\uD835\\uDD5E',\r\n    '&mp;': '\\u2213',\r\n    '&mscr;': '\\uD835\\uDCC2',\r\n    '&mstpos;': '\\u223E',\r\n    '&mu;': '\\u03BC',\r\n    '&multimap;': '\\u22B8',\r\n    '&mumap;': '\\u22B8',\r\n    '&nGg;': '\\u22D9\\u0338',\r\n    '&nGt;': '\\u226B\\u20D2',\r\n    '&nGtv;': '\\u226B\\u0338',\r\n    '&nLeftarrow;': '\\u21CD',\r\n    '&nLeftrightarrow;': '\\u21CE',\r\n    '&nLl;': '\\u22D8\\u0338',\r\n    '&nLt;': '\\u226A\\u20D2',\r\n    '&nLtv;': '\\u226A\\u0338',\r\n    '&nRightarrow;': '\\u21CF',\r\n    '&nVDash;': '\\u22AF',\r\n    '&nVdash;': '\\u22AE',\r\n    '&nabla;': '\\u2207',\r\n    '&nacute;': '\\u0144',\r\n    '&nang;': '\\u2220\\u20D2',\r\n    '&nap;': '\\u2249',\r\n    '&napE;': '\\u2A70\\u0338',\r\n    '&napid;': '\\u224B\\u0338',\r\n    '&napos;': '\\u0149',\r\n    '&napprox;': '\\u2249',\r\n    '&natur;': '\\u266E',\r\n    '&natural;': '\\u266E',\r\n    '&naturals;': '\\u2115',\r\n    '&nbsp': '\\u00A0',\r\n    '&nbsp;': '\\u00A0',\r\n    '&nbump;': '\\u224E\\u0338',\r\n    '&nbumpe;': '\\u224F\\u0338',\r\n    '&ncap;': '\\u2A43',\r\n    '&ncaron;': '\\u0148',\r\n    '&ncedil;': '\\u0146',\r\n    '&ncong;': '\\u2247',\r\n    '&ncongdot;': '\\u2A6D\\u0338',\r\n    '&ncup;': '\\u2A42',\r\n    '&ncy;': '\\u043D',\r\n    '&ndash;': '\\u2013',\r\n    '&ne;': '\\u2260',\r\n    '&neArr;': '\\u21D7',\r\n    '&nearhk;': '\\u2924',\r\n    '&nearr;': '\\u2197',\r\n    '&nearrow;': '\\u2197',\r\n    '&nedot;': '\\u2250\\u0338',\r\n    '&nequiv;': '\\u2262',\r\n    '&nesear;': '\\u2928',\r\n    '&nesim;': '\\u2242\\u0338',\r\n    '&nexist;': '\\u2204',\r\n    '&nexists;': '\\u2204',\r\n    '&nfr;': '\\uD835\\uDD2B',\r\n    '&ngE;': '\\u2267\\u0338',\r\n    '&nge;': '\\u2271',\r\n    '&ngeq;': '\\u2271',\r\n    '&ngeqq;': '\\u2267\\u0338',\r\n    '&ngeqslant;': '\\u2A7E\\u0338',\r\n    '&nges;': '\\u2A7E\\u0338',\r\n    '&ngsim;': '\\u2275',\r\n    '&ngt;': '\\u226F',\r\n    '&ngtr;': '\\u226F',\r\n    '&nhArr;': '\\u21CE',\r\n    '&nharr;': '\\u21AE',\r\n    '&nhpar;': '\\u2AF2',\r\n    '&ni;': '\\u220B',\r\n    '&nis;': '\\u22FC',\r\n    '&nisd;': '\\u22FA',\r\n    '&niv;': '\\u220B',\r\n    '&njcy;': '\\u045A',\r\n    '&nlArr;': '\\u21CD',\r\n    '&nlE;': '\\u2266\\u0338',\r\n    '&nlarr;': '\\u219A',\r\n    '&nldr;': '\\u2025',\r\n    '&nle;': '\\u2270',\r\n    '&nleftarrow;': '\\u219A',\r\n    '&nleftrightarrow;': '\\u21AE',\r\n    '&nleq;': '\\u2270',\r\n    '&nleqq;': '\\u2266\\u0338',\r\n    '&nleqslant;': '\\u2A7D\\u0338',\r\n    '&nles;': '\\u2A7D\\u0338',\r\n    '&nless;': '\\u226E',\r\n    '&nlsim;': '\\u2274',\r\n    '&nlt;': '\\u226E',\r\n    '&nltri;': '\\u22EA',\r\n    '&nltrie;': '\\u22EC',\r\n    '&nmid;': '\\u2224',\r\n    '&nopf;': '\\uD835\\uDD5F',\r\n    '&not': '\\u00AC',\r\n    '&not;': '\\u00AC',\r\n    '&notin;': '\\u2209',\r\n    '&notinE;': '\\u22F9\\u0338',\r\n    '&notindot;': '\\u22F5\\u0338',\r\n    '&notinva;': '\\u2209',\r\n    '&notinvb;': '\\u22F7',\r\n    '&notinvc;': '\\u22F6',\r\n    '&notni;': '\\u220C',\r\n    '&notniva;': '\\u220C',\r\n    '&notnivb;': '\\u22FE',\r\n    '&notnivc;': '\\u22FD',\r\n    '&npar;': '\\u2226',\r\n    '&nparallel;': '\\u2226',\r\n    '&nparsl;': '\\u2AFD\\u20E5',\r\n    '&npart;': '\\u2202\\u0338',\r\n    '&npolint;': '\\u2A14',\r\n    '&npr;': '\\u2280',\r\n    '&nprcue;': '\\u22E0',\r\n    '&npre;': '\\u2AAF\\u0338',\r\n    '&nprec;': '\\u2280',\r\n    '&npreceq;': '\\u2AAF\\u0338',\r\n    '&nrArr;': '\\u21CF',\r\n    '&nrarr;': '\\u219B',\r\n    '&nrarrc;': '\\u2933\\u0338',\r\n    '&nrarrw;': '\\u219D\\u0338',\r\n    '&nrightarrow;': '\\u219B',\r\n    '&nrtri;': '\\u22EB',\r\n    '&nrtrie;': '\\u22ED',\r\n    '&nsc;': '\\u2281',\r\n    '&nsccue;': '\\u22E1',\r\n    '&nsce;': '\\u2AB0\\u0338',\r\n    '&nscr;': '\\uD835\\uDCC3',\r\n    '&nshortmid;': '\\u2224',\r\n    '&nshortparallel;': '\\u2226',\r\n    '&nsim;': '\\u2241',\r\n    '&nsime;': '\\u2244',\r\n    '&nsimeq;': '\\u2244',\r\n    '&nsmid;': '\\u2224',\r\n    '&nspar;': '\\u2226',\r\n    '&nsqsube;': '\\u22E2',\r\n    '&nsqsupe;': '\\u22E3',\r\n    '&nsub;': '\\u2284',\r\n    '&nsubE;': '\\u2AC5\\u0338',\r\n    '&nsube;': '\\u2288',\r\n    '&nsubset;': '\\u2282\\u20D2',\r\n    '&nsubseteq;': '\\u2288',\r\n    '&nsubseteqq;': '\\u2AC5\\u0338',\r\n    '&nsucc;': '\\u2281',\r\n    '&nsucceq;': '\\u2AB0\\u0338',\r\n    '&nsup;': '\\u2285',\r\n    '&nsupE;': '\\u2AC6\\u0338',\r\n    '&nsupe;': '\\u2289',\r\n    '&nsupset;': '\\u2283\\u20D2',\r\n    '&nsupseteq;': '\\u2289',\r\n    '&nsupseteqq;': '\\u2AC6\\u0338',\r\n    '&ntgl;': '\\u2279',\r\n    '&ntilde': '\\u00F1',\r\n    '&ntilde;': '\\u00F1',\r\n    '&ntlg;': '\\u2278',\r\n    '&ntriangleleft;': '\\u22EA',\r\n    '&ntrianglelefteq;': '\\u22EC',\r\n    '&ntriangleright;': '\\u22EB',\r\n    '&ntrianglerighteq;': '\\u22ED',\r\n    '&nu;': '\\u03BD',\r\n    '&num;': '\\u0023',\r\n    '&numero;': '\\u2116',\r\n    '&numsp;': '\\u2007',\r\n    '&nvDash;': '\\u22AD',\r\n    '&nvHarr;': '\\u2904',\r\n    '&nvap;': '\\u224D\\u20D2',\r\n    '&nvdash;': '\\u22AC',\r\n    '&nvge;': '\\u2265\\u20D2',\r\n    '&nvgt;': '\\u003E\\u20D2',\r\n    '&nvinfin;': '\\u29DE',\r\n    '&nvlArr;': '\\u2902',\r\n    '&nvle;': '\\u2264\\u20D2',\r\n    '&nvlt;': '\\u003C\\u20D2',\r\n    '&nvltrie;': '\\u22B4\\u20D2',\r\n    '&nvrArr;': '\\u2903',\r\n    '&nvrtrie;': '\\u22B5\\u20D2',\r\n    '&nvsim;': '\\u223C\\u20D2',\r\n    '&nwArr;': '\\u21D6',\r\n    '&nwarhk;': '\\u2923',\r\n    '&nwarr;': '\\u2196',\r\n    '&nwarrow;': '\\u2196',\r\n    '&nwnear;': '\\u2927',\r\n    '&oS;': '\\u24C8',\r\n    '&oacute': '\\u00F3',\r\n    '&oacute;': '\\u00F3',\r\n    '&oast;': '\\u229B',\r\n    '&ocir;': '\\u229A',\r\n    '&ocirc': '\\u00F4',\r\n    '&ocirc;': '\\u00F4',\r\n    '&ocy;': '\\u043E',\r\n    '&odash;': '\\u229D',\r\n    '&odblac;': '\\u0151',\r\n    '&odiv;': '\\u2A38',\r\n    '&odot;': '\\u2299',\r\n    '&odsold;': '\\u29BC',\r\n    '&oelig;': '\\u0153',\r\n    '&ofcir;': '\\u29BF',\r\n    '&ofr;': '\\uD835\\uDD2C',\r\n    '&ogon;': '\\u02DB',\r\n    '&ograve': '\\u00F2',\r\n    '&ograve;': '\\u00F2',\r\n    '&ogt;': '\\u29C1',\r\n    '&ohbar;': '\\u29B5',\r\n    '&ohm;': '\\u03A9',\r\n    '&oint;': '\\u222E',\r\n    '&olarr;': '\\u21BA',\r\n    '&olcir;': '\\u29BE',\r\n    '&olcross;': '\\u29BB',\r\n    '&oline;': '\\u203E',\r\n    '&olt;': '\\u29C0',\r\n    '&omacr;': '\\u014D',\r\n    '&omega;': '\\u03C9',\r\n    '&omicron;': '\\u03BF',\r\n    '&omid;': '\\u29B6',\r\n    '&ominus;': '\\u2296',\r\n    '&oopf;': '\\uD835\\uDD60',\r\n    '&opar;': '\\u29B7',\r\n    '&operp;': '\\u29B9',\r\n    '&oplus;': '\\u2295',\r\n    '&or;': '\\u2228',\r\n    '&orarr;': '\\u21BB',\r\n    '&ord;': '\\u2A5D',\r\n    '&order;': '\\u2134',\r\n    '&orderof;': '\\u2134',\r\n    '&ordf': '\\u00AA',\r\n    '&ordf;': '\\u00AA',\r\n    '&ordm': '\\u00BA',\r\n    '&ordm;': '\\u00BA',\r\n    '&origof;': '\\u22B6',\r\n    '&oror;': '\\u2A56',\r\n    '&orslope;': '\\u2A57',\r\n    '&orv;': '\\u2A5B',\r\n    '&oscr;': '\\u2134',\r\n    '&oslash': '\\u00F8',\r\n    '&oslash;': '\\u00F8',\r\n    '&osol;': '\\u2298',\r\n    '&otilde': '\\u00F5',\r\n    '&otilde;': '\\u00F5',\r\n    '&otimes;': '\\u2297',\r\n    '&otimesas;': '\\u2A36',\r\n    '&ouml': '\\u00F6',\r\n    '&ouml;': '\\u00F6',\r\n    '&ovbar;': '\\u233D',\r\n    '&par;': '\\u2225',\r\n    '&para': '\\u00B6',\r\n    '&para;': '\\u00B6',\r\n    '&parallel;': '\\u2225',\r\n    '&parsim;': '\\u2AF3',\r\n    '&parsl;': '\\u2AFD',\r\n    '&part;': '\\u2202',\r\n    '&pcy;': '\\u043F',\r\n    '&percnt;': '\\u0025',\r\n    '&period;': '\\u002E',\r\n    '&permil;': '\\u2030',\r\n    '&perp;': '\\u22A5',\r\n    '&pertenk;': '\\u2031',\r\n    '&pfr;': '\\uD835\\uDD2D',\r\n    '&phi;': '\\u03C6',\r\n    '&phiv;': '\\u03D5',\r\n    '&phmmat;': '\\u2133',\r\n    '&phone;': '\\u260E',\r\n    '&pi;': '\\u03C0',\r\n    '&pitchfork;': '\\u22D4',\r\n    '&piv;': '\\u03D6',\r\n    '&planck;': '\\u210F',\r\n    '&planckh;': '\\u210E',\r\n    '&plankv;': '\\u210F',\r\n    '&plus;': '\\u002B',\r\n    '&plusacir;': '\\u2A23',\r\n    '&plusb;': '\\u229E',\r\n    '&pluscir;': '\\u2A22',\r\n    '&plusdo;': '\\u2214',\r\n    '&plusdu;': '\\u2A25',\r\n    '&pluse;': '\\u2A72',\r\n    '&plusmn': '\\u00B1',\r\n    '&plusmn;': '\\u00B1',\r\n    '&plussim;': '\\u2A26',\r\n    '&plustwo;': '\\u2A27',\r\n    '&pm;': '\\u00B1',\r\n    '&pointint;': '\\u2A15',\r\n    '&popf;': '\\uD835\\uDD61',\r\n    '&pound': '\\u00A3',\r\n    '&pound;': '\\u00A3',\r\n    '&pr;': '\\u227A',\r\n    '&prE;': '\\u2AB3',\r\n    '&prap;': '\\u2AB7',\r\n    '&prcue;': '\\u227C',\r\n    '&pre;': '\\u2AAF',\r\n    '&prec;': '\\u227A',\r\n    '&precapprox;': '\\u2AB7',\r\n    '&preccurlyeq;': '\\u227C',\r\n    '&preceq;': '\\u2AAF',\r\n    '&precnapprox;': '\\u2AB9',\r\n    '&precneqq;': '\\u2AB5',\r\n    '&precnsim;': '\\u22E8',\r\n    '&precsim;': '\\u227E',\r\n    '&prime;': '\\u2032',\r\n    '&primes;': '\\u2119',\r\n    '&prnE;': '\\u2AB5',\r\n    '&prnap;': '\\u2AB9',\r\n    '&prnsim;': '\\u22E8',\r\n    '&prod;': '\\u220F',\r\n    '&profalar;': '\\u232E',\r\n    '&profline;': '\\u2312',\r\n    '&profsurf;': '\\u2313',\r\n    '&prop;': '\\u221D',\r\n    '&propto;': '\\u221D',\r\n    '&prsim;': '\\u227E',\r\n    '&prurel;': '\\u22B0',\r\n    '&pscr;': '\\uD835\\uDCC5',\r\n    '&psi;': '\\u03C8',\r\n    '&puncsp;': '\\u2008',\r\n    '&qfr;': '\\uD835\\uDD2E',\r\n    '&qint;': '\\u2A0C',\r\n    '&qopf;': '\\uD835\\uDD62',\r\n    '&qprime;': '\\u2057',\r\n    '&qscr;': '\\uD835\\uDCC6',\r\n    '&quaternions;': '\\u210D',\r\n    '&quatint;': '\\u2A16',\r\n    '&quest;': '\\u003F',\r\n    '&questeq;': '\\u225F',\r\n    '&quot': '\\u0022',\r\n    '&quot;': '\\u0022',\r\n    '&rAarr;': '\\u21DB',\r\n    '&rArr;': '\\u21D2',\r\n    '&rAtail;': '\\u291C',\r\n    '&rBarr;': '\\u290F',\r\n    '&rHar;': '\\u2964',\r\n    '&race;': '\\u223D\\u0331',\r\n    '&racute;': '\\u0155',\r\n    '&radic;': '\\u221A',\r\n    '&raemptyv;': '\\u29B3',\r\n    '&rang;': '\\u27E9',\r\n    '&rangd;': '\\u2992',\r\n    '&range;': '\\u29A5',\r\n    '&rangle;': '\\u27E9',\r\n    '&raquo': '\\u00BB',\r\n    '&raquo;': '\\u00BB',\r\n    '&rarr;': '\\u2192',\r\n    '&rarrap;': '\\u2975',\r\n    '&rarrb;': '\\u21E5',\r\n    '&rarrbfs;': '\\u2920',\r\n    '&rarrc;': '\\u2933',\r\n    '&rarrfs;': '\\u291E',\r\n    '&rarrhk;': '\\u21AA',\r\n    '&rarrlp;': '\\u21AC',\r\n    '&rarrpl;': '\\u2945',\r\n    '&rarrsim;': '\\u2974',\r\n    '&rarrtl;': '\\u21A3',\r\n    '&rarrw;': '\\u219D',\r\n    '&ratail;': '\\u291A',\r\n    '&ratio;': '\\u2236',\r\n    '&rationals;': '\\u211A',\r\n    '&rbarr;': '\\u290D',\r\n    '&rbbrk;': '\\u2773',\r\n    '&rbrace;': '\\u007D',\r\n    '&rbrack;': '\\u005D',\r\n    '&rbrke;': '\\u298C',\r\n    '&rbrksld;': '\\u298E',\r\n    '&rbrkslu;': '\\u2990',\r\n    '&rcaron;': '\\u0159',\r\n    '&rcedil;': '\\u0157',\r\n    '&rceil;': '\\u2309',\r\n    '&rcub;': '\\u007D',\r\n    '&rcy;': '\\u0440',\r\n    '&rdca;': '\\u2937',\r\n    '&rdldhar;': '\\u2969',\r\n    '&rdquo;': '\\u201D',\r\n    '&rdquor;': '\\u201D',\r\n    '&rdsh;': '\\u21B3',\r\n    '&real;': '\\u211C',\r\n    '&realine;': '\\u211B',\r\n    '&realpart;': '\\u211C',\r\n    '&reals;': '\\u211D',\r\n    '&rect;': '\\u25AD',\r\n    '&reg': '\\u00AE',\r\n    '&reg;': '\\u00AE',\r\n    '&rfisht;': '\\u297D',\r\n    '&rfloor;': '\\u230B',\r\n    '&rfr;': '\\uD835\\uDD2F',\r\n    '&rhard;': '\\u21C1',\r\n    '&rharu;': '\\u21C0',\r\n    '&rharul;': '\\u296C',\r\n    '&rho;': '\\u03C1',\r\n    '&rhov;': '\\u03F1',\r\n    '&rightarrow;': '\\u2192',\r\n    '&rightarrowtail;': '\\u21A3',\r\n    '&rightharpoondown;': '\\u21C1',\r\n    '&rightharpoonup;': '\\u21C0',\r\n    '&rightleftarrows;': '\\u21C4',\r\n    '&rightleftharpoons;': '\\u21CC',\r\n    '&rightrightarrows;': '\\u21C9',\r\n    '&rightsquigarrow;': '\\u219D',\r\n    '&rightthreetimes;': '\\u22CC',\r\n    '&ring;': '\\u02DA',\r\n    '&risingdotseq;': '\\u2253',\r\n    '&rlarr;': '\\u21C4',\r\n    '&rlhar;': '\\u21CC',\r\n    '&rlm;': '\\u200F',\r\n    '&rmoust;': '\\u23B1',\r\n    '&rmoustache;': '\\u23B1',\r\n    '&rnmid;': '\\u2AEE',\r\n    '&roang;': '\\u27ED',\r\n    '&roarr;': '\\u21FE',\r\n    '&robrk;': '\\u27E7',\r\n    '&ropar;': '\\u2986',\r\n    '&ropf;': '\\uD835\\uDD63',\r\n    '&roplus;': '\\u2A2E',\r\n    '&rotimes;': '\\u2A35',\r\n    '&rpar;': '\\u0029',\r\n    '&rpargt;': '\\u2994',\r\n    '&rppolint;': '\\u2A12',\r\n    '&rrarr;': '\\u21C9',\r\n    '&rsaquo;': '\\u203A',\r\n    '&rscr;': '\\uD835\\uDCC7',\r\n    '&rsh;': '\\u21B1',\r\n    '&rsqb;': '\\u005D',\r\n    '&rsquo;': '\\u2019',\r\n    '&rsquor;': '\\u2019',\r\n    '&rthree;': '\\u22CC',\r\n    '&rtimes;': '\\u22CA',\r\n    '&rtri;': '\\u25B9',\r\n    '&rtrie;': '\\u22B5',\r\n    '&rtrif;': '\\u25B8',\r\n    '&rtriltri;': '\\u29CE',\r\n    '&ruluhar;': '\\u2968',\r\n    '&rx;': '\\u211E',\r\n    '&sacute;': '\\u015B',\r\n    '&sbquo;': '\\u201A',\r\n    '&sc;': '\\u227B',\r\n    '&scE;': '\\u2AB4',\r\n    '&scap;': '\\u2AB8',\r\n    '&scaron;': '\\u0161',\r\n    '&sccue;': '\\u227D',\r\n    '&sce;': '\\u2AB0',\r\n    '&scedil;': '\\u015F',\r\n    '&scirc;': '\\u015D',\r\n    '&scnE;': '\\u2AB6',\r\n    '&scnap;': '\\u2ABA',\r\n    '&scnsim;': '\\u22E9',\r\n    '&scpolint;': '\\u2A13',\r\n    '&scsim;': '\\u227F',\r\n    '&scy;': '\\u0441',\r\n    '&sdot;': '\\u22C5',\r\n    '&sdotb;': '\\u22A1',\r\n    '&sdote;': '\\u2A66',\r\n    '&seArr;': '\\u21D8',\r\n    '&searhk;': '\\u2925',\r\n    '&searr;': '\\u2198',\r\n    '&searrow;': '\\u2198',\r\n    '&sect': '\\u00A7',\r\n    '&sect;': '\\u00A7',\r\n    '&semi;': '\\u003B',\r\n    '&seswar;': '\\u2929',\r\n    '&setminus;': '\\u2216',\r\n    '&setmn;': '\\u2216',\r\n    '&sext;': '\\u2736',\r\n    '&sfr;': '\\uD835\\uDD30',\r\n    '&sfrown;': '\\u2322',\r\n    '&sharp;': '\\u266F',\r\n    '&shchcy;': '\\u0449',\r\n    '&shcy;': '\\u0448',\r\n    '&shortmid;': '\\u2223',\r\n    '&shortparallel;': '\\u2225',\r\n    '&shy': '\\u00AD',\r\n    '&shy;': '\\u00AD',\r\n    '&sigma;': '\\u03C3',\r\n    '&sigmaf;': '\\u03C2',\r\n    '&sigmav;': '\\u03C2',\r\n    '&sim;': '\\u223C',\r\n    '&simdot;': '\\u2A6A',\r\n    '&sime;': '\\u2243',\r\n    '&simeq;': '\\u2243',\r\n    '&simg;': '\\u2A9E',\r\n    '&simgE;': '\\u2AA0',\r\n    '&siml;': '\\u2A9D',\r\n    '&simlE;': '\\u2A9F',\r\n    '&simne;': '\\u2246',\r\n    '&simplus;': '\\u2A24',\r\n    '&simrarr;': '\\u2972',\r\n    '&slarr;': '\\u2190',\r\n    '&smallsetminus;': '\\u2216',\r\n    '&smashp;': '\\u2A33',\r\n    '&smeparsl;': '\\u29E4',\r\n    '&smid;': '\\u2223',\r\n    '&smile;': '\\u2323',\r\n    '&smt;': '\\u2AAA',\r\n    '&smte;': '\\u2AAC',\r\n    '&smtes;': '\\u2AAC\\uFE00',\r\n    '&softcy;': '\\u044C',\r\n    '&sol;': '\\u002F',\r\n    '&solb;': '\\u29C4',\r\n    '&solbar;': '\\u233F',\r\n    '&sopf;': '\\uD835\\uDD64',\r\n    '&spades;': '\\u2660',\r\n    '&spadesuit;': '\\u2660',\r\n    '&spar;': '\\u2225',\r\n    '&sqcap;': '\\u2293',\r\n    '&sqcaps;': '\\u2293\\uFE00',\r\n    '&sqcup;': '\\u2294',\r\n    '&sqcups;': '\\u2294\\uFE00',\r\n    '&sqsub;': '\\u228F',\r\n    '&sqsube;': '\\u2291',\r\n    '&sqsubset;': '\\u228F',\r\n    '&sqsubseteq;': '\\u2291',\r\n    '&sqsup;': '\\u2290',\r\n    '&sqsupe;': '\\u2292',\r\n    '&sqsupset;': '\\u2290',\r\n    '&sqsupseteq;': '\\u2292',\r\n    '&squ;': '\\u25A1',\r\n    '&square;': '\\u25A1',\r\n    '&squarf;': '\\u25AA',\r\n    '&squf;': '\\u25AA',\r\n    '&srarr;': '\\u2192',\r\n    '&sscr;': '\\uD835\\uDCC8',\r\n    '&ssetmn;': '\\u2216',\r\n    '&ssmile;': '\\u2323',\r\n    '&sstarf;': '\\u22C6',\r\n    '&star;': '\\u2606',\r\n    '&starf;': '\\u2605',\r\n    '&straightepsilon;': '\\u03F5',\r\n    '&straightphi;': '\\u03D5',\r\n    '&strns;': '\\u00AF',\r\n    '&sub;': '\\u2282',\r\n    '&subE;': '\\u2AC5',\r\n    '&subdot;': '\\u2ABD',\r\n    '&sube;': '\\u2286',\r\n    '&subedot;': '\\u2AC3',\r\n    '&submult;': '\\u2AC1',\r\n    '&subnE;': '\\u2ACB',\r\n    '&subne;': '\\u228A',\r\n    '&subplus;': '\\u2ABF',\r\n    '&subrarr;': '\\u2979',\r\n    '&subset;': '\\u2282',\r\n    '&subseteq;': '\\u2286',\r\n    '&subseteqq;': '\\u2AC5',\r\n    '&subsetneq;': '\\u228A',\r\n    '&subsetneqq;': '\\u2ACB',\r\n    '&subsim;': '\\u2AC7',\r\n    '&subsub;': '\\u2AD5',\r\n    '&subsup;': '\\u2AD3',\r\n    '&succ;': '\\u227B',\r\n    '&succapprox;': '\\u2AB8',\r\n    '&succcurlyeq;': '\\u227D',\r\n    '&succeq;': '\\u2AB0',\r\n    '&succnapprox;': '\\u2ABA',\r\n    '&succneqq;': '\\u2AB6',\r\n    '&succnsim;': '\\u22E9',\r\n    '&succsim;': '\\u227F',\r\n    '&sum;': '\\u2211',\r\n    '&sung;': '\\u266A',\r\n    '&sup1': '\\u00B9',\r\n    '&sup1;': '\\u00B9',\r\n    '&sup2': '\\u00B2',\r\n    '&sup2;': '\\u00B2',\r\n    '&sup3': '\\u00B3',\r\n    '&sup3;': '\\u00B3',\r\n    '&sup;': '\\u2283',\r\n    '&supE;': '\\u2AC6',\r\n    '&supdot;': '\\u2ABE',\r\n    '&supdsub;': '\\u2AD8',\r\n    '&supe;': '\\u2287',\r\n    '&supedot;': '\\u2AC4',\r\n    '&suphsol;': '\\u27C9',\r\n    '&suphsub;': '\\u2AD7',\r\n    '&suplarr;': '\\u297B',\r\n    '&supmult;': '\\u2AC2',\r\n    '&supnE;': '\\u2ACC',\r\n    '&supne;': '\\u228B',\r\n    '&supplus;': '\\u2AC0',\r\n    '&supset;': '\\u2283',\r\n    '&supseteq;': '\\u2287',\r\n    '&supseteqq;': '\\u2AC6',\r\n    '&supsetneq;': '\\u228B',\r\n    '&supsetneqq;': '\\u2ACC',\r\n    '&supsim;': '\\u2AC8',\r\n    '&supsub;': '\\u2AD4',\r\n    '&supsup;': '\\u2AD6',\r\n    '&swArr;': '\\u21D9',\r\n    '&swarhk;': '\\u2926',\r\n    '&swarr;': '\\u2199',\r\n    '&swarrow;': '\\u2199',\r\n    '&swnwar;': '\\u292A',\r\n    '&szlig': '\\u00DF',\r\n    '&szlig;': '\\u00DF',\r\n    '&target;': '\\u2316',\r\n    '&tau;': '\\u03C4',\r\n    '&tbrk;': '\\u23B4',\r\n    '&tcaron;': '\\u0165',\r\n    '&tcedil;': '\\u0163',\r\n    '&tcy;': '\\u0442',\r\n    '&tdot;': '\\u20DB',\r\n    '&telrec;': '\\u2315',\r\n    '&tfr;': '\\uD835\\uDD31',\r\n    '&there4;': '\\u2234',\r\n    '&therefore;': '\\u2234',\r\n    '&theta;': '\\u03B8',\r\n    '&thetasym;': '\\u03D1',\r\n    '&thetav;': '\\u03D1',\r\n    '&thickapprox;': '\\u2248',\r\n    '&thicksim;': '\\u223C',\r\n    '&thinsp;': '\\u2009',\r\n    '&thkap;': '\\u2248',\r\n    '&thksim;': '\\u223C',\r\n    '&thorn': '\\u00FE',\r\n    '&thorn;': '\\u00FE',\r\n    '&tilde;': '\\u02DC',\r\n    '&times': '\\u00D7',\r\n    '&times;': '\\u00D7',\r\n    '&timesb;': '\\u22A0',\r\n    '&timesbar;': '\\u2A31',\r\n    '&timesd;': '\\u2A30',\r\n    '&tint;': '\\u222D',\r\n    '&toea;': '\\u2928',\r\n    '&top;': '\\u22A4',\r\n    '&topbot;': '\\u2336',\r\n    '&topcir;': '\\u2AF1',\r\n    '&topf;': '\\uD835\\uDD65',\r\n    '&topfork;': '\\u2ADA',\r\n    '&tosa;': '\\u2929',\r\n    '&tprime;': '\\u2034',\r\n    '&trade;': '\\u2122',\r\n    '&triangle;': '\\u25B5',\r\n    '&triangledown;': '\\u25BF',\r\n    '&triangleleft;': '\\u25C3',\r\n    '&trianglelefteq;': '\\u22B4',\r\n    '&triangleq;': '\\u225C',\r\n    '&triangleright;': '\\u25B9',\r\n    '&trianglerighteq;': '\\u22B5',\r\n    '&tridot;': '\\u25EC',\r\n    '&trie;': '\\u225C',\r\n    '&triminus;': '\\u2A3A',\r\n    '&triplus;': '\\u2A39',\r\n    '&trisb;': '\\u29CD',\r\n    '&tritime;': '\\u2A3B',\r\n    '&trpezium;': '\\u23E2',\r\n    '&tscr;': '\\uD835\\uDCC9',\r\n    '&tscy;': '\\u0446',\r\n    '&tshcy;': '\\u045B',\r\n    '&tstrok;': '\\u0167',\r\n    '&twixt;': '\\u226C',\r\n    '&twoheadleftarrow;': '\\u219E',\r\n    '&twoheadrightarrow;': '\\u21A0',\r\n    '&uArr;': '\\u21D1',\r\n    '&uHar;': '\\u2963',\r\n    '&uacute': '\\u00FA',\r\n    '&uacute;': '\\u00FA',\r\n    '&uarr;': '\\u2191',\r\n    '&ubrcy;': '\\u045E',\r\n    '&ubreve;': '\\u016D',\r\n    '&ucirc': '\\u00FB',\r\n    '&ucirc;': '\\u00FB',\r\n    '&ucy;': '\\u0443',\r\n    '&udarr;': '\\u21C5',\r\n    '&udblac;': '\\u0171',\r\n    '&udhar;': '\\u296E',\r\n    '&ufisht;': '\\u297E',\r\n    '&ufr;': '\\uD835\\uDD32',\r\n    '&ugrave': '\\u00F9',\r\n    '&ugrave;': '\\u00F9',\r\n    '&uharl;': '\\u21BF',\r\n    '&uharr;': '\\u21BE',\r\n    '&uhblk;': '\\u2580',\r\n    '&ulcorn;': '\\u231C',\r\n    '&ulcorner;': '\\u231C',\r\n    '&ulcrop;': '\\u230F',\r\n    '&ultri;': '\\u25F8',\r\n    '&umacr;': '\\u016B',\r\n    '&uml': '\\u00A8',\r\n    '&uml;': '\\u00A8',\r\n    '&uogon;': '\\u0173',\r\n    '&uopf;': '\\uD835\\uDD66',\r\n    '&uparrow;': '\\u2191',\r\n    '&updownarrow;': '\\u2195',\r\n    '&upharpoonleft;': '\\u21BF',\r\n    '&upharpoonright;': '\\u21BE',\r\n    '&uplus;': '\\u228E',\r\n    '&upsi;': '\\u03C5',\r\n    '&upsih;': '\\u03D2',\r\n    '&upsilon;': '\\u03C5',\r\n    '&upuparrows;': '\\u21C8',\r\n    '&urcorn;': '\\u231D',\r\n    '&urcorner;': '\\u231D',\r\n    '&urcrop;': '\\u230E',\r\n    '&uring;': '\\u016F',\r\n    '&urtri;': '\\u25F9',\r\n    '&uscr;': '\\uD835\\uDCCA',\r\n    '&utdot;': '\\u22F0',\r\n    '&utilde;': '\\u0169',\r\n    '&utri;': '\\u25B5',\r\n    '&utrif;': '\\u25B4',\r\n    '&uuarr;': '\\u21C8',\r\n    '&uuml': '\\u00FC',\r\n    '&uuml;': '\\u00FC',\r\n    '&uwangle;': '\\u29A7',\r\n    '&vArr;': '\\u21D5',\r\n    '&vBar;': '\\u2AE8',\r\n    '&vBarv;': '\\u2AE9',\r\n    '&vDash;': '\\u22A8',\r\n    '&vangrt;': '\\u299C',\r\n    '&varepsilon;': '\\u03F5',\r\n    '&varkappa;': '\\u03F0',\r\n    '&varnothing;': '\\u2205',\r\n    '&varphi;': '\\u03D5',\r\n    '&varpi;': '\\u03D6',\r\n    '&varpropto;': '\\u221D',\r\n    '&varr;': '\\u2195',\r\n    '&varrho;': '\\u03F1',\r\n    '&varsigma;': '\\u03C2',\r\n    '&varsubsetneq;': '\\u228A\\uFE00',\r\n    '&varsubsetneqq;': '\\u2ACB\\uFE00',\r\n    '&varsupsetneq;': '\\u228B\\uFE00',\r\n    '&varsupsetneqq;': '\\u2ACC\\uFE00',\r\n    '&vartheta;': '\\u03D1',\r\n    '&vartriangleleft;': '\\u22B2',\r\n    '&vartriangleright;': '\\u22B3',\r\n    '&vcy;': '\\u0432',\r\n    '&vdash;': '\\u22A2',\r\n    '&vee;': '\\u2228',\r\n    '&veebar;': '\\u22BB',\r\n    '&veeeq;': '\\u225A',\r\n    '&vellip;': '\\u22EE',\r\n    '&verbar;': '\\u007C',\r\n    '&vert;': '\\u007C',\r\n    '&vfr;': '\\uD835\\uDD33',\r\n    '&vltri;': '\\u22B2',\r\n    '&vnsub;': '\\u2282\\u20D2',\r\n    '&vnsup;': '\\u2283\\u20D2',\r\n    '&vopf;': '\\uD835\\uDD67',\r\n    '&vprop;': '\\u221D',\r\n    '&vrtri;': '\\u22B3',\r\n    '&vscr;': '\\uD835\\uDCCB',\r\n    '&vsubnE;': '\\u2ACB\\uFE00',\r\n    '&vsubne;': '\\u228A\\uFE00',\r\n    '&vsupnE;': '\\u2ACC\\uFE00',\r\n    '&vsupne;': '\\u228B\\uFE00',\r\n    '&vzigzag;': '\\u299A',\r\n    '&wcirc;': '\\u0175',\r\n    '&wedbar;': '\\u2A5F',\r\n    '&wedge;': '\\u2227',\r\n    '&wedgeq;': '\\u2259',\r\n    '&weierp;': '\\u2118',\r\n    '&wfr;': '\\uD835\\uDD34',\r\n    '&wopf;': '\\uD835\\uDD68',\r\n    '&wp;': '\\u2118',\r\n    '&wr;': '\\u2240',\r\n    '&wreath;': '\\u2240',\r\n    '&wscr;': '\\uD835\\uDCCC',\r\n    '&xcap;': '\\u22C2',\r\n    '&xcirc;': '\\u25EF',\r\n    '&xcup;': '\\u22C3',\r\n    '&xdtri;': '\\u25BD',\r\n    '&xfr;': '\\uD835\\uDD35',\r\n    '&xhArr;': '\\u27FA',\r\n    '&xharr;': '\\u27F7',\r\n    '&xi;': '\\u03BE',\r\n    '&xlArr;': '\\u27F8',\r\n    '&xlarr;': '\\u27F5',\r\n    '&xmap;': '\\u27FC',\r\n    '&xnis;': '\\u22FB',\r\n    '&xodot;': '\\u2A00',\r\n    '&xopf;': '\\uD835\\uDD69',\r\n    '&xoplus;': '\\u2A01',\r\n    '&xotime;': '\\u2A02',\r\n    '&xrArr;': '\\u27F9',\r\n    '&xrarr;': '\\u27F6',\r\n    '&xscr;': '\\uD835\\uDCCD',\r\n    '&xsqcup;': '\\u2A06',\r\n    '&xuplus;': '\\u2A04',\r\n    '&xutri;': '\\u25B3',\r\n    '&xvee;': '\\u22C1',\r\n    '&xwedge;': '\\u22C0',\r\n    '&yacute': '\\u00FD',\r\n    '&yacute;': '\\u00FD',\r\n    '&yacy;': '\\u044F',\r\n    '&ycirc;': '\\u0177',\r\n    '&ycy;': '\\u044B',\r\n    '&yen': '\\u00A5',\r\n    '&yen;': '\\u00A5',\r\n    '&yfr;': '\\uD835\\uDD36',\r\n    '&yicy;': '\\u0457',\r\n    '&yopf;': '\\uD835\\uDD6A',\r\n    '&yscr;': '\\uD835\\uDCCE',\r\n    '&yucy;': '\\u044E',\r\n    '&yuml': '\\u00FF',\r\n    '&yuml;': '\\u00FF',\r\n    '&zacute;': '\\u017A',\r\n    '&zcaron;': '\\u017E',\r\n    '&zcy;': '\\u0437',\r\n    '&zdot;': '\\u017C',\r\n    '&zeetrf;': '\\u2128',\r\n    '&zeta;': '\\u03B6',\r\n    '&zfr;': '\\uD835\\uDD37',\r\n    '&zhcy;': '\\u0436',\r\n    '&zigrarr;': '\\u21DD',\r\n    '&zopf;': '\\uD835\\uDD6B',\r\n    '&zscr;': '\\uD835\\uDCCF',\r\n    '&zwj;': '\\u200D',\r\n    '&zwnj;': '\\u200C'\r\n};\r\n\r\nexport default htmlEntities;\r\n", "import htmlEntities from './html-entities.js';\r\n\r\nexport function decodeHTMLEntities(str) {\r\n    return str.replace(/&(#\\d+|#x[a-f0-9]+|[a-z]+\\d*);?/gi, (match, entity) => {\r\n        if (typeof htmlEntities[match] === 'string') {\r\n            return htmlEntities[match];\r\n        }\r\n\r\n        if (entity.charAt(0) !== '#' || match.charAt(match.length - 1) !== ';') {\r\n            // keep as is, invalid or unknown sequence\r\n            return match;\r\n        }\r\n\r\n        let codePoint;\r\n        if (entity.charAt(1) === 'x') {\r\n            // hex\r\n            codePoint = parseInt(entity.substr(2), 16);\r\n        } else {\r\n            // dec\r\n            codePoint = parseInt(entity.substr(1), 10);\r\n        }\r\n\r\n        var output = '';\r\n\r\n        if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\r\n            // Invalid range, return a replacement character instead\r\n            return '\\uFFFD';\r\n        }\r\n\r\n        if (codePoint > 0xffff) {\r\n            codePoint -= 0x10000;\r\n            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\r\n            codePoint = 0xdc00 | (codePoint & 0x3ff);\r\n        }\r\n\r\n        output += String.fromCharCode(codePoint);\r\n\r\n        return output;\r\n    });\r\n}\r\n\r\nexport function escapeHtml(str) {\r\n    return str.trim().replace(/[<>\"'?&]/g, c => {\r\n        let hex = c.charCodeAt(0).toString(16);\r\n        if (hex.length < 2) {\r\n            hex = '0' + hex;\r\n        }\r\n        return '&#x' + hex.toUpperCase() + ';';\r\n    });\r\n}\r\n\r\nexport function textToHtml(str) {\r\n    let html = escapeHtml(str).replace(/\\n/g, '<br />');\r\n    return '<div>' + html + '</div>';\r\n}\r\n\r\nexport function htmlToText(str) {\r\n    str = str\r\n        // we can't process tags on multiple lines so remove newlines first\r\n        .replace(/\\r?\\n/g, '\\u0001')\r\n        .replace(/<\\!\\-\\-.*?\\-\\->/gi, ' ')\r\n\r\n        .replace(/<br\\b[^>]*>/gi, '\\n')\r\n        .replace(/<\\/?(p|div|table|tr|td|th)\\b[^>]*>/gi, '\\n\\n')\r\n        .replace(/<script\\b[^>]*>.*?<\\/script\\b[^>]*>/gi, ' ')\r\n        .replace(/^.*<body\\b[^>]*>/i, '')\r\n        .replace(/^.*<\\/head\\b[^>]*>/i, '')\r\n        .replace(/^.*<\\!doctype\\b[^>]*>/i, '')\r\n        .replace(/<\\/body\\b[^>]*>.*$/i, '')\r\n        .replace(/<\\/html\\b[^>]*>.*$/i, '')\r\n\r\n        .replace(/<a\\b[^>]*href\\s*=\\s*[\"']?([^\\s\"']+)[^>]*>/gi, ' ($1) ')\r\n\r\n        .replace(/<\\/?(span|em|i|strong|b|u|a)\\b[^>]*>/gi, '')\r\n\r\n        .replace(/<li\\b[^>]*>[\\n\\u0001\\s]*/gi, '* ')\r\n\r\n        .replace(/<hr\\b[^>]*>/g, '\\n-------------\\n')\r\n\r\n        .replace(/<[^>]*>/g, ' ')\r\n\r\n        // convert linebreak placeholders back to newlines\r\n        .replace(/\\u0001/g, '\\n')\r\n\r\n        .replace(/[ \\t]+/g, ' ')\r\n\r\n        .replace(/^\\s+$/gm, '')\r\n\r\n        .replace(/\\n\\n+/g, '\\n\\n')\r\n        .replace(/^\\n+/, '\\n')\r\n        .replace(/\\n+$/, '\\n');\r\n\r\n    str = decodeHTMLEntities(str);\r\n\r\n    return str;\r\n}\r\n\r\nfunction formatTextAddress(address) {\r\n    return []\r\n        .concat(address.name || [])\r\n        .concat(address.name ? `<${address.address}>` : address.address)\r\n        .join(' ');\r\n}\r\n\r\nfunction formatTextAddresses(addresses) {\r\n    let parts = [];\r\n\r\n    let processAddress = (address, partCounter) => {\r\n        if (partCounter) {\r\n            parts.push(', ');\r\n        }\r\n\r\n        if (address.group) {\r\n            let groupStart = `${address.name}:`;\r\n            let groupEnd = `;`;\r\n\r\n            parts.push(groupStart);\r\n            address.group.forEach(processAddress);\r\n            parts.push(groupEnd);\r\n        } else {\r\n            parts.push(formatTextAddress(address));\r\n        }\r\n    };\r\n\r\n    addresses.forEach(processAddress);\r\n\r\n    return parts.join('');\r\n}\r\n\r\nfunction formatHtmlAddress(address) {\r\n    return `<a href=\"mailto:${escapeHtml(address.address)}\" class=\"postal-email-address\">${escapeHtml(address.name || `<${address.address}>`)}</a>`;\r\n}\r\n\r\nfunction formatHtmlAddresses(addresses) {\r\n    let parts = [];\r\n\r\n    let processAddress = (address, partCounter) => {\r\n        if (partCounter) {\r\n            parts.push('<span class=\"postal-email-address-separator\">, </span>');\r\n        }\r\n\r\n        if (address.group) {\r\n            let groupStart = `<span class=\"postal-email-address-group\">${escapeHtml(address.name)}:</span>`;\r\n            let groupEnd = `<span class=\"postal-email-address-group\">;</span>`;\r\n\r\n            parts.push(groupStart);\r\n            address.group.forEach(processAddress);\r\n            parts.push(groupEnd);\r\n        } else {\r\n            parts.push(formatHtmlAddress(address));\r\n        }\r\n    };\r\n\r\n    addresses.forEach(processAddress);\r\n\r\n    return parts.join(' ');\r\n}\r\n\r\nfunction foldLines(str, lineLength, afterSpace) {\r\n    str = (str || '').toString();\r\n    lineLength = lineLength || 76;\r\n\r\n    let pos = 0,\r\n        len = str.length,\r\n        result = '',\r\n        line,\r\n        match;\r\n\r\n    while (pos < len) {\r\n        line = str.substr(pos, lineLength);\r\n        if (line.length < lineLength) {\r\n            result += line;\r\n            break;\r\n        }\r\n        if ((match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/))) {\r\n            line = match[0];\r\n            result += line;\r\n            pos += line.length;\r\n            continue;\r\n        } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\r\n            line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\r\n        } else if ((match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/))) {\r\n            line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\r\n        }\r\n\r\n        result += line;\r\n        pos += line.length;\r\n        if (pos < len) {\r\n            result += '\\r\\n';\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function formatTextHeader(message) {\r\n    let rows = [];\r\n\r\n    if (message.from) {\r\n        rows.push({ key: 'From', val: formatTextAddress(message.from) });\r\n    }\r\n\r\n    if (message.subject) {\r\n        rows.push({ key: 'Subject', val: message.subject });\r\n    }\r\n\r\n    if (message.date) {\r\n        let dateOptions = {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: false\r\n        };\r\n\r\n        let dateStr = typeof Intl === 'undefined' ? message.date : new Intl.DateTimeFormat('default', dateOptions).format(new Date(message.date));\r\n\r\n        rows.push({ key: 'Date', val: dateStr });\r\n    }\r\n\r\n    if (message.to && message.to.length) {\r\n        rows.push({ key: 'To', val: formatTextAddresses(message.to) });\r\n    }\r\n\r\n    if (message.cc && message.cc.length) {\r\n        rows.push({ key: 'Cc', val: formatTextAddresses(message.cc) });\r\n    }\r\n\r\n    if (message.bcc && message.bcc.length) {\r\n        rows.push({ key: 'Bcc', val: formatTextAddresses(message.bcc) });\r\n    }\r\n\r\n    // Align keys and values by adding space between these two\r\n    // Also make sure that the separator line is as long as the longest line\r\n    // Should end up with something like this:\r\n    /*\r\n    -----------------------------\r\n    From:    xx xx <xxx@xxx.com>\r\n    Subject: Example Subject\r\n    Date:    16/02/2021, 02:57:06\r\n    To:      not@found.com\r\n    -----------------------------\r\n    */\r\n\r\n    let maxKeyLength = rows\r\n        .map(r => r.key.length)\r\n        .reduce((acc, cur) => {\r\n            return cur > acc ? cur : acc;\r\n        }, 0);\r\n\r\n    rows = rows.flatMap(row => {\r\n        let sepLen = maxKeyLength - row.key.length;\r\n        let prefix = `${row.key}: ${' '.repeat(sepLen)}`;\r\n        let emptyPrefix = `${' '.repeat(row.key.length + 1)} ${' '.repeat(sepLen)}`;\r\n\r\n        let foldedLines = foldLines(row.val, 80, true)\r\n            .split(/\\r?\\n/)\r\n            .map(line => line.trim());\r\n\r\n        return foldedLines.map((line, i) => `${i ? emptyPrefix : prefix}${line}`);\r\n    });\r\n\r\n    let maxLineLength = rows\r\n        .map(r => r.length)\r\n        .reduce((acc, cur) => {\r\n            return cur > acc ? cur : acc;\r\n        }, 0);\r\n\r\n    let lineMarker = '-'.repeat(maxLineLength);\r\n\r\n    let template = `\r\n${lineMarker}\r\n${rows.join('\\n')}\r\n${lineMarker}\r\n`;\r\n\r\n    return template;\r\n}\r\n\r\nexport function formatHtmlHeader(message) {\r\n    let rows = [];\r\n\r\n    if (message.from) {\r\n        rows.push(`<div class=\"postal-email-header-key\">From</div><div class=\"postal-email-header-value\">${formatHtmlAddress(message.from)}</div>`);\r\n    }\r\n\r\n    if (message.subject) {\r\n        rows.push(\r\n            `<div class=\"postal-email-header-key\">Subject</div><div class=\"postal-email-header-value postal-email-header-subject\">${escapeHtml(\r\n                message.subject\r\n            )}</div>`\r\n        );\r\n    }\r\n\r\n    if (message.date) {\r\n        let dateOptions = {\r\n            year: 'numeric',\r\n            month: 'numeric',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: 'numeric',\r\n            second: 'numeric',\r\n            hour12: false\r\n        };\r\n\r\n        let dateStr = typeof Intl === 'undefined' ? message.date : new Intl.DateTimeFormat('default', dateOptions).format(new Date(message.date));\r\n\r\n        rows.push(\r\n            `<div class=\"postal-email-header-key\">Date</div><div class=\"postal-email-header-value postal-email-header-date\" data-date=\"${escapeHtml(\r\n                message.date\r\n            )}\">${escapeHtml(dateStr)}</div>`\r\n        );\r\n    }\r\n\r\n    if (message.to && message.to.length) {\r\n        rows.push(`<div class=\"postal-email-header-key\">To</div><div class=\"postal-email-header-value\">${formatHtmlAddresses(message.to)}</div>`);\r\n    }\r\n\r\n    if (message.cc && message.cc.length) {\r\n        rows.push(`<div class=\"postal-email-header-key\">Cc</div><div class=\"postal-email-header-value\">${formatHtmlAddresses(message.cc)}</div>`);\r\n    }\r\n\r\n    if (message.bcc && message.bcc.length) {\r\n        rows.push(`<div class=\"postal-email-header-key\">Bcc</div><div class=\"postal-email-header-value\">${formatHtmlAddresses(message.bcc)}</div>`);\r\n    }\r\n\r\n    let template = `<div class=\"postal-email-header\">${rows.length ? '<div class=\"postal-email-header-row\">' : ''}${rows.join(\r\n        '</div>\\n<div class=\"postal-email-header-row\">'\r\n    )}${rows.length ? '</div>' : ''}</div>`;\r\n\r\n    return template;\r\n}\r\n", "import { decodeWords } from './decode-strings.js';\r\n\r\n/**\r\n * Converts tokens for a single address into an address object\r\n *\r\n * @param {Array} tokens Tokens object\r\n * @return {Object} Address object\r\n */\r\nfunction _handleAddress(tokens) {\r\n    let token;\r\n    let isGroup = false;\r\n    let state = 'text';\r\n    let address;\r\n    let addresses = [];\r\n    let data = {\r\n        address: [],\r\n        comment: [],\r\n        group: [],\r\n        text: []\r\n    };\r\n    let i;\r\n    let len;\r\n\r\n    // Filter out <addresses>, (comments) and regular text\r\n    for (i = 0, len = tokens.length; i < len; i++) {\r\n        token = tokens[i];\r\n        if (token.type === 'operator') {\r\n            switch (token.value) {\r\n                case '<':\r\n                    state = 'address';\r\n                    break;\r\n                case '(':\r\n                    state = 'comment';\r\n                    break;\r\n                case ':':\r\n                    state = 'group';\r\n                    isGroup = true;\r\n                    break;\r\n                default:\r\n                    state = 'text';\r\n            }\r\n        } else if (token.value) {\r\n            if (state === 'address') {\r\n                // handle use case where unquoted name includes a \"<\"\r\n                // Apple Mail truncates everything between an unexpected < and an address\r\n                // and so will we\r\n                token.value = token.value.replace(/^[^<]*<\\s*/, '');\r\n            }\r\n            data[state].push(token.value);\r\n        }\r\n    }\r\n\r\n    // If there is no text but a comment, replace the two\r\n    if (!data.text.length && data.comment.length) {\r\n        data.text = data.comment;\r\n        data.comment = [];\r\n    }\r\n\r\n    if (isGroup) {\r\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\r\n        data.text = data.text.join(' ');\r\n        addresses.push({\r\n            name: decodeWords(data.text || (address && address.name)),\r\n            group: data.group.length ? addressParser(data.group.join(',')) : []\r\n        });\r\n    } else {\r\n        // If no address was found, try to detect one from regular text\r\n        if (!data.address.length && data.text.length) {\r\n            for (i = data.text.length - 1; i >= 0; i--) {\r\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\r\n                    data.address = data.text.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let _regexHandler = function (address) {\r\n                if (!data.address.length) {\r\n                    data.address = [address.trim()];\r\n                    return ' ';\r\n                } else {\r\n                    return address;\r\n                }\r\n            };\r\n\r\n            // still no address\r\n            if (!data.address.length) {\r\n                for (i = data.text.length - 1; i >= 0; i--) {\r\n                    // fixed the regex to parse email address correctly when email address has more than one @\r\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\r\n                    if (data.address.length) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If there's still is no text but a comment exixts, replace the two\r\n        if (!data.text.length && data.comment.length) {\r\n            data.text = data.comment;\r\n            data.comment = [];\r\n        }\r\n\r\n        // Keep only the first address occurence, push others to regular text\r\n        if (data.address.length > 1) {\r\n            data.text = data.text.concat(data.address.splice(1));\r\n        }\r\n\r\n        // Join values with spaces\r\n        data.text = data.text.join(' ');\r\n        data.address = data.address.join(' ');\r\n\r\n        if (!data.address && /^=\\?[^=]+?=$/.test(data.text.trim())) {\r\n            // try to extract words from text content\r\n            const parsedSubAddresses = addressParser(decodeWords(data.text));\r\n            if (parsedSubAddresses && parsedSubAddresses.length) {\r\n                return parsedSubAddresses;\r\n            }\r\n        }\r\n\r\n        if (!data.address && isGroup) {\r\n            return [];\r\n        } else {\r\n            address = {\r\n                address: data.address || data.text || '',\r\n                name: decodeWords(data.text || data.address || '')\r\n            };\r\n\r\n            if (address.address === address.name) {\r\n                if ((address.address || '').match(/@/)) {\r\n                    address.name = '';\r\n                } else {\r\n                    address.address = '';\r\n                }\r\n            }\r\n\r\n            addresses.push(address);\r\n        }\r\n    }\r\n\r\n    return addresses;\r\n}\r\n\r\n/**\r\n * Creates a Tokenizer object for tokenizing address field strings\r\n *\r\n * @constructor\r\n * @param {String} str Address field string\r\n */\r\nclass Tokenizer {\r\n    constructor(str) {\r\n        this.str = (str || '').toString();\r\n        this.operatorCurrent = '';\r\n        this.operatorExpecting = '';\r\n        this.node = null;\r\n        this.escaped = false;\r\n\r\n        this.list = [];\r\n        /**\r\n         * Operator tokens and which tokens are expected to end the sequence\r\n         */\r\n        this.operators = {\r\n            '\"': '\"',\r\n            '(': ')',\r\n            '<': '>',\r\n            ',': '',\r\n            ':': ';',\r\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\r\n            // than for terminating a group, but they are also not valid for any\r\n            // other use in this context.  Given that some mail clients have\r\n            // historically allowed the semicolon as a delimiter equivalent to the\r\n            // comma in their UI, it makes sense to treat them the same as a comma\r\n            // when used outside of a group.\r\n            ';': ''\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Tokenizes the original input string\r\n     *\r\n     * @return {Array} An array of operator|text tokens\r\n     */\r\n    tokenize() {\r\n        let chr,\r\n            list = [];\r\n        for (let i = 0, len = this.str.length; i < len; i++) {\r\n            chr = this.str.charAt(i);\r\n            this.checkChar(chr);\r\n        }\r\n\r\n        this.list.forEach(node => {\r\n            node.value = (node.value || '').toString().trim();\r\n            if (node.value) {\r\n                list.push(node);\r\n            }\r\n        });\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Checks if a character is an operator or text and acts accordingly\r\n     *\r\n     * @param {String} chr Character from the address field\r\n     */\r\n    checkChar(chr) {\r\n        if (this.escaped) {\r\n            // ignore next condition blocks\r\n        } else if (chr === this.operatorExpecting) {\r\n            this.node = {\r\n                type: 'operator',\r\n                value: chr\r\n            };\r\n            this.list.push(this.node);\r\n            this.node = null;\r\n            this.operatorExpecting = '';\r\n            this.escaped = false;\r\n            return;\r\n        } else if (!this.operatorExpecting && chr in this.operators) {\r\n            this.node = {\r\n                type: 'operator',\r\n                value: chr\r\n            };\r\n            this.list.push(this.node);\r\n            this.node = null;\r\n            this.operatorExpecting = this.operators[chr];\r\n            this.escaped = false;\r\n            return;\r\n        } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\r\n            this.escaped = true;\r\n            return;\r\n        }\r\n\r\n        if (!this.node) {\r\n            this.node = {\r\n                type: 'text',\r\n                value: ''\r\n            };\r\n            this.list.push(this.node);\r\n        }\r\n\r\n        if (chr === '\\n') {\r\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\r\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\r\n            chr = ' ';\r\n        }\r\n\r\n        if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\r\n            // skip command bytes\r\n            this.node.value += chr;\r\n        }\r\n\r\n        this.escaped = false;\r\n    }\r\n}\r\n\r\n/**\r\n * Parses structured e-mail addresses from an address field\r\n *\r\n * Example:\r\n *\r\n *    'Name <address@domain>'\r\n *\r\n * will be converted to\r\n *\r\n *     [{name: 'Name', address: 'address@domain'}]\r\n *\r\n * @param {String} str Address field\r\n * @return {Array} An array of address objects\r\n */\r\nfunction addressParser(str, options) {\r\n    options = options || {};\r\n\r\n    let tokenizer = new Tokenizer(str);\r\n    let tokens = tokenizer.tokenize();\r\n\r\n    let addresses = [];\r\n    let address = [];\r\n    let parsedAddresses = [];\r\n\r\n    tokens.forEach(token => {\r\n        if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\r\n            if (address.length) {\r\n                addresses.push(address);\r\n            }\r\n            address = [];\r\n        } else {\r\n            address.push(token);\r\n        }\r\n    });\r\n\r\n    if (address.length) {\r\n        addresses.push(address);\r\n    }\r\n\r\n    addresses.forEach(address => {\r\n        address = _handleAddress(address);\r\n        if (address.length) {\r\n            parsedAddresses = parsedAddresses.concat(address);\r\n        }\r\n    });\r\n\r\n    if (options.flatten) {\r\n        let addresses = [];\r\n        let walkAddressList = list => {\r\n            list.forEach(address => {\r\n                if (address.group) {\r\n                    return walkAddressList(address.group);\r\n                } else {\r\n                    addresses.push(address);\r\n                }\r\n            });\r\n        };\r\n        walkAddressList(parsedAddresses);\r\n        return addresses;\r\n    }\r\n\r\n    return parsedAddresses;\r\n}\r\n\r\n// expose to the world\r\nexport default addressParser;\r\n", "// Code from: https://gist.githubusercontent.com/jonleighton/958841/raw/fb05a8632efb75d85d43deb593df04367ce48371/base64ArrayBuffer.js\r\n\r\n// Converts an ArrayBuffer directly to base64, without any intermediate 'convert to string then\r\n// use window.btoa' step. According to my tests, this appears to be a faster approach:\r\n// http://jsperf.com/encoding-xhr-image-data/5\r\n\r\n/*\r\nMIT LICENSE\r\n\r\nCopyright 2011 Jon Leighton\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nexport function base64ArrayBuffer(arrayBuffer) {\r\n    var base64 = '';\r\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    var bytes = new Uint8Array(arrayBuffer);\r\n    var byteLength = bytes.byteLength;\r\n    var byteRemainder = byteLength % 3;\r\n    var mainLength = byteLength - byteRemainder;\r\n\r\n    var a, b, c, d;\r\n    var chunk;\r\n\r\n    // Main loop deals with bytes in chunks of 3\r\n    for (var i = 0; i < mainLength; i = i + 3) {\r\n        // Combine the three bytes into a single integer\r\n        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\r\n\r\n        // Use bitmasks to extract 6-bit segments from the triplet\r\n        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\r\n        b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\r\n        c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\r\n        d = chunk & 63; // 63       = 2^6 - 1\r\n\r\n        // Convert the raw binary segments to the appropriate ASCII encoding\r\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\r\n    }\r\n\r\n    // Deal with the remaining bytes and padding\r\n    if (byteRemainder == 1) {\r\n        chunk = bytes[mainLength];\r\n\r\n        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\r\n\r\n        // Set the 4 least significant bits to zero\r\n        b = (chunk & 3) << 4; // 3   = 2^2 - 1\r\n\r\n        base64 += encodings[a] + encodings[b] + '==';\r\n    } else if (byteRemainder == 2) {\r\n        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\r\n\r\n        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\r\n        b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\r\n\r\n        // Set the 2 least significant bits to zero\r\n        c = (chunk & 15) << 2; // 15    = 2^4 - 1\r\n\r\n        base64 += encodings[a] + encodings[b] + encodings[c] + '=';\r\n    }\r\n\r\n    return base64;\r\n}\r\n", "import MimeNode from './mime-node.js';\r\nimport { textToHtml, htmlToText, formatTextHeader, formatHtmlHeader } from './text-format.js';\r\nimport addressParser from './address-parser.js';\r\nimport { decodeWords, textEncoder, blobToArrayBuffer } from './decode-strings.js';\r\nimport { base64ArrayBuffer } from './base64-encoder.js';\r\n\r\nexport { addressParser, decodeWords };\r\n\r\nexport default class PostalMime {\r\n    static parse(buf, options) {\r\n        const parser = new PostalMime(options);\r\n        return parser.parse(buf);\r\n    }\r\n\r\n    constructor(options) {\r\n        this.options = options || {};\r\n\r\n        this.root = this.currentNode = new MimeNode({\r\n            postalMime: this\r\n        });\r\n        this.boundaries = [];\r\n\r\n        this.textContent = {};\r\n        this.attachments = [];\r\n\r\n        this.attachmentEncoding =\r\n            (this.options.attachmentEncoding || '')\r\n                .toString()\r\n                .replace(/[-_\\s]/g, '')\r\n                .trim()\r\n                .toLowerCase() || 'arraybuffer';\r\n\r\n        this.started = false;\r\n    }\r\n\r\n    async finalize() {\r\n        // close all pending nodes\r\n        await this.root.finalize();\r\n    }\r\n\r\n    async processLine(line, isFinal) {\r\n        let boundaries = this.boundaries;\r\n\r\n        // check if this is a mime boundary\r\n        if (boundaries.length && line.length > 2 && line[0] === 0x2d && line[1] === 0x2d) {\r\n            // could be a boundary marker\r\n            for (let i = boundaries.length - 1; i >= 0; i--) {\r\n                let boundary = boundaries[i];\r\n\r\n                if (line.length !== boundary.value.length + 2 && line.length !== boundary.value.length + 4) {\r\n                    continue;\r\n                }\r\n\r\n                let isTerminator = line.length === boundary.value.length + 4;\r\n\r\n                if (isTerminator && (line[line.length - 2] !== 0x2d || line[line.length - 1] !== 0x2d)) {\r\n                    continue;\r\n                }\r\n\r\n                let boudaryMatches = true;\r\n                for (let i = 0; i < boundary.value.length; i++) {\r\n                    if (line[i + 2] !== boundary.value[i]) {\r\n                        boudaryMatches = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!boudaryMatches) {\r\n                    continue;\r\n                }\r\n\r\n                if (isTerminator) {\r\n                    await boundary.node.finalize();\r\n\r\n                    this.currentNode = boundary.node.parentNode || this.root;\r\n                } else {\r\n                    // finalize any open child nodes (should be just one though)\r\n                    await boundary.node.finalizeChildNodes();\r\n\r\n                    this.currentNode = new MimeNode({\r\n                        postalMime: this,\r\n                        parentNode: boundary.node\r\n                    });\r\n                }\r\n\r\n                if (isFinal) {\r\n                    return this.finalize();\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.currentNode.feed(line);\r\n\r\n        if (isFinal) {\r\n            return this.finalize();\r\n        }\r\n    }\r\n\r\n    readLine() {\r\n        let startPos = this.readPos;\r\n        let endPos = this.readPos;\r\n\r\n        let res = () => {\r\n            return {\r\n                bytes: new Uint8Array(this.buf, startPos, endPos - startPos),\r\n                done: this.readPos >= this.av.length\r\n            };\r\n        };\r\n\r\n        while (this.readPos < this.av.length) {\r\n            const c = this.av[this.readPos++];\r\n\r\n            if (c !== 0x0d && c !== 0x0a) {\r\n                endPos = this.readPos;\r\n            }\r\n\r\n            if (c === 0x0a) {\r\n                return res();\r\n            }\r\n        }\r\n\r\n        return res();\r\n    }\r\n\r\n    async processNodeTree() {\r\n        // get text nodes\r\n\r\n        let textContent = {};\r\n\r\n        let textTypes = new Set();\r\n        let textMap = (this.textMap = new Map());\r\n\r\n        let forceRfc822Attachments = this.forceRfc822Attachments();\r\n\r\n        let walk = async (node, alternative, related) => {\r\n            alternative = alternative || false;\r\n            related = related || false;\r\n\r\n            if (!node.contentType.multipart) {\r\n                // is it inline message/rfc822\r\n                if (this.isInlineMessageRfc822(node) && !forceRfc822Attachments) {\r\n                    const subParser = new PostalMime();\r\n                    node.subMessage = await subParser.parse(node.content);\r\n\r\n                    if (!textMap.has(node)) {\r\n                        textMap.set(node, {});\r\n                    }\r\n\r\n                    let textEntry = textMap.get(node);\r\n\r\n                    // default to text if there is no content\r\n                    if (node.subMessage.text || !node.subMessage.html) {\r\n                        textEntry.plain = textEntry.plain || [];\r\n                        textEntry.plain.push({ type: 'subMessage', value: node.subMessage });\r\n                        textTypes.add('plain');\r\n                    }\r\n\r\n                    if (node.subMessage.html) {\r\n                        textEntry.html = textEntry.html || [];\r\n                        textEntry.html.push({ type: 'subMessage', value: node.subMessage });\r\n                        textTypes.add('html');\r\n                    }\r\n\r\n                    if (subParser.textMap) {\r\n                        subParser.textMap.forEach((subTextEntry, subTextNode) => {\r\n                            textMap.set(subTextNode, subTextEntry);\r\n                        });\r\n                    }\r\n\r\n                    for (let attachment of node.subMessage.attachments || []) {\r\n                        this.attachments.push(attachment);\r\n                    }\r\n                }\r\n\r\n                // is it text?\r\n                else if (this.isInlineTextNode(node)) {\r\n                    let textType = node.contentType.parsed.value.substr(node.contentType.parsed.value.indexOf('/') + 1);\r\n\r\n                    let selectorNode = alternative || node;\r\n                    if (!textMap.has(selectorNode)) {\r\n                        textMap.set(selectorNode, {});\r\n                    }\r\n\r\n                    let textEntry = textMap.get(selectorNode);\r\n                    textEntry[textType] = textEntry[textType] || [];\r\n                    textEntry[textType].push({ type: 'text', value: node.getTextContent() });\r\n                    textTypes.add(textType);\r\n                }\r\n\r\n                // is it an attachment\r\n                else if (node.content) {\r\n                    const filename = node.contentDisposition.parsed.params.filename || node.contentType.parsed.params.name || null;\r\n                    const attachment = {\r\n                        filename: filename ? decodeWords(filename) : null,\r\n                        mimeType: node.contentType.parsed.value,\r\n                        disposition: node.contentDisposition.parsed.value || null\r\n                    };\r\n\r\n                    if (related && node.contentId) {\r\n                        attachment.related = true;\r\n                    }\r\n\r\n                    if (node.contentDescription) {\r\n                        attachment.description = node.contentDescription;\r\n                    }\r\n\r\n                    if (node.contentId) {\r\n                        attachment.contentId = node.contentId;\r\n                    }\r\n\r\n                    switch (node.contentType.parsed.value) {\r\n                        // Special handling for calendar events\r\n                        case 'text/calendar':\r\n                        case 'application/ics': {\r\n                            if (node.contentType.parsed.params.method) {\r\n                                attachment.method = node.contentType.parsed.params.method.toString().toUpperCase().trim();\r\n                            }\r\n\r\n                            // Enforce into unicode\r\n                            const decodedText = node.getTextContent().replace(/\\r?\\n/g, '\\n').replace(/\\n*$/, '\\n');\r\n                            attachment.content = textEncoder.encode(decodedText);\r\n                            break;\r\n                        }\r\n\r\n                        // Regular attachments\r\n                        default:\r\n                            attachment.content = node.content;\r\n                    }\r\n\r\n                    this.attachments.push(attachment);\r\n                }\r\n            } else if (node.contentType.multipart === 'alternative') {\r\n                alternative = node;\r\n            } else if (node.contentType.multipart === 'related') {\r\n                related = node;\r\n            }\r\n\r\n            for (let childNode of node.childNodes) {\r\n                await walk(childNode, alternative, related);\r\n            }\r\n        };\r\n\r\n        await walk(this.root, false, []);\r\n\r\n        textMap.forEach(mapEntry => {\r\n            textTypes.forEach(textType => {\r\n                if (!textContent[textType]) {\r\n                    textContent[textType] = [];\r\n                }\r\n\r\n                if (mapEntry[textType]) {\r\n                    mapEntry[textType].forEach(textEntry => {\r\n                        switch (textEntry.type) {\r\n                            case 'text':\r\n                                textContent[textType].push(textEntry.value);\r\n                                break;\r\n\r\n                            case 'subMessage':\r\n                                {\r\n                                    switch (textType) {\r\n                                        case 'html':\r\n                                            textContent[textType].push(formatHtmlHeader(textEntry.value));\r\n                                            break;\r\n                                        case 'plain':\r\n                                            textContent[textType].push(formatTextHeader(textEntry.value));\r\n                                            break;\r\n                                    }\r\n                                }\r\n                                break;\r\n                        }\r\n                    });\r\n                } else {\r\n                    let alternativeType;\r\n                    switch (textType) {\r\n                        case 'html':\r\n                            alternativeType = 'plain';\r\n                            break;\r\n                        case 'plain':\r\n                            alternativeType = 'html';\r\n                            break;\r\n                    }\r\n\r\n                    (mapEntry[alternativeType] || []).forEach(textEntry => {\r\n                        switch (textEntry.type) {\r\n                            case 'text':\r\n                                switch (textType) {\r\n                                    case 'html':\r\n                                        textContent[textType].push(textToHtml(textEntry.value));\r\n                                        break;\r\n                                    case 'plain':\r\n                                        textContent[textType].push(htmlToText(textEntry.value));\r\n                                        break;\r\n                                }\r\n                                break;\r\n\r\n                            case 'subMessage':\r\n                                {\r\n                                    switch (textType) {\r\n                                        case 'html':\r\n                                            textContent[textType].push(formatHtmlHeader(textEntry.value));\r\n                                            break;\r\n                                        case 'plain':\r\n                                            textContent[textType].push(formatTextHeader(textEntry.value));\r\n                                            break;\r\n                                    }\r\n                                }\r\n                                break;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        Object.keys(textContent).forEach(textType => {\r\n            textContent[textType] = textContent[textType].join('\\n');\r\n        });\r\n\r\n        this.textContent = textContent;\r\n    }\r\n\r\n    isInlineTextNode(node) {\r\n        if (node.contentDisposition.parsed.value === 'attachment') {\r\n            // no matter the type, this is an attachment\r\n            return false;\r\n        }\r\n\r\n        switch (node.contentType.parsed.value) {\r\n            case 'text/html':\r\n            case 'text/plain':\r\n                return true;\r\n\r\n            case 'text/calendar':\r\n            case 'text/csv':\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    isInlineMessageRfc822(node) {\r\n        if (node.contentType.parsed.value !== 'message/rfc822') {\r\n            return false;\r\n        }\r\n        let disposition = node.contentDisposition.parsed.value || (this.options.rfc822Attachments ? 'attachment' : 'inline');\r\n        return disposition === 'inline';\r\n    }\r\n\r\n    // Check if this is a specially crafted report email where message/rfc822 content should not be inlined\r\n    forceRfc822Attachments() {\r\n        if (this.options.forceRfc822Attachments) {\r\n            return true;\r\n        }\r\n\r\n        let forceRfc822Attachments = false;\r\n        let walk = node => {\r\n            if (!node.contentType.multipart) {\r\n                if (['message/delivery-status', 'message/feedback-report'].includes(node.contentType.parsed.value)) {\r\n                    forceRfc822Attachments = true;\r\n                }\r\n            }\r\n\r\n            for (let childNode of node.childNodes) {\r\n                walk(childNode);\r\n            }\r\n        };\r\n        walk(this.root);\r\n        return forceRfc822Attachments;\r\n    }\r\n\r\n    async resolveStream(stream) {\r\n        let chunkLen = 0;\r\n        let chunks = [];\r\n        const reader = stream.getReader();\r\n\r\n        while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) {\r\n                break;\r\n            }\r\n            chunks.push(value);\r\n            chunkLen += value.length;\r\n        }\r\n\r\n        const result = new Uint8Array(chunkLen);\r\n        let chunkPointer = 0;\r\n        for (let chunk of chunks) {\r\n            result.set(chunk, chunkPointer);\r\n            chunkPointer += chunk.length;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async parse(buf) {\r\n        if (this.started) {\r\n            throw new Error('Can not reuse parser, create a new PostalMime object');\r\n        }\r\n        this.started = true;\r\n\r\n        // Check if the input is a readable stream and resolve it into an ArrayBuffer\r\n        if (buf && typeof buf.getReader === 'function') {\r\n            buf = await this.resolveStream(buf);\r\n        }\r\n\r\n        // Should it throw for an empty value instead of defaulting to an empty ArrayBuffer?\r\n        buf = buf || new ArrayBuffer(0);\r\n\r\n        // Cast string input to Uint8Array\r\n        if (typeof buf === 'string') {\r\n            buf = textEncoder.encode(buf);\r\n        }\r\n\r\n        // Cast Blob to ArrayBuffer\r\n        if (buf instanceof Blob || Object.prototype.toString.call(buf) === '[object Blob]') {\r\n            buf = await blobToArrayBuffer(buf);\r\n        }\r\n\r\n        // Cast Node.js Buffer object or Uint8Array into ArrayBuffer\r\n        if (buf.buffer instanceof ArrayBuffer) {\r\n            buf = new Uint8Array(buf).buffer;\r\n        }\r\n\r\n        this.buf = buf;\r\n\r\n        this.av = new Uint8Array(buf);\r\n        this.readPos = 0;\r\n\r\n        while (this.readPos < this.av.length) {\r\n            const line = this.readLine();\r\n\r\n            await this.processLine(line.bytes, line.done);\r\n        }\r\n\r\n        await this.processNodeTree();\r\n\r\n        const message = {\r\n            headers: this.root.headers.map(entry => ({ key: entry.key, value: entry.value })).reverse()\r\n        };\r\n\r\n        for (const key of ['from', 'sender']) {\r\n            const addressHeader = this.root.headers.find(line => line.key === key);\r\n            if (addressHeader && addressHeader.value) {\r\n                const addresses = addressParser(addressHeader.value);\r\n                if (addresses && addresses.length) {\r\n                    message[key] = addresses[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const key of ['delivered-to', 'return-path']) {\r\n            const addressHeader = this.root.headers.find(line => line.key === key);\r\n            if (addressHeader && addressHeader.value) {\r\n                const addresses = addressParser(addressHeader.value);\r\n                if (addresses && addresses.length && addresses[0].address) {\r\n                    const camelKey = key.replace(/\\-(.)/g, (o, c) => c.toUpperCase());\r\n                    message[camelKey] = addresses[0].address;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const key of ['to', 'cc', 'bcc', 'reply-to']) {\r\n            const addressHeaders = this.root.headers.filter(line => line.key === key);\r\n            let addresses = [];\r\n\r\n            addressHeaders\r\n                .filter(entry => entry && entry.value)\r\n                .map(entry => addressParser(entry.value))\r\n                .forEach(parsed => (addresses = addresses.concat(parsed || [])));\r\n\r\n            if (addresses && addresses.length) {\r\n                const camelKey = key.replace(/\\-(.)/g, (o, c) => c.toUpperCase());\r\n                message[camelKey] = addresses;\r\n            }\r\n        }\r\n\r\n        for (const key of ['subject', 'message-id', 'in-reply-to', 'references']) {\r\n            const header = this.root.headers.find(line => line.key === key);\r\n            if (header && header.value) {\r\n                const camelKey = key.replace(/\\-(.)/g, (o, c) => c.toUpperCase());\r\n                message[camelKey] = decodeWords(header.value);\r\n            }\r\n        }\r\n\r\n        let dateHeader = this.root.headers.find(line => line.key === 'date');\r\n        if (dateHeader) {\r\n            let date = new Date(dateHeader.value);\r\n            if (!date || date.toString() === 'Invalid Date') {\r\n                date = dateHeader.value;\r\n            } else {\r\n                // enforce ISO format if seems to be a valid date\r\n                date = date.toISOString();\r\n            }\r\n            message.date = date;\r\n        }\r\n\r\n        if (this.textContent?.html) {\r\n            message.html = this.textContent.html;\r\n        }\r\n\r\n        if (this.textContent?.plain) {\r\n            message.text = this.textContent.plain;\r\n        }\r\n\r\n        message.attachments = this.attachments;\r\n\r\n        switch (this.attachmentEncoding) {\r\n            case 'arraybuffer':\r\n                break;\r\n\r\n            case 'base64':\r\n                for (let attachment of message.attachments || []) {\r\n                    if (attachment?.content) {\r\n                        attachment.content = base64ArrayBuffer(attachment.content);\r\n                        attachment.encoding = 'base64';\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'utf8':\r\n                let attachmentDecoder = new TextDecoder('utf8');\r\n                for (let attachment of message.attachments || []) {\r\n                    if (attachment?.content) {\r\n                        attachment.content = attachmentDecoder.decode(attachment.content);\r\n                        attachment.encoding = 'utf8';\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                throw new Error('Unknwon attachment encoding');\r\n        }\r\n\r\n        return message;\r\n    }\r\n}\r\n", "import { parseEmail, parseEmailMulti, type ParsedEmail } from './parser'\r\nimport { parseGdacsFeed } from './gdacs'\r\nimport { parseReliefwebFeed } from './reliefweb'\r\nimport { parseUSGSFeed } from './usgs'\r\nimport { parseNOAACAPFeed } from './noaa-cap'\r\nimport { fetchFIRMSGlobalData, type ParsedFIRMSItem } from './nasa-firms'\r\nimport PostalMime from 'postal-mime'\r\n\r\ntype Env = {\r\n  DB: D1Database\r\n  CACHE: KVNamespace\r\n  INGEST_SECRET?: string\r\n  INGEST_TOKEN?: string\r\n  GDACS_RSS_URL?: string\r\n  RELIEFWEB_RSS_URL?: string\r\n  USGS_RSS_URL?: string\r\n  NOAA_CAP_RSS_URL?: string\r\n  NASA_FIRMS_MAP_KEY?: string\r\n  ALLOW_FROM?: string\r\n}\r\n\r\n// Minimal ForwardableEmailMessage type for Email Workers\r\ntype EmailMessage = {\r\n  raw: ReadableStream\r\n  headers: Headers\r\n  from?: string\r\n  to?: string\r\n  setReject?: (reason: string) => void\r\n  forward?: (rcptTo: string, headers?: Headers) => Promise<void>\r\n}\r\n\r\nfunction json(data: unknown, init: ResponseInit = {}) {\r\n  return new Response(JSON.stringify(data), { headers: { 'content-type': 'application/json' }, ...init })\r\n}\r\n\r\n// Coerce incoming disaster types to a known set for consistency in DB and API\r\nfunction normalizeDisasterType(type: string | undefined, title?: string, description?: string): 'earthquake'|'cyclone'|'flood'|'wildfire'|'landslide'|'drought'|'other' {\r\n  const v = (type || '').toLowerCase().trim()\r\n  const text = `${title || ''} ${description || ''}`.toLowerCase()\r\n  const hay = (v + ' ' + text)\r\n  \r\n  if (/earth\\s*quake|\\bquake\\b|m\\s*\\d+(?:\\.\\d+)?\\s*earth/.test(hay)) return 'earthquake'\r\n  if (/tropical[_\\s-]*cyclone|\\bcyclone\\b|\\btyphoon\\b|\\bhurricane\\b|\\btc[-_\\s]?\\d*/.test(hay)) return 'cyclone'\r\n  if (/\\bflood|flooding|flash\\s+flood/.test(hay)) return 'flood'\r\n  if (/wild\\s*fire|forest\\s*fire|\\bwildfire\\b|fire\\s+alert/.test(hay)) return 'wildfire'\r\n  if (/landslide|mudslide|debris\\s+flow|slope\\s+failure/.test(hay)) return 'landslide'\r\n  if (/drought|water\\s+scarcity|dry\\s+spell/.test(hay)) return 'drought'\r\n  \r\n  // Map additional ReliefWeb types to 'other'\r\n  if (/volcano|volcanic|eruption|heatwave|heat\\s+wave|epidemic|cholera|ebola|diphtheria|outbreak/.test(hay)) return 'other'\r\n  \r\n  return 'other'\r\n}\r\n\r\nasync function processParsedEmail(parsed: ParsedEmail, env: Env): Promise<{ newDisasters: number; updatedDisasters: number; error?: string }>{\r\n  try {\r\n  const normType = normalizeDisasterType(parsed.disaster_type, parsed.title, parsed.description)\r\n    // Try the modern schema first (with external_id); fallback to legacy schema (id TEXT PK)\r\n    let existing: { id: any; severity: string } | null = null\r\n    let useLegacy = false\r\n    try {\r\n      existing = await env.DB.prepare('SELECT id, severity FROM disasters WHERE external_id = ?').bind(parsed.external_id).first<{ id: any; severity: string }>()\r\n    } catch (err: any) {\r\n      if (String(err?.message || err).toLowerCase().includes('no such column: external_id')) {\r\n        useLegacy = true\r\n        existing = await env.DB.prepare('SELECT id, severity FROM disasters WHERE id = ?').bind(parsed.external_id).first<{ id: any; severity: string }>()\r\n      } else {\r\n        throw err\r\n      }\r\n    }\r\n\r\n    let newDisasters = 0\r\n    let updatedDisasters = 0\r\n    if (!existing) {\r\n      if (useLegacy) {\r\n        // Minimal columns on legacy schema (affected_population may not exist in legacy schema)\r\n        await env.DB.prepare(`INSERT INTO disasters (id, disaster_type, severity, title, country, coordinates_lat, coordinates_lng, event_timestamp, is_active)\r\n                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)`).\r\n          bind(parsed.external_id, normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp).\r\n          run()\r\n      } else {\r\n        await env.DB.prepare(`INSERT INTO disasters (external_id, disaster_type, severity, title, country, coordinates_lat, coordinates_lng, event_timestamp, description, affected_population)\r\n                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`)\r\n          .bind(parsed.external_id, normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp, parsed.description || null, parsed.affected_population ?? null)\r\n          .run()\r\n      }\r\n      newDisasters = 1\r\n    } else {\r\n      if (useLegacy) {\r\n        await env.DB.prepare(`UPDATE disasters SET disaster_type = ?, severity = ?, title = ?, country = ?, coordinates_lat = ?, coordinates_lng = ?, event_timestamp = ? WHERE id = ?`)\r\n          .bind(normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp, parsed.external_id)\r\n          .run()\r\n      } else {\r\n        await env.DB.prepare(`UPDATE disasters SET disaster_type = ?, severity = ?, title = ?, country = ?, coordinates_lat = ?, coordinates_lng = ?, event_timestamp = ?, description = ?, affected_population = ?, updated_at = CURRENT_TIMESTAMP WHERE external_id = ?`)\r\n          .bind(normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp, parsed.description || null, parsed.affected_population ?? null, parsed.external_id)\r\n          .run()\r\n      }\r\n      if (existing.severity !== parsed.severity) {\r\n        await env.DB.prepare(`INSERT INTO disaster_history (disaster_id, severity_old, severity_new, change_reason)\r\n                              VALUES (?, ?, ?, ?)`).\r\n          bind(existing.id, existing.severity, parsed.severity, 'email_update').\r\n          run()\r\n      }\r\n      updatedDisasters = 1\r\n    }\r\n\r\n    // Optimized cache invalidation - use wildcard patterns where supported\r\n    if (env.CACHE) {\r\n      // Clear specific high-traffic keys and let other cache entries expire naturally\r\n      const criticalKeys = [\r\n        'disasters:summary',\r\n        'disasters:current:all:all:all:none:50:0', // Most common query\r\n      ]\r\n      await Promise.all(criticalKeys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n    }\r\n\r\n    return { newDisasters, updatedDisasters }\r\n  } catch (e: any) {\r\n    return { newDisasters: 0, updatedDisasters: 0, error: e?.message || String(e) }\r\n  }\r\n}\r\n\r\nexport default {\r\n  async fetch(req: Request, env: Env): Promise<Response> {\r\n  const url = new URL(req.url)\r\n  // Normalize path to avoid trailing-slash mismatches\r\n  const pathname = (url.pathname.replace(/\\/+$/g, '') || '/')\r\n\r\n  if (req.method === 'OPTIONS') {\r\n      return new Response(null, { status: 204, headers: { 'access-control-allow-origin': '*', 'access-control-allow-methods': 'POST,OPTIONS', 'access-control-allow-headers': 'content-type,authorization' } })\r\n    }\r\n  // Manual trigger to pull GDACS RSS now\r\n    if (req.method === 'POST' && pathname === '/ingest/gdacs') {\r\n      try {\r\n        const auth = req.headers.get('authorization') || ''\r\n        const token = auth.replace(/^Bearer\\s+/i, '')\r\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\r\n        if (!expected || token !== expected) {\r\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\r\n        }\r\n        const rssUrl = env.GDACS_RSS_URL || 'https://www.gdacs.org/xml/rss.xml'\r\n        const res = await fetch(rssUrl, { cf: { cacheTtl: 60, cacheEverything: true } as any })\r\n        if (!res.ok) return json({ success: false, error: { code: 'UPSTREAM', message: `GDACS fetch ${res.status}` } }, { status: 502 })\r\n        const xml = await res.text()\r\n        const items = parseGdacsFeed(xml).slice(0, 10)\r\n        let newDisasters = 0\r\n        let updatedDisasters = 0\r\n        const errors: Array<{ id: string; error: string }> = []\r\n        \r\n        // Process items in parallel with limited concurrency to avoid DB lock issues\r\n        const processChunk = async (chunk: any[]) => {\r\n          const results = await Promise.allSettled(chunk.map(p => processParsedEmail(p, env)))\r\n          for (let i = 0; i < results.length; i++) {\r\n            const result = results[i]\r\n            if (result.status === 'fulfilled') {\r\n              const r = result.value\r\n              newDisasters += r.newDisasters\r\n              updatedDisasters += r.updatedDisasters\r\n              if (r.error) errors.push({ id: chunk[i].external_id, error: r.error })\r\n            } else {\r\n              errors.push({ id: chunk[i].external_id, error: result.reason?.message || 'Processing failed' })\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Process in chunks of 3 to avoid overwhelming D1\r\n        for (let i = 0; i < items.length; i += 3) {\r\n          const chunk = items.slice(i, i + 3)\r\n          await processChunk(chunk)\r\n        }\r\n        if (env.CACHE) {\r\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\r\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n        }\r\n        if (errors.length) {\r\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\r\n        }\r\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\r\n      } catch (err: any) {\r\n        const message = err?.message || String(err)\r\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\r\n      }\r\n    }\r\n    // Manual trigger to pull ReliefWeb RSS now\r\n    if (req.method === 'POST' && pathname === '/ingest/reliefweb') {\r\n      try {\r\n        const auth = req.headers.get('authorization') || ''\r\n        const token = auth.replace(/^Bearer\\s+/i, '')\r\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\r\n        if (!expected || token !== expected) {\r\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\r\n        }\r\n        const rssUrl = env.RELIEFWEB_RSS_URL || 'https://reliefweb.int/disasters/rss.xml'\r\n        const res = await fetch(rssUrl, { cf: { cacheTtl: 120, cacheEverything: true } as any })\r\n        if (!res.ok) return json({ success: false, error: { code: 'UPSTREAM', message: `ReliefWeb fetch ${res.status}` } }, { status: 502 })\r\n        const xml = await res.text()\r\n        const items = parseReliefwebFeed(xml).slice(0, 20)\r\n        let newDisasters = 0\r\n        let updatedDisasters = 0\r\n        const errors: Array<{ id: string; error: string }> = []\r\n        \r\n        // Process items in parallel chunks\r\n        const processChunk = async (chunk: any[]) => {\r\n          const results = await Promise.allSettled(chunk.map(p => processParsedEmail(p, env)))\r\n          for (let i = 0; i < results.length; i++) {\r\n            const result = results[i]\r\n            if (result.status === 'fulfilled') {\r\n              const r = result.value\r\n              newDisasters += r.newDisasters\r\n              updatedDisasters += r.updatedDisasters\r\n              if (r.error) errors.push({ id: chunk[i].external_id, error: r.error })\r\n            } else {\r\n              errors.push({ id: chunk[i].external_id, error: result.reason?.message || 'Processing failed' })\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Process in chunks of 5 for ReliefWeb (typically has more items)\r\n        for (let i = 0; i < items.length; i += 5) {\r\n          const chunk = items.slice(i, i + 5)\r\n          await processChunk(chunk)\r\n        }\r\n        if (env.CACHE) {\r\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\r\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n        }\r\n        if (errors.length) {\r\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\r\n        }\r\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\r\n      } catch (err: any) {\r\n        const message = err?.message || String(err)\r\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\r\n      }\r\n    }\r\n\r\n    // Manual trigger to pull USGS RSS now\r\n    if (req.method === 'POST' && pathname === '/ingest/usgs') {\r\n      try {\r\n        const auth = req.headers.get('authorization') || ''\r\n        const token = auth.replace(/^Bearer\\s+/i, '')\r\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\r\n        if (!expected || token !== expected) {\r\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\r\n        }\r\n        const rssUrl = env.USGS_RSS_URL || 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.atom'\r\n        const res = await fetch(rssUrl, { cf: { cacheTtl: 300, cacheEverything: true } as any })\r\n        if (!res.ok) return json({ success: false, error: { code: 'UPSTREAM', message: `USGS fetch ${res.status}` } }, { status: 502 })\r\n        const xml = await res.text()\r\n        const items = parseUSGSFeed(xml).slice(0, 15)\r\n        let newDisasters = 0\r\n        let updatedDisasters = 0\r\n        const errors: Array<{ id: string; error: string }> = []\r\n        \r\n        // Process items in parallel chunks\r\n        const processChunk = async (chunk: any[]) => {\r\n          const results = await Promise.allSettled(chunk.map(p => processParsedEmail(p, env)))\r\n          for (let i = 0; i < results.length; i++) {\r\n            const result = results[i]\r\n            if (result.status === 'fulfilled') {\r\n              const r = result.value\r\n              newDisasters += r.newDisasters\r\n              updatedDisasters += r.updatedDisasters\r\n              if (r.error) errors.push({ id: chunk[i].external_id, error: r.error })\r\n            } else {\r\n              errors.push({ id: chunk[i].external_id, error: result.reason?.message || 'Processing failed' })\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Process in chunks of 3 for USGS (similar to GDACS)\r\n        for (let i = 0; i < items.length; i += 3) {\r\n          const chunk = items.slice(i, i + 3)\r\n          await processChunk(chunk)\r\n        }\r\n        if (env.CACHE) {\r\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\r\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n        }\r\n        if (errors.length) {\r\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\r\n        }\r\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\r\n      } catch (err: any) {\r\n        const message = err?.message || String(err)\r\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\r\n      }\r\n    }\r\n\r\n    // Manual trigger to pull NOAA CAP alerts now\r\n    if (req.method === 'POST' && pathname === '/ingest/noaa-cap') {\r\n      try {\r\n        const auth = req.headers.get('authorization') || ''\r\n        const token = auth.replace(/^Bearer\\s+/i, '')\r\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\r\n        if (!expected || token !== expected) {\r\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\r\n        }\r\n        const rssUrl = env.NOAA_CAP_RSS_URL || 'https://alerts.weather.gov/cap/us.atom'\r\n        const res = await fetch(rssUrl, { \r\n          headers: {\r\n            'User-Agent': 'Flare360-DisasterMonitor/1.0 (+https://flare360.samuel-1e5.workers.dev)',\r\n            'Accept': 'application/atom+xml, application/xml, text/xml, */*',\r\n            'Accept-Encoding': 'gzip, deflate',\r\n            'Cache-Control': 'no-cache'\r\n          },\r\n          cf: { cacheTtl: 300, cacheEverything: true } as any \r\n        })\r\n        if (!res.ok) return json({ success: false, error: { code: 'UPSTREAM', message: `NOAA CAP fetch ${res.status}` } }, { status: 502 })\r\n        const xml = await res.text()\r\n        const items = parseNOAACAPFeed(xml).slice(0, 20) // Process more CAP alerts since they're lighter\r\n        let newDisasters = 0\r\n        let updatedDisasters = 0\r\n        const errors: Array<{ id: string; error: string }> = []\r\n        \r\n        // Process items in parallel chunks\r\n        const processChunk = async (chunk: any[]) => {\r\n          const results = await Promise.allSettled(chunk.map(p => processParsedEmail(p, env)))\r\n          for (let i = 0; i < results.length; i++) {\r\n            const result = results[i]\r\n            if (result.status === 'fulfilled') {\r\n              const r = result.value\r\n              newDisasters += r.newDisasters\r\n              updatedDisasters += r.updatedDisasters\r\n              if (r.error) errors.push({ id: chunk[i].external_id, error: r.error })\r\n            } else {\r\n              errors.push({ id: chunk[i].external_id, error: result.reason?.message || 'Processing failed' })\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Process in chunks of 5 for CAP alerts (they're lighter than earthquake data)\r\n        for (let i = 0; i < items.length; i += 5) {\r\n          const chunk = items.slice(i, i + 5)\r\n          await processChunk(chunk)\r\n        }\r\n        if (env.CACHE) {\r\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\r\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n        }\r\n        if (errors.length) {\r\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\r\n        }\r\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\r\n      } catch (err: any) {\r\n        const message = err?.message || String(err)\r\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\r\n      }\r\n    }\r\n\r\n    // NASA FIRMS fire detection endpoint\r\n    if (req.method === 'POST' && pathname === '/ingest/nasa-firms') {\r\n      try {\r\n        const auth = req.headers.get('authorization') || ''\r\n        const token = auth.replace(/^Bearer\\s+/i, '')\r\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\r\n        if (!expected || token !== expected) {\r\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\r\n        }\r\n        \r\n        const mapKey = env.NASA_FIRMS_MAP_KEY\r\n        if (!mapKey) {\r\n          return json({ success: false, error: { code: 'CONFIG_ERROR', message: 'NASA_FIRMS_MAP_KEY not configured' } }, { status: 500 })\r\n        }\r\n        \r\n        console.log('Fetching NASA FIRMS fire detection data...')\r\n        const items = await fetchFIRMSGlobalData(mapKey, 1) // Last 24 hours\r\n        \r\n        let newDisasters = 0\r\n        let updatedDisasters = 0\r\n        const errors: Array<{ id: string; error: string }> = []\r\n        \r\n        // Process items in parallel chunks (smaller chunks for fire data since there can be many)\r\n        const processChunk = async (chunk: ParsedFIRMSItem[]) => {\r\n          const results = await Promise.allSettled(chunk.map(p => processParsedEmail(p, env)))\r\n          for (let i = 0; i < results.length; i++) {\r\n            const result = results[i]\r\n            if (result.status === 'fulfilled') {\r\n              const r = result.value\r\n              newDisasters += r.newDisasters\r\n              updatedDisasters += r.updatedDisasters\r\n              if (r.error) errors.push({ id: chunk[i].external_id, error: r.error })\r\n            } else {\r\n              errors.push({ id: chunk[i].external_id, error: result.reason?.message || 'Processing failed' })\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Process in smaller chunks of 3 for fire data (can be high volume)\r\n        for (let i = 0; i < items.length; i += 3) {\r\n          const chunk = items.slice(i, i + 3)\r\n          await processChunk(chunk)\r\n          \r\n          // Add small delay between chunks to avoid overwhelming the database\r\n          if (i + 3 < items.length) {\r\n            await new Promise(resolve => setTimeout(resolve, 100))\r\n          }\r\n        }\r\n        \r\n        // Clear cache\r\n        if (env.CACHE) {\r\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\r\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n        }\r\n        \r\n        if (errors.length) {\r\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\r\n        }\r\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\r\n      } catch (err: any) {\r\n        const message = err?.message || String(err)\r\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\r\n      }\r\n    }\r\n\r\n  if (req.method === 'POST' && pathname === '/ingest/email') {\r\n      const auth = req.headers.get('authorization') || ''\r\n      const token = auth.replace(/^Bearer\\s+/i, '')\r\n      const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\r\n      if (!expected || token !== expected) {\r\n        return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\r\n      }\r\n      let payload: any\r\n      try {\r\n        payload = await req.json()\r\n      } catch {\r\n        return json({ success: false, error: { code: 'BAD_REQUEST', message: 'Invalid JSON' } }, { status: 400 })\r\n      }\r\n\r\n      const subject = String(payload.subject || '')\r\n      const body = String(payload.body || '')\r\n      if (!subject && !body) {\r\n        return json({ success: false, error: { code: 'BAD_REQUEST', message: 'Missing subject/body' } }, { status: 400 })\r\n      }\r\n\r\n      const start = Date.now()\r\n      const parsedMany = parseEmailMulti(subject, body)\r\n      let newDisasters = 0\r\n      let updatedDisasters = 0\r\n      for (const p of parsedMany) {\r\n        const r = await processParsedEmail(p, env)\r\n        newDisasters += r.newDisasters\r\n        updatedDisasters += r.updatedDisasters\r\n      }\r\n\r\n      // Log processing\r\n      await env.DB.prepare(`INSERT INTO processing_logs (email_date, disasters_processed, new_disasters, updated_disasters, status, processing_time_ms, email_size_bytes)\r\n                            VALUES (?, ?, ?, ?, 'OK', ?, ?)`)\r\n  .bind(new Date().toISOString().slice(0, 10), parsedMany.length, newDisasters, updatedDisasters, Date.now() - start, (subject.length + body.length))\r\n        .run()\r\n\r\n  return json({ success: true, data: { processed: parsedMany.length, newDisasters, updatedDisasters } })\r\n    }\r\n\r\n    // Health check endpoint\r\n    if (req.method === 'GET' && pathname === '/health') {\r\n      return json({ success: true, data: { status: 'ok', timestamp: new Date().toISOString() } })\r\n    }\r\n\r\n  // Slightly more diagnostic 404 to help smoke-test debugging\r\n  return json({ success: false, error: { code: 'NOT_FOUND', message: 'Not found', method: req.method, path: pathname } }, { status: 404 })\r\n  },\r\n\r\n  // Cloudflare Email Workers handler: runs when emails are routed to this worker\r\n  async email(message: EmailMessage, env: Env, ctx: ExecutionContext) {\r\n    try {\r\n      // Optional allowlist for sender addresses (comma-separated)\r\n      const allow = (env.ALLOW_FROM || '')\r\n        .split(',')\r\n        .map((s: string) => s.trim().toLowerCase())\r\n        .filter(Boolean)\r\n      if (allow.length && message.from && !allow.includes(message.from.toLowerCase())) {\r\n        message.setReject?.('Address not allowed')\r\n        return\r\n      }\r\n\r\n  // Decode RFC822 with postal-mime for robust MIME parsing\r\n  const rawBuf = await new Response(message.raw).arrayBuffer()\r\n  const parser = new PostalMime()\r\n  const mail = await parser.parse(rawBuf)\r\n  const subject = mail.subject || message.headers?.get('Subject') || ''\r\n  const plain = mail.text || ''\r\n  const html = mail.html || ''\r\n  const body = plain || stripHtmlToPlain(html)\r\n  const parsedMany = parseEmailMulti(subject, body)\r\n      const t0 = Date.now()\r\n      let newDisasters = 0\r\n      let updatedDisasters = 0\r\n      for (const p of parsedMany) {\r\n        const r = await processParsedEmail(p, env)\r\n        newDisasters += r.newDisasters\r\n        updatedDisasters += r.updatedDisasters\r\n      }\r\n\r\n      // Log processing\r\n      await env.DB.prepare(`INSERT INTO processing_logs (email_date, disasters_processed, new_disasters, updated_disasters, status, processing_time_ms, email_size_bytes)\r\n                            VALUES (?, ?, ?, ?, 'OK', ?, ?)`)\r\n  .bind(new Date().toISOString().slice(0, 10), parsedMany.length, newDisasters, updatedDisasters, Date.now() - t0, rawBuf.byteLength)\r\n        .run()\r\n    } catch (err) {\r\n      // Minimal failure logging path\r\n      try {\r\n        await env.DB.prepare(`INSERT INTO processing_logs (email_date, disasters_processed, new_disasters, updated_disasters, status, processing_time_ms, email_size_bytes)\r\n                              VALUES (?, 0, 0, 0, 'ERROR', 0, 0)`).bind(new Date().toISOString().slice(0, 10)).run()\r\n      } catch {}\r\n      console.error('Email processing failed:', err)\r\n    }\r\n  }\r\n  ,\r\n  // Scheduled cron to pull GDACS, ReliefWeb, USGS, NOAA CAP, and NASA FIRMS feeds periodically\r\n  async scheduled(event: ScheduledEvent, env: Env, ctx: ExecutionContext) {\r\n    try {\r\n      // Pull GDACS, ReliefWeb, USGS, and NOAA CAP feeds in parallel\r\n      const gdacsUrl = env.GDACS_RSS_URL || 'https://www.gdacs.org/xml/rss.xml'\r\n      const reliefUrl = env.RELIEFWEB_RSS_URL || 'https://reliefweb.int/disasters/rss.xml'  \r\n      const usgsUrl = env.USGS_RSS_URL || 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.atom'\r\n      const noaaCapUrl = env.NOAA_CAP_RSS_URL || 'https://alerts.weather.gov/cap/us.atom'\r\n      const [gdacsRes, reliefRes, usgsRes, noaaCapRes] = await Promise.all([\r\n        fetch(gdacsUrl, { cf: { cacheTtl: 300, cacheEverything: true } as any }),\r\n        fetch(reliefUrl, { cf: { cacheTtl: 300, cacheEverything: true } as any }),\r\n        fetch(usgsUrl, { cf: { cacheTtl: 300, cacheEverything: true } as any }),\r\n        fetch(noaaCapUrl, { \r\n          headers: {\r\n            'User-Agent': 'Flare360-DisasterMonitor/1.0 (+https://flare360.samuel-1e5.workers.dev)',\r\n            'Accept': 'application/atom+xml, application/xml, text/xml, */*',\r\n            'Accept-Encoding': 'gzip, deflate',\r\n            'Cache-Control': 'no-cache'\r\n          },\r\n          cf: { cacheTtl: 300, cacheEverything: true } as any \r\n        }),\r\n      ])\r\n      if (gdacsRes.ok) {\r\n        const xml = await gdacsRes.text()\r\n        const items = parseGdacsFeed(xml)\r\n        await Promise.all(items.map((p) => processParsedEmail(p as any, env)))\r\n      }\r\n      if (reliefRes.ok) {\r\n        const xml = await reliefRes.text()\r\n        const items = parseReliefwebFeed(xml)\r\n        await Promise.all(items.map((p) => processParsedEmail(p as any, env)))\r\n      }\r\n      if (usgsRes.ok) {\r\n        const xml = await usgsRes.text()\r\n        const items = parseUSGSFeed(xml)\r\n        await Promise.all(items.map((p) => processParsedEmail(p as any, env)))\r\n      }\r\n      if (noaaCapRes.ok) {\r\n        const xml = await noaaCapRes.text()\r\n        const items = parseNOAACAPFeed(xml)\r\n        await Promise.all(items.map((p) => processParsedEmail(p as any, env)))\r\n      }\r\n      \r\n      // Fetch NASA FIRMS fire data if MAP_KEY is configured\r\n      if (env.NASA_FIRMS_MAP_KEY) {\r\n        try {\r\n          const firmsItems = await fetchFIRMSGlobalData(env.NASA_FIRMS_MAP_KEY, 1)\r\n          // Process in smaller batches to avoid overwhelming the database\r\n          for (let i = 0; i < firmsItems.length; i += 5) {\r\n            const batch = firmsItems.slice(i, i + 5)\r\n            await Promise.all(batch.map((p) => processParsedEmail(p as any, env)))\r\n            // Small delay between batches\r\n            if (i + 5 < firmsItems.length) {\r\n              await new Promise(resolve => setTimeout(resolve, 200))\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error processing NASA FIRMS data in scheduled job:', error)\r\n        }\r\n      }\r\n      \r\n      if (env.CACHE) {\r\n        const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\r\n        await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\r\n      }\r\n    } catch {}\r\n  }\r\n}\r\n\r\nfunction stripHtmlToPlain(html: string): string {\r\n  // naive fallback: remove tags, decode basic entities, collapse whitespace\r\n  const noTags = html.replace(/<\\s*br\\s*\\/?>/gi, '\\n').replace(/<[^>]+>/g, ' ')\r\n  const entities = noTags\r\n    .replace(/&nbsp;/g, ' ')\r\n    .replace(/&amp;/g, '&')\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n  return entities.replace(/[\\t\\x0B\\f\\r]+/g, ' ').replace(/\\n\\s*\\n\\s*/g, '\\n\\n').trim()\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,QAAM,gBAAgB;AACtB,QAAM,WAAW,gBAAgB;AACjC,QAAM,aAAa,MAAM,gBAAgB,OAAO,WAAW;AAC3D,QAAM,YAAY,IAAI,OAAO,MAAM,aAAa,GAAG;AAEnD,QAAM,gBAAgB,gCAAS,QAAQ,OAAO;AAC5C,YAAM,UAAU,CAAC;AACjB,UAAI,QAAQ,MAAM,KAAK,MAAM;AAC7B,aAAO,OAAO;AACZ,cAAM,aAAa,CAAC;AACpB,mBAAW,aAAa,MAAM,YAAY,MAAM,CAAC,EAAE;AACnD,cAAM,MAAM,MAAM;AAClB,iBAAS,QAAQ,GAAG,QAAQ,KAAK,SAAS;AACxC,qBAAW,KAAK,MAAM,KAAK,CAAC;AAAA,QAC9B;AACA,gBAAQ,KAAK,UAAU;AACvB,gBAAQ,MAAM,KAAK,MAAM;AAAA,MAC3B;AACA,aAAO;AAAA,IACT,GAdsB;AAgBtB,QAAM,SAAS,gCAAS,QAAQ;AAC9B,YAAM,QAAQ,UAAU,KAAK,MAAM;AACnC,aAAO,EAAE,UAAU,QAAQ,OAAO,UAAU;AAAA,IAC9C,GAHe;AAKf,YAAQ,UAAU,SAAS,GAAG;AAC5B,aAAO,OAAO,MAAM;AAAA,IACtB;AAEA,YAAQ,gBAAgB,SAAS,KAAK;AACpC,aAAO,OAAO,KAAK,GAAG,EAAE,WAAW;AAAA,IACrC;AAOA,YAAQ,QAAQ,SAAS,QAAQ,GAAG,WAAW;AAC7C,UAAI,GAAG;AACL,cAAM,OAAO,OAAO,KAAK,CAAC;AAC1B,cAAM,MAAM,KAAK;AACjB,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAI,cAAc,UAAU;AAC1B,mBAAO,KAAK,CAAC,CAAC,IAAI,CAAE,EAAE,KAAK,CAAC,CAAC,CAAE;AAAA,UACjC,OAAO;AACL,mBAAO,KAAK,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAKA,YAAQ,WAAW,SAAS,GAAG;AAC7B,UAAI,QAAQ,QAAQ,CAAC,GAAG;AACtB,eAAO;AAAA,MACT,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF;AAKA,YAAQ,SAAS;AACjB,YAAQ,gBAAgB;AACxB,YAAQ,aAAa;AAAA;AAAA;;;ACvErB;AAAA;AAAA;AAEA,QAAM,OAAO;AAEb,QAAM,iBAAiB;AAAA,MACrB,wBAAwB;AAAA;AAAA,MACxB,cAAc,CAAC;AAAA,IACjB;AAGA,YAAQ,WAAW,SAAU,SAAS,SAAS;AAC7C,gBAAU,OAAO,OAAO,CAAC,GAAG,gBAAgB,OAAO;AAKnD,YAAM,OAAO,CAAC;AACd,UAAI,WAAW;AAGf,UAAI,cAAc;AAElB,UAAI,QAAQ,CAAC,MAAM,UAAU;AAE3B,kBAAU,QAAQ,OAAO,CAAC;AAAA,MAC5B;AAEA,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAEvC,YAAI,QAAQ,CAAC,MAAM,OAAO,QAAQ,IAAE,CAAC,MAAM,KAAK;AAC9C,eAAG;AACH,cAAI,OAAO,SAAQ,CAAC;AACpB,cAAI,EAAE,IAAK,QAAO;AAAA,QACpB,WAAU,QAAQ,CAAC,MAAM,KAAK;AAG5B,cAAI,cAAc;AAClB;AAEA,cAAI,QAAQ,CAAC,MAAM,KAAK;AACtB,gBAAI,oBAAoB,SAAS,CAAC;AAClC;AAAA,UACF,OAAO;AACL,gBAAI,aAAa;AACjB,gBAAI,QAAQ,CAAC,MAAM,KAAK;AAEtB,2BAAa;AACb;AAAA,YACF;AAEA,gBAAI,UAAU;AACd,mBAAO,IAAI,QAAQ,UACjB,QAAQ,CAAC,MAAM,OACf,QAAQ,CAAC,MAAM,OACf,QAAQ,CAAC,MAAM,OACf,QAAQ,CAAC,MAAM,QACf,QAAQ,CAAC,MAAM,MAAM,KACrB;AACA,yBAAW,QAAQ,CAAC;AAAA,YACtB;AACA,sBAAU,QAAQ,KAAK;AAGvB,gBAAI,QAAQ,QAAQ,SAAS,CAAC,MAAM,KAAK;AAEvC,wBAAU,QAAQ,UAAU,GAAG,QAAQ,SAAS,CAAC;AAEjD;AAAA,YACF;AACA,gBAAI,CAAC,gBAAgB,OAAO,GAAG;AAC7B,kBAAI;AACJ,kBAAI,QAAQ,KAAK,EAAE,WAAW,GAAG;AAC/B,sBAAM;AAAA,cACR,OAAO;AACL,sBAAM,UAAQ,UAAQ;AAAA,cACxB;AACA,qBAAO,eAAe,cAAc,KAAK,yBAAyB,SAAS,CAAC,CAAC;AAAA,YAC/E;AAEA,kBAAM,SAAS,iBAAiB,SAAS,CAAC;AAC1C,gBAAI,WAAW,OAAO;AACpB,qBAAO,eAAe,eAAe,qBAAmB,UAAQ,sBAAsB,yBAAyB,SAAS,CAAC,CAAC;AAAA,YAC5H;AACA,gBAAI,UAAU,OAAO;AACrB,gBAAI,OAAO;AAEX,gBAAI,QAAQ,QAAQ,SAAS,CAAC,MAAM,KAAK;AAEvC,oBAAM,eAAe,IAAI,QAAQ;AACjC,wBAAU,QAAQ,UAAU,GAAG,QAAQ,SAAS,CAAC;AACjD,oBAAM,UAAU,wBAAwB,SAAS,OAAO;AACxD,kBAAI,YAAY,MAAM;AACpB,2BAAW;AAAA,cAEb,OAAO;AAIL,uBAAO,eAAe,QAAQ,IAAI,MAAM,QAAQ,IAAI,KAAK,yBAAyB,SAAS,eAAe,QAAQ,IAAI,IAAI,CAAC;AAAA,cAC7H;AAAA,YACF,WAAW,YAAY;AACrB,kBAAI,CAAC,OAAO,WAAW;AACrB,uBAAO,eAAe,cAAc,kBAAgB,UAAQ,kCAAkC,yBAAyB,SAAS,CAAC,CAAC;AAAA,cACpI,WAAW,QAAQ,KAAK,EAAE,SAAS,GAAG;AACpC,uBAAO,eAAe,cAAc,kBAAgB,UAAQ,gDAAgD,yBAAyB,SAAS,WAAW,CAAC;AAAA,cAC5J,WAAW,KAAK,WAAW,GAAG;AAC5B,uBAAO,eAAe,cAAc,kBAAgB,UAAQ,0BAA0B,yBAAyB,SAAS,WAAW,CAAC;AAAA,cACtI,OAAO;AACL,sBAAM,MAAM,KAAK,IAAI;AACrB,oBAAI,YAAY,IAAI,SAAS;AAC3B,sBAAI,UAAU,yBAAyB,SAAS,IAAI,WAAW;AAC/D,yBAAO;AAAA,oBAAe;AAAA,oBACpB,2BAAyB,IAAI,UAAQ,uBAAqB,QAAQ,OAAK,WAAS,QAAQ,MAAI,+BAA6B,UAAQ;AAAA,oBACjI,yBAAyB,SAAS,WAAW;AAAA,kBAAC;AAAA,gBAClD;AAGA,oBAAI,KAAK,UAAU,GAAG;AACpB,gCAAc;AAAA,gBAChB;AAAA,cACF;AAAA,YACF,OAAO;AACL,oBAAM,UAAU,wBAAwB,SAAS,OAAO;AACxD,kBAAI,YAAY,MAAM;AAIpB,uBAAO,eAAe,QAAQ,IAAI,MAAM,QAAQ,IAAI,KAAK,yBAAyB,SAAS,IAAI,QAAQ,SAAS,QAAQ,IAAI,IAAI,CAAC;AAAA,cACnI;AAGA,kBAAI,gBAAgB,MAAM;AACxB,uBAAO,eAAe,cAAc,uCAAuC,yBAAyB,SAAS,CAAC,CAAC;AAAA,cACjH,WAAU,QAAQ,aAAa,QAAQ,OAAO,MAAM,IAAG;AAAA,cAEvD,OAAO;AACL,qBAAK,KAAK,EAAC,SAAS,YAAW,CAAC;AAAA,cAClC;AACA,yBAAW;AAAA,YACb;AAIA,iBAAK,KAAK,IAAI,QAAQ,QAAQ,KAAK;AACjC,kBAAI,QAAQ,CAAC,MAAM,KAAK;AACtB,oBAAI,QAAQ,IAAI,CAAC,MAAM,KAAK;AAE1B;AACA,sBAAI,oBAAoB,SAAS,CAAC;AAClC;AAAA,gBACF,WAAW,QAAQ,IAAE,CAAC,MAAM,KAAK;AAC/B,sBAAI,OAAO,SAAS,EAAE,CAAC;AACvB,sBAAI,EAAE,IAAK,QAAO;AAAA,gBACpB,OAAM;AACJ;AAAA,gBACF;AAAA,cACF,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC7B,sBAAM,WAAW,kBAAkB,SAAS,CAAC;AAC7C,oBAAI,YAAY;AACd,yBAAO,eAAe,eAAe,6BAA6B,yBAAyB,SAAS,CAAC,CAAC;AACxG,oBAAI;AAAA,cACN,OAAK;AACH,oBAAI,gBAAgB,QAAQ,CAAC,aAAa,QAAQ,CAAC,CAAC,GAAG;AACrD,yBAAO,eAAe,cAAc,yBAAyB,yBAAyB,SAAS,CAAC,CAAC;AAAA,gBACnG;AAAA,cACF;AAAA,YACF;AACA,gBAAI,QAAQ,CAAC,MAAM,KAAK;AACtB;AAAA,YACF;AAAA,UACF;AAAA,QACF,OAAO;AACL,cAAK,aAAa,QAAQ,CAAC,CAAC,GAAG;AAC7B;AAAA,UACF;AACA,iBAAO,eAAe,eAAe,WAAS,QAAQ,CAAC,IAAE,sBAAsB,yBAAyB,SAAS,CAAC,CAAC;AAAA,QACrH;AAAA,MACF;AAEA,UAAI,CAAC,UAAU;AACb,eAAO,eAAe,cAAc,uBAAuB,CAAC;AAAA,MAC9D,WAAU,KAAK,UAAU,GAAG;AACxB,eAAO,eAAe,cAAc,mBAAiB,KAAK,CAAC,EAAE,UAAQ,MAAM,yBAAyB,SAAS,KAAK,CAAC,EAAE,WAAW,CAAC;AAAA,MACrI,WAAU,KAAK,SAAS,GAAG;AACvB,eAAO,eAAe,cAAc,cAChC,KAAK,UAAU,KAAK,IAAI,OAAK,EAAE,OAAO,GAAG,MAAM,CAAC,EAAE,QAAQ,UAAU,EAAE,IACtE,YAAY,EAAC,MAAM,GAAG,KAAK,EAAC,CAAC;AAAA,MACrC;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,aAAa,MAAK;AACzB,aAAO,SAAS,OAAO,SAAS,OAAQ,SAAS,QAAS,SAAS;AAAA,IACrE;AAFS;AAQT,aAAS,OAAO,SAAS,GAAG;AAC1B,YAAM,QAAQ;AACd,aAAO,IAAI,QAAQ,QAAQ,KAAK;AAC9B,YAAI,QAAQ,CAAC,KAAK,OAAO,QAAQ,CAAC,KAAK,KAAK;AAE1C,gBAAM,UAAU,QAAQ,OAAO,OAAO,IAAI,KAAK;AAC/C,cAAI,IAAI,KAAK,YAAY,OAAO;AAC9B,mBAAO,eAAe,cAAc,8DAA8D,yBAAyB,SAAS,CAAC,CAAC;AAAA,UACxI,WAAW,QAAQ,CAAC,KAAK,OAAO,QAAQ,IAAI,CAAC,KAAK,KAAK;AAErD;AACA;AAAA,UACF,OAAO;AACL;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAlBS;AAoBT,aAAS,oBAAoB,SAAS,GAAG;AACvC,UAAI,QAAQ,SAAS,IAAI,KAAK,QAAQ,IAAI,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,MAAM,KAAK;AAE9E,aAAK,KAAK,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACpC,cAAI,QAAQ,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,MAAM,KAAK;AAC1E,iBAAK;AACL;AAAA,UACF;AAAA,QACF;AAAA,MACF,WACE,QAAQ,SAAS,IAAI,KACrB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,KACnB;AACA,YAAI,qBAAqB;AACzB,aAAK,KAAK,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACpC,cAAI,QAAQ,CAAC,MAAM,KAAK;AACtB;AAAA,UACF,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC7B;AACA,gBAAI,uBAAuB,GAAG;AAC5B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,WACE,QAAQ,SAAS,IAAI,KACrB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,KACnB;AACA,aAAK,KAAK,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACpC,cAAI,QAAQ,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,MAAM,KAAK;AAC1E,iBAAK;AACL;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAjDS;AAmDT,QAAM,cAAc;AACpB,QAAM,cAAc;AAOpB,aAAS,iBAAiB,SAAS,GAAG;AACpC,UAAI,UAAU;AACd,UAAI,YAAY;AAChB,UAAI,YAAY;AAChB,aAAO,IAAI,QAAQ,QAAQ,KAAK;AAC9B,YAAI,QAAQ,CAAC,MAAM,eAAe,QAAQ,CAAC,MAAM,aAAa;AAC5D,cAAI,cAAc,IAAI;AACpB,wBAAY,QAAQ,CAAC;AAAA,UACvB,WAAW,cAAc,QAAQ,CAAC,GAAG;AAAA,UAErC,OAAO;AACL,wBAAY;AAAA,UACd;AAAA,QACF,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC7B,cAAI,cAAc,IAAI;AACpB,wBAAY;AACZ;AAAA,UACF;AAAA,QACF;AACA,mBAAW,QAAQ,CAAC;AAAA,MACtB;AACA,UAAI,cAAc,IAAI;AACpB,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,QACL,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACF;AAAA,IACF;AA9BS;AAmCT,QAAM,oBAAoB,IAAI,OAAO,0DAA2D,GAAG;AAInG,aAAS,wBAAwB,SAAS,SAAS;AAKjD,YAAM,UAAU,KAAK,cAAc,SAAS,iBAAiB;AAC7D,YAAM,YAAY,CAAC;AAEnB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,QAAQ,CAAC,EAAE,CAAC,EAAE,WAAW,GAAG;AAE9B,iBAAO,eAAe,eAAe,gBAAc,QAAQ,CAAC,EAAE,CAAC,IAAE,+BAA+B,qBAAqB,QAAQ,CAAC,CAAC,CAAC;AAAA,QAClI,WAAW,QAAQ,CAAC,EAAE,CAAC,MAAM,UAAa,QAAQ,CAAC,EAAE,CAAC,MAAM,QAAW;AACrE,iBAAO,eAAe,eAAe,gBAAc,QAAQ,CAAC,EAAE,CAAC,IAAE,uBAAuB,qBAAqB,QAAQ,CAAC,CAAC,CAAC;AAAA,QAC1H,WAAW,QAAQ,CAAC,EAAE,CAAC,MAAM,UAAa,CAAC,QAAQ,wBAAwB;AAEzE,iBAAO,eAAe,eAAe,wBAAsB,QAAQ,CAAC,EAAE,CAAC,IAAE,qBAAqB,qBAAqB,QAAQ,CAAC,CAAC,CAAC;AAAA,QAChI;AAIA,cAAM,WAAW,QAAQ,CAAC,EAAE,CAAC;AAC7B,YAAI,CAAC,iBAAiB,QAAQ,GAAG;AAC/B,iBAAO,eAAe,eAAe,gBAAc,WAAS,yBAAyB,qBAAqB,QAAQ,CAAC,CAAC,CAAC;AAAA,QACvH;AACA,YAAI,CAAC,UAAU,eAAe,QAAQ,GAAG;AAEvC,oBAAU,QAAQ,IAAI;AAAA,QACxB,OAAO;AACL,iBAAO,eAAe,eAAe,gBAAc,WAAS,kBAAkB,qBAAqB,QAAQ,CAAC,CAAC,CAAC;AAAA,QAChH;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAlCS;AAoCT,aAAS,wBAAwB,SAAS,GAAG;AAC3C,UAAI,KAAK;AACT,UAAI,QAAQ,CAAC,MAAM,KAAK;AACtB;AACA,aAAK;AAAA,MACP;AACA,aAAO,IAAI,QAAQ,QAAQ,KAAK;AAC9B,YAAI,QAAQ,CAAC,MAAM;AACjB,iBAAO;AACT,YAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE;AACtB;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAbS;AAeT,aAAS,kBAAkB,SAAS,GAAG;AAErC;AACA,UAAI,QAAQ,CAAC,MAAM;AACjB,eAAO;AACT,UAAI,QAAQ,CAAC,MAAM,KAAK;AACtB;AACA,eAAO,wBAAwB,SAAS,CAAC;AAAA,MAC3C;AACA,UAAI,QAAQ;AACZ,aAAO,IAAI,QAAQ,QAAQ,KAAK,SAAS;AACvC,YAAI,QAAQ,CAAC,EAAE,MAAM,IAAI,KAAK,QAAQ;AACpC;AACF,YAAI,QAAQ,CAAC,MAAM;AACjB;AACF,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAlBS;AAoBT,aAAS,eAAe,MAAM,SAAS,YAAY;AACjD,aAAO;AAAA,QACL,KAAK;AAAA,UACH;AAAA,UACA,KAAK;AAAA,UACL,MAAM,WAAW,QAAQ;AAAA,UACzB,KAAK,WAAW;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AATS;AAWT,aAAS,iBAAiB,UAAU;AAClC,aAAO,KAAK,OAAO,QAAQ;AAAA,IAC7B;AAFS;AAMT,aAAS,gBAAgB,SAAS;AAChC,aAAO,KAAK,OAAO,OAAO;AAAA,IAC5B;AAFS;AAKT,aAAS,yBAAyB,SAAS,OAAO;AAChD,YAAM,QAAQ,QAAQ,UAAU,GAAG,KAAK,EAAE,MAAM,OAAO;AACvD,aAAO;AAAA,QACL,MAAM,MAAM;AAAA;AAAA,QAGZ,KAAK,MAAM,MAAM,SAAS,CAAC,EAAE,SAAS;AAAA,MACxC;AAAA,IACF;AARS;AAWT,aAAS,qBAAqB,OAAO;AACnC,aAAO,MAAM,aAAa,MAAM,CAAC,EAAE;AAAA,IACrC;AAFS;AAAA;AAAA;;;ACtaT;AAAA;AACA,QAAM,iBAAiB;AAAA,MACnB,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,cAAc;AAAA,MACd,kBAAkB;AAAA,MAClB,gBAAgB;AAAA;AAAA,MAChB,wBAAwB;AAAA;AAAA;AAAA,MAExB,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,YAAY;AAAA;AAAA,MACZ,eAAe;AAAA,MACf,oBAAoB;AAAA,QAClB,KAAK;AAAA,QACL,cAAc;AAAA,QACd,WAAW;AAAA,MACb;AAAA,MACA,mBAAmB,gCAAS,SAAS,KAAK;AACxC,eAAO;AAAA,MACT,GAFmB;AAAA,MAGnB,yBAAyB,gCAAS,UAAU,KAAK;AAC/C,eAAO;AAAA,MACT,GAFyB;AAAA,MAGzB,WAAW,CAAC;AAAA;AAAA,MACZ,sBAAsB;AAAA,MACtB,SAAS,6BAAM,OAAN;AAAA,MACT,iBAAiB;AAAA,MACjB,cAAc,CAAC;AAAA,MACf,iBAAiB;AAAA,MACjB,cAAc;AAAA,MACd,mBAAmB;AAAA,MACnB,cAAc;AAAA,MACd,kBAAkB;AAAA,MAClB,wBAAwB;AAAA,MACxB,WAAW,gCAAS,SAAS,OAAO,OAAM;AACxC,eAAO;AAAA,MACT,GAFW;AAAA;AAAA,IAIf;AAEA,QAAM,eAAe,gCAAS,SAAS;AACnC,aAAO,OAAO,OAAO,CAAC,GAAG,gBAAgB,OAAO;AAAA,IACpD,GAFqB;AAIrB,YAAQ,eAAe;AACvB,YAAQ,iBAAiB;AAAA;AAAA;;;AC/CzB;AAAA;AAAA;AAEA,QAAM,UAAN,MAAa;AAAA,MAFb,OAEa;AAAA;AAAA;AAAA,MACX,YAAY,SAAS;AACnB,aAAK,UAAU;AACf,aAAK,QAAQ,CAAC;AACd,aAAK,IAAI,IAAI,CAAC;AAAA,MAChB;AAAA,MACA,IAAI,KAAI,KAAI;AAEV,YAAG,QAAQ,YAAa,OAAM;AAC9B,aAAK,MAAM,KAAM,EAAC,CAAC,GAAG,GAAG,IAAI,CAAC;AAAA,MAChC;AAAA,MACA,SAAS,MAAM;AACb,YAAG,KAAK,YAAY,YAAa,MAAK,UAAU;AAChD,YAAG,KAAK,IAAI,KAAK,OAAO,KAAK,KAAK,IAAI,CAAC,EAAE,SAAS,GAAE;AAClD,eAAK,MAAM,KAAM,EAAE,CAAC,KAAK,OAAO,GAAG,KAAK,OAAO,CAAC,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;AAAA,QACrE,OAAK;AACH,eAAK,MAAM,KAAM,EAAE,CAAC,KAAK,OAAO,GAAG,KAAK,MAAM,CAAC;AAAA,QACjD;AAAA,MACF;AAAA,IACF;AAGA,WAAO,UAAU;AAAA;AAAA;;;ACxBjB;AAAA;AAAA,QAAM,OAAO;AAGb,aAAS,YAAY,SAAS,GAAE;AAE5B,YAAM,WAAW,CAAC;AAClB,UAAI,QAAQ,IAAI,CAAC,MAAM,OAClB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,OACnB,QAAQ,IAAI,CAAC,MAAM,KACxB;AACI,YAAI,IAAE;AACN,YAAI,qBAAqB;AACzB,YAAI,UAAU,OAAO,UAAU;AAC/B,YAAI,MAAM;AACV,eAAK,IAAE,QAAQ,QAAO,KAAI;AACtB,cAAI,QAAQ,CAAC,MAAM,OAAO,CAAC,SAAS;AAChC,gBAAI,WAAW,SAAS,SAAS,CAAC,GAAE;AAChC,mBAAK;AACL,kBAAI,YAAY;AAChB,eAAC,YAAY,KAAI,CAAC,IAAI,cAAc,SAAQ,IAAE,CAAC;AAC/C,kBAAG,IAAI,QAAQ,GAAG,MAAM;AACpB,yBAAU,mBAAmB,UAAU,CAAE,IAAI;AAAA,kBACzC,MAAO,OAAQ,IAAI,UAAU,KAAI,GAAG;AAAA,kBACpC;AAAA,gBACJ;AAAA,YACR,WACS,WAAW,UAAU,SAAS,CAAC,EAAI,MAAK;AAAA,qBACxC,WAAW,UAAU,SAAS,CAAC,EAAI,MAAK;AAAA,qBACxC,WAAW,WAAW,SAAS,CAAC,EAAG,MAAK;AAAA,qBACxC,UAAmC,WAAU;AAAA,gBACV,OAAM,IAAI,MAAM,iBAAiB;AAE7E;AACA,kBAAM;AAAA,UACV,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC3B,gBAAG,SAAQ;AACP,kBAAI,QAAQ,IAAI,CAAC,MAAM,OAAO,QAAQ,IAAI,CAAC,MAAM,KAAI;AACjD,0BAAU;AACV;AAAA,cACJ;AAAA,YACJ,OAAK;AACD;AAAA,YACJ;AACA,gBAAI,uBAAuB,GAAG;AAC5B;AAAA,YACF;AAAA,UACJ,WAAU,QAAQ,CAAC,MAAM,KAAI;AACzB,sBAAU;AAAA,UACd,OAAK;AACD,mBAAO,QAAQ,CAAC;AAAA,UACpB;AAAA,QACJ;AACA,YAAG,uBAAuB,GAAE;AACxB,gBAAM,IAAI,MAAM,kBAAkB;AAAA,QACtC;AAAA,MACJ,OAAK;AACD,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD;AACA,aAAO,EAAC,UAAU,EAAC;AAAA,IACvB;AA3DS;AA6DT,aAAS,cAAc,SAAQ,GAAE;AAW7B,UAAI,aAAa;AACjB,aAAO,IAAI,QAAQ,WAAW,QAAQ,CAAC,MAAM,OAAO,QAAQ,CAAC,MAAM,MAAO,KAAK;AAG3E,sBAAc,QAAQ,CAAC;AAAA,MAC3B;AACA,mBAAa,WAAW,KAAK;AAC7B,UAAG,WAAW,QAAQ,GAAG,MAAM,GAAI,OAAM,IAAI,MAAM,oCAAoC;AAGvF,YAAM,YAAY,QAAQ,GAAG;AAC7B,UAAI,MAAM;AACV,aAAO,IAAI,QAAQ,UAAU,QAAQ,CAAC,MAAM,WAAY,KAAK;AACzD,eAAO,QAAQ,CAAC;AAAA,MACpB;AACA,aAAO,CAAC,YAAY,KAAK,CAAC;AAAA,IAC9B;AA3BS;AA6BT,aAAS,UAAU,SAAS,GAAE;AAC1B,UAAG,QAAQ,IAAE,CAAC,MAAM,OACpB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,IAAK,QAAO;AAC7B,aAAO;AAAA,IACX;AALS;AAMT,aAAS,SAAS,SAAS,GAAE;AACzB,UAAG,QAAQ,IAAE,CAAC,MAAM,OACpB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,IAAK,QAAO;AAC7B,aAAO;AAAA,IACX;AATS;AAUT,aAAS,UAAU,SAAS,GAAE;AAC1B,UAAG,QAAQ,IAAE,CAAC,MAAM,OACpB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,IAAK,QAAO;AAC7B,aAAO;AAAA,IACX;AAVS;AAYT,aAAS,UAAU,SAAS,GAAE;AAC1B,UAAG,QAAQ,IAAE,CAAC,MAAM,OACpB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,IAAK,QAAO;AAC7B,aAAO;AAAA,IACX;AAVS;AAWT,aAAS,WAAW,SAAS,GAAE;AAC3B,UAAG,QAAQ,IAAE,CAAC,MAAM,OACpB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,OACjB,QAAQ,IAAE,CAAC,MAAM,IAAK,QAAO;AAC7B,aAAO;AAAA,IACX;AAXS;AAaT,aAAS,mBAAmB,MAAK;AAC7B,UAAI,KAAK,OAAO,IAAI;AACvB,eAAO;AAAA;AAEA,cAAM,IAAI,MAAM,uBAAuB,IAAI,EAAE;AAAA,IACrD;AALS;AAOT,WAAO,UAAU;AAAA;AAAA;;;ACxJjB;AAAA;AAAA,QAAM,WAAW;AACjB,QAAM,WAAW;AAKjB,QAAM,WAAW;AAAA,MACb,KAAO;AAAA;AAAA,MAEP,cAAc;AAAA,MACd,cAAc;AAAA,MACd,WAAW;AAAA;AAAA,IAEf;AAEA,aAAS,SAAS,KAAK,UAAU,CAAC,GAAE;AAChC,gBAAU,OAAO,OAAO,CAAC,GAAG,UAAU,OAAQ;AAC9C,UAAG,CAAC,OAAO,OAAO,QAAQ,SAAW,QAAO;AAE5C,UAAI,aAAc,IAAI,KAAK;AAE3B,UAAG,QAAQ,aAAa,UAAa,QAAQ,SAAS,KAAK,UAAU,EAAG,QAAO;AAAA,eACvE,QAAM,IAAK,QAAO;AAAA,eACjB,QAAQ,OAAO,SAAS,KAAK,UAAU,GAAG;AAC/C,eAAO,UAAU,YAAY,EAAE;AAAA,MAGnC,WAAU,WAAW,OAAO,MAAM,MAAK,IAAI;AACvC,cAAM,WAAW,WAAW,MAAM,mDAAmD;AAErF,YAAG,UAAS;AAER,cAAG,QAAQ,cAAa;AACpB,0BAAc,SAAS,CAAC,KAAK,MAAM,SAAS,CAAC;AAAA,UACjD,OAAK;AACD,gBAAG,SAAS,CAAC,MAAM,OAAO,SAAS,CAAC,EAAE,CAAC,MAAK,KAAI;AAAA,YAChD,OAAK;AACD,qBAAO;AAAA,YACX;AAAA,UACJ;AACA,iBAAO,QAAQ,YAAY,OAAO,UAAU,IAAI;AAAA,QACpD,OAAK;AACD,iBAAO;AAAA,QACX;AAAA,MAGJ,OAAK;AAED,cAAM,QAAQ,SAAS,KAAK,UAAU;AAEtC,YAAG,OAAM;AACL,gBAAM,OAAO,MAAM,CAAC;AACpB,gBAAM,eAAe,MAAM,CAAC;AAC5B,cAAI,oBAAoB,UAAU,MAAM,CAAC,CAAC;AAG1C,cAAG,CAAC,QAAQ,gBAAgB,aAAa,SAAS,KAAK,QAAQ,WAAW,CAAC,MAAM,IAAK,QAAO;AAAA,mBACrF,CAAC,QAAQ,gBAAgB,aAAa,SAAS,KAAK,CAAC,QAAQ,WAAW,CAAC,MAAM,IAAK,QAAO;AAAA,mBAC3F,QAAQ,gBAAgB,iBAAe,IAAK,QAAO;AAAA,eAEvD;AACA,kBAAM,MAAM,OAAO,UAAU;AAC7B,kBAAM,SAAS,KAAK;AAEpB,gBAAG,OAAO,OAAO,MAAM,MAAM,IAAG;AAC5B,kBAAG,QAAQ,UAAW,QAAO;AAAA,kBACxB,QAAO;AAAA,YAChB,WAAS,WAAW,QAAQ,GAAG,MAAM,IAAG;AACpC,kBAAG,WAAW,OAAQ,sBAAsB,GAAM,QAAO;AAAA,uBACjD,WAAW,kBAAmB,QAAO;AAAA,uBACpC,QAAQ,WAAW,MAAI,kBAAmB,QAAO;AAAA,kBACrD,QAAO;AAAA,YAChB;AAEA,gBAAG,cAAa;AACZ,qBAAQ,sBAAsB,UAAY,OAAK,sBAAsB,SAAU,MAAM;AAAA,YACzF,OAAO;AACH,qBAAQ,eAAe,UAAY,eAAe,OAAK,SAAU,MAAM;AAAA,YAC3E;AAAA,UACJ;AAAA,QACJ,OAAK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AArES;AA4ET,aAAS,UAAU,QAAO;AACtB,UAAG,UAAU,OAAO,QAAQ,GAAG,MAAM,IAAG;AACpC,iBAAS,OAAO,QAAQ,OAAO,EAAE;AACjC,YAAG,WAAW,IAAM,UAAS;AAAA,iBACrB,OAAO,CAAC,MAAM,IAAM,UAAS,MAAI;AAAA,iBACjC,OAAO,OAAO,SAAO,CAAC,MAAM,IAAM,UAAS,OAAO,OAAO,GAAE,OAAO,SAAO,CAAC;AAClF,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AATS;AAWT,aAAS,UAAU,QAAQ,MAAK;AAE5B,UAAG,SAAU,QAAO,SAAS,QAAQ,IAAI;AAAA,eACjC,OAAO,SAAU,QAAO,OAAO,SAAS,QAAQ,IAAI;AAAA,eACpD,UAAU,OAAO,SAAU,QAAO,OAAO,SAAS,QAAQ,IAAI;AAAA,UACjE,OAAM,IAAI,MAAM,8DAA8D;AAAA,IACvF;AANS;AAQT,WAAO,UAAU;AAAA;AAAA;;;AC9GjB;AAAA;AAAA,aAAS,sBAAsB,kBAAkB;AAC7C,UAAI,OAAO,qBAAqB,YAAY;AACxC,eAAO;AAAA,MACX;AACA,UAAI,MAAM,QAAQ,gBAAgB,GAAG;AACjC,eAAO,CAAC,aAAa;AACjB,qBAAW,WAAW,kBAAkB;AACpC,gBAAI,OAAO,YAAY,YAAY,aAAa,SAAS;AACrD,qBAAO;AAAA,YACX;AACA,gBAAI,mBAAmB,UAAU,QAAQ,KAAK,QAAQ,GAAG;AACrD,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,MAAM;AAAA,IACjB;AAjBS;AAmBT,WAAO,UAAU;AAAA;AAAA;;;ACnBjB;AAAA;AAAA;AAGA,QAAM,OAAO;AACb,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,WAAW;AACjB,QAAM,wBAAwB;AAS9B,QAAM,mBAAN,MAAsB;AAAA,MAhBtB,OAgBsB;AAAA;AAAA;AAAA,MACpB,YAAY,SAAQ;AAClB,aAAK,UAAU;AACf,aAAK,cAAc;AACnB,aAAK,gBAAgB,CAAC;AACtB,aAAK,kBAAkB,CAAC;AACxB,aAAK,eAAe;AAAA,UAClB,QAAS,EAAE,OAAO,sBAAsB,KAAM,IAAG;AAAA,UACjD,MAAO,EAAE,OAAO,oBAAoB,KAAM,IAAG;AAAA,UAC7C,MAAO,EAAE,OAAO,oBAAoB,KAAM,IAAG;AAAA,UAC7C,QAAS,EAAE,OAAO,sBAAsB,KAAM,IAAI;AAAA,QACpD;AACA,aAAK,YAAY,EAAE,OAAO,qBAAqB,KAAM,IAAG;AACxD,aAAK,eAAe;AAAA,UAClB,SAAS,EAAE,OAAO,kBAAkB,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAM7C,QAAS,EAAE,OAAO,kBAAkB,KAAK,OAAI;AAAA,UAC7C,SAAU,EAAE,OAAO,mBAAmB,KAAK,OAAI;AAAA,UAC/C,OAAQ,EAAE,OAAO,iBAAiB,KAAK,OAAI;AAAA,UAC3C,QAAS,EAAE,OAAO,mBAAmB,KAAK,SAAI;AAAA,UAC9C,aAAc,EAAE,OAAO,kBAAkB,KAAK,OAAI;AAAA,UAClD,OAAQ,EAAE,OAAO,iBAAiB,KAAK,OAAI;AAAA,UAC3C,OAAQ,EAAE,OAAO,kBAAkB,KAAK,SAAI;AAAA,UAC5C,WAAW,EAAE,OAAO,oBAAoB,KAAM,wBAAC,GAAG,QAAQ,OAAO,aAAa,OAAO,SAAS,KAAK,EAAE,CAAC,GAAxD,OAA0D;AAAA,UACxG,WAAW,EAAE,OAAO,2BAA2B,KAAM,wBAAC,GAAG,QAAQ,OAAO,aAAa,OAAO,SAAS,KAAK,EAAE,CAAC,GAAxD,OAA0D;AAAA,QACjH;AACA,aAAK,sBAAsB;AAC3B,aAAK,WAAW;AAChB,aAAK,gBAAgB;AACrB,aAAK,mBAAmB;AACxB,aAAK,qBAAqB;AAC1B,aAAK,eAAe;AACpB,aAAK,uBAAuB;AAC5B,aAAK,mBAAmB;AACxB,aAAK,sBAAsB;AAC3B,aAAK,WAAW;AAChB,aAAK,qBAAqB,sBAAsB,KAAK,QAAQ,gBAAgB;AAAA,MAC/E;AAAA,IAEF;AAEA,aAAS,oBAAoB,kBAAiB;AAC5C,YAAM,UAAU,OAAO,KAAK,gBAAgB;AAC5C,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,cAAM,MAAM,QAAQ,CAAC;AACrB,aAAK,aAAa,GAAG,IAAI;AAAA,UACtB,OAAO,IAAI,OAAO,MAAI,MAAI,KAAI,GAAG;AAAA,UACjC,KAAM,iBAAiB,GAAG;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AATS;AAoBT,aAAS,cAAc,KAAK,SAAS,OAAO,UAAU,eAAe,YAAY,gBAAgB;AAC/F,UAAI,QAAQ,QAAW;AACrB,YAAI,KAAK,QAAQ,cAAc,CAAC,UAAU;AACxC,gBAAM,IAAI,KAAK;AAAA,QACjB;AACA,YAAG,IAAI,SAAS,GAAE;AAChB,cAAG,CAAC,eAAgB,OAAM,KAAK,qBAAqB,GAAG;AAEvD,gBAAM,SAAS,KAAK,QAAQ,kBAAkB,SAAS,KAAK,OAAO,eAAe,UAAU;AAC5F,cAAG,WAAW,QAAQ,WAAW,QAAU;AAEzC,mBAAO;AAAA,UACT,WAAS,OAAO,WAAW,OAAO,OAAO,WAAW,KAAI;AAEtD,mBAAO;AAAA,UACT,WAAS,KAAK,QAAQ,YAAW;AAC/B,mBAAO,WAAW,KAAK,KAAK,QAAQ,eAAe,KAAK,QAAQ,kBAAkB;AAAA,UACpF,OAAK;AACH,kBAAM,aAAa,IAAI,KAAK;AAC5B,gBAAG,eAAe,KAAI;AACpB,qBAAO,WAAW,KAAK,KAAK,QAAQ,eAAe,KAAK,QAAQ,kBAAkB;AAAA,YACpF,OAAK;AACH,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AA3BS;AA6BT,aAAS,iBAAiB,SAAS;AACjC,UAAI,KAAK,QAAQ,gBAAgB;AAC/B,cAAM,OAAO,QAAQ,MAAM,GAAG;AAC9B,cAAM,SAAS,QAAQ,OAAO,CAAC,MAAM,MAAM,MAAM;AACjD,YAAI,KAAK,CAAC,MAAM,SAAS;AACvB,iBAAO;AAAA,QACT;AACA,YAAI,KAAK,WAAW,GAAG;AACrB,oBAAU,SAAS,KAAK,CAAC;AAAA,QAC3B;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAZS;AAgBT,QAAM,YAAY,IAAI,OAAO,+CAAgD,IAAI;AAEjF,aAAS,mBAAmB,SAAS,OAAO,SAAS;AACnD,UAAI,KAAK,QAAQ,qBAAqB,QAAQ,OAAO,YAAY,UAAU;AAIzE,cAAM,UAAU,KAAK,cAAc,SAAS,SAAS;AACrD,cAAM,MAAM,QAAQ;AACpB,cAAM,QAAQ,CAAC;AACf,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,gBAAM,WAAW,KAAK,iBAAiB,QAAQ,CAAC,EAAE,CAAC,CAAC;AACpD,cAAI,KAAK,mBAAmB,UAAU,KAAK,GAAG;AAC5C;AAAA,UACF;AACA,cAAI,SAAS,QAAQ,CAAC,EAAE,CAAC;AACzB,cAAI,QAAQ,KAAK,QAAQ,sBAAsB;AAC/C,cAAI,SAAS,QAAQ;AACnB,gBAAI,KAAK,QAAQ,wBAAwB;AACvC,sBAAQ,KAAK,QAAQ,uBAAuB,KAAK;AAAA,YACnD;AACA,gBAAG,UAAU,YAAa,SAAS;AACnC,gBAAI,WAAW,QAAW;AACxB,kBAAI,KAAK,QAAQ,YAAY;AAC3B,yBAAS,OAAO,KAAK;AAAA,cACvB;AACA,uBAAS,KAAK,qBAAqB,MAAM;AACzC,oBAAM,SAAS,KAAK,QAAQ,wBAAwB,UAAU,QAAQ,KAAK;AAC3E,kBAAG,WAAW,QAAQ,WAAW,QAAU;AAEzC,sBAAM,KAAK,IAAI;AAAA,cACjB,WAAS,OAAO,WAAW,OAAO,UAAU,WAAW,QAAO;AAE5D,sBAAM,KAAK,IAAI;AAAA,cACjB,OAAK;AAEH,sBAAM,KAAK,IAAI;AAAA,kBACb;AAAA,kBACA,KAAK,QAAQ;AAAA,kBACb,KAAK,QAAQ;AAAA,gBACf;AAAA,cACF;AAAA,YACF,WAAW,KAAK,QAAQ,wBAAwB;AAC9C,oBAAM,KAAK,IAAI;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AACA,YAAI,CAAC,OAAO,KAAK,KAAK,EAAE,QAAQ;AAC9B;AAAA,QACF;AACA,YAAI,KAAK,QAAQ,qBAAqB;AACpC,gBAAM,iBAAiB,CAAC;AACxB,yBAAe,KAAK,QAAQ,mBAAmB,IAAI;AACnD,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAvDS;AAyDT,QAAM,WAAW,gCAAS,SAAS;AACjC,gBAAU,QAAQ,QAAQ,UAAU,IAAI;AACxC,YAAM,SAAS,IAAI,QAAQ,MAAM;AACjC,UAAI,cAAc;AAClB,UAAI,WAAW;AACf,UAAI,QAAQ;AACZ,eAAQ,IAAE,GAAG,IAAG,QAAQ,QAAQ,KAAI;AAClC,cAAM,KAAK,QAAQ,CAAC;AACpB,YAAG,OAAO,KAAI;AAGZ,cAAI,QAAQ,IAAE,CAAC,MAAM,KAAK;AACxB,kBAAM,aAAa,iBAAiB,SAAS,KAAK,GAAG,4BAA4B;AACjF,gBAAI,UAAU,QAAQ,UAAU,IAAE,GAAE,UAAU,EAAE,KAAK;AAErD,gBAAG,KAAK,QAAQ,gBAAe;AAC7B,oBAAM,aAAa,QAAQ,QAAQ,GAAG;AACtC,kBAAG,eAAe,IAAG;AACnB,0BAAU,QAAQ,OAAO,aAAW,CAAC;AAAA,cACvC;AAAA,YACF;AAEA,gBAAG,KAAK,QAAQ,kBAAkB;AAChC,wBAAU,KAAK,QAAQ,iBAAiB,OAAO;AAAA,YACjD;AAEA,gBAAG,aAAY;AACb,yBAAW,KAAK,oBAAoB,UAAU,aAAa,KAAK;AAAA,YAClE;AAGA,kBAAM,cAAc,MAAM,UAAU,MAAM,YAAY,GAAG,IAAE,CAAC;AAC5D,gBAAG,WAAW,KAAK,QAAQ,aAAa,QAAQ,OAAO,MAAM,IAAI;AAC/D,oBAAM,IAAI,MAAM,kDAAkD,OAAO,GAAG;AAAA,YAC9E;AACA,gBAAI,YAAY;AAChB,gBAAG,eAAe,KAAK,QAAQ,aAAa,QAAQ,WAAW,MAAM,IAAI;AACvE,0BAAY,MAAM,YAAY,KAAK,MAAM,YAAY,GAAG,IAAE,CAAC;AAC3D,mBAAK,cAAc,IAAI;AAAA,YACzB,OAAK;AACH,0BAAY,MAAM,YAAY,GAAG;AAAA,YACnC;AACA,oBAAQ,MAAM,UAAU,GAAG,SAAS;AAEpC,0BAAc,KAAK,cAAc,IAAI;AACrC,uBAAW;AACX,gBAAI;AAAA,UACN,WAAW,QAAQ,IAAE,CAAC,MAAM,KAAK;AAE/B,gBAAI,UAAU,WAAW,SAAQ,GAAG,OAAO,IAAI;AAC/C,gBAAG,CAAC,QAAS,OAAM,IAAI,MAAM,uBAAuB;AAEpD,uBAAW,KAAK,oBAAoB,UAAU,aAAa,KAAK;AAChE,gBAAK,KAAK,QAAQ,qBAAqB,QAAQ,YAAY,UAAW,KAAK,QAAQ,cAAa;AAAA,YAEhG,OAAK;AAEH,oBAAM,YAAY,IAAI,QAAQ,QAAQ,OAAO;AAC7C,wBAAU,IAAI,KAAK,QAAQ,cAAc,EAAE;AAE3C,kBAAG,QAAQ,YAAY,QAAQ,UAAU,QAAQ,gBAAe;AAC9D,0BAAU,IAAI,IAAI,KAAK,mBAAmB,QAAQ,QAAQ,OAAO,QAAQ,OAAO;AAAA,cAClF;AACA,mBAAK,SAAS,aAAa,WAAW,KAAK;AAAA,YAE7C;AAGA,gBAAI,QAAQ,aAAa;AAAA,UAC3B,WAAU,QAAQ,OAAO,IAAI,GAAG,CAAC,MAAM,OAAO;AAC5C,kBAAM,WAAW,iBAAiB,SAAS,OAAO,IAAE,GAAG,wBAAwB;AAC/E,gBAAG,KAAK,QAAQ,iBAAgB;AAC9B,oBAAM,UAAU,QAAQ,UAAU,IAAI,GAAG,WAAW,CAAC;AAErD,yBAAW,KAAK,oBAAoB,UAAU,aAAa,KAAK;AAEhE,0BAAY,IAAI,KAAK,QAAQ,iBAAiB,CAAE,EAAE,CAAC,KAAK,QAAQ,YAAY,GAAI,QAAQ,CAAE,CAAC;AAAA,YAC7F;AACA,gBAAI;AAAA,UACN,WAAW,QAAQ,OAAO,IAAI,GAAG,CAAC,MAAM,MAAM;AAC5C,kBAAM,SAAS,YAAY,SAAS,CAAC;AACrC,iBAAK,kBAAkB,OAAO;AAC9B,gBAAI,OAAO;AAAA,UACb,WAAS,QAAQ,OAAO,IAAI,GAAG,CAAC,MAAM,MAAM;AAC1C,kBAAM,aAAa,iBAAiB,SAAS,OAAO,GAAG,sBAAsB,IAAI;AACjF,kBAAM,SAAS,QAAQ,UAAU,IAAI,GAAE,UAAU;AAEjD,uBAAW,KAAK,oBAAoB,UAAU,aAAa,KAAK;AAEhE,gBAAI,MAAM,KAAK,cAAc,QAAQ,YAAY,SAAS,OAAO,MAAM,OAAO,MAAM,IAAI;AACxF,gBAAG,OAAO,OAAW,OAAM;AAG3B,gBAAG,KAAK,QAAQ,eAAc;AAC5B,0BAAY,IAAI,KAAK,QAAQ,eAAe,CAAE,EAAE,CAAC,KAAK,QAAQ,YAAY,GAAI,OAAO,CAAE,CAAC;AAAA,YAC1F,OAAK;AACH,0BAAY,IAAI,KAAK,QAAQ,cAAc,GAAG;AAAA,YAChD;AAEA,gBAAI,aAAa;AAAA,UACnB,OAAM;AACJ,gBAAI,SAAS,WAAW,SAAQ,GAAG,KAAK,QAAQ,cAAc;AAC9D,gBAAI,UAAS,OAAO;AACpB,kBAAM,aAAa,OAAO;AAC1B,gBAAI,SAAS,OAAO;AACpB,gBAAI,iBAAiB,OAAO;AAC5B,gBAAI,aAAa,OAAO;AAExB,gBAAI,KAAK,QAAQ,kBAAkB;AACjC,wBAAU,KAAK,QAAQ,iBAAiB,OAAO;AAAA,YACjD;AAGA,gBAAI,eAAe,UAAU;AAC3B,kBAAG,YAAY,YAAY,QAAO;AAEhC,2BAAW,KAAK,oBAAoB,UAAU,aAAa,OAAO,KAAK;AAAA,cACzE;AAAA,YACF;AAGA,kBAAM,UAAU;AAChB,gBAAG,WAAW,KAAK,QAAQ,aAAa,QAAQ,QAAQ,OAAO,MAAM,IAAI;AACvE,4BAAc,KAAK,cAAc,IAAI;AACrC,sBAAQ,MAAM,UAAU,GAAG,MAAM,YAAY,GAAG,CAAC;AAAA,YACnD;AACA,gBAAG,YAAY,OAAO,SAAQ;AAC5B,uBAAS,QAAQ,MAAM,UAAU;AAAA,YACnC;AACA,gBAAI,KAAK,aAAa,KAAK,QAAQ,WAAW,OAAO,OAAO,GAAG;AAC7D,kBAAI,aAAa;AAEjB,kBAAG,OAAO,SAAS,KAAK,OAAO,YAAY,GAAG,MAAM,OAAO,SAAS,GAAE;AACpE,oBAAG,QAAQ,QAAQ,SAAS,CAAC,MAAM,KAAI;AACrC,4BAAU,QAAQ,OAAO,GAAG,QAAQ,SAAS,CAAC;AAC9C,0BAAQ,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC;AACxC,2BAAS;AAAA,gBACX,OAAK;AACH,2BAAS,OAAO,OAAO,GAAG,OAAO,SAAS,CAAC;AAAA,gBAC7C;AACA,oBAAI,OAAO;AAAA,cACb,WAEQ,KAAK,QAAQ,aAAa,QAAQ,OAAO,MAAM,IAAG;AAExD,oBAAI,OAAO;AAAA,cACb,OAEI;AAEF,sBAAMA,UAAS,KAAK,iBAAiB,SAAS,YAAY,aAAa,CAAC;AACxE,oBAAG,CAACA,QAAQ,OAAM,IAAI,MAAM,qBAAqB,UAAU,EAAE;AAC7D,oBAAIA,QAAO;AACX,6BAAaA,QAAO;AAAA,cACtB;AAEA,oBAAM,YAAY,IAAI,QAAQ,OAAO;AACrC,kBAAG,YAAY,UAAU,gBAAe;AACtC,0BAAU,IAAI,IAAI,KAAK,mBAAmB,QAAQ,OAAO,OAAO;AAAA,cAClE;AACA,kBAAG,YAAY;AACb,6BAAa,KAAK,cAAc,YAAY,SAAS,OAAO,MAAM,gBAAgB,MAAM,IAAI;AAAA,cAC9F;AAEA,sBAAQ,MAAM,OAAO,GAAG,MAAM,YAAY,GAAG,CAAC;AAC9C,wBAAU,IAAI,KAAK,QAAQ,cAAc,UAAU;AAEnD,mBAAK,SAAS,aAAa,WAAW,KAAK;AAAA,YAC7C,OAAK;AAEH,kBAAG,OAAO,SAAS,KAAK,OAAO,YAAY,GAAG,MAAM,OAAO,SAAS,GAAE;AACpE,oBAAG,QAAQ,QAAQ,SAAS,CAAC,MAAM,KAAI;AACrC,4BAAU,QAAQ,OAAO,GAAG,QAAQ,SAAS,CAAC;AAC9C,0BAAQ,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC;AACxC,2BAAS;AAAA,gBACX,OAAK;AACH,2BAAS,OAAO,OAAO,GAAG,OAAO,SAAS,CAAC;AAAA,gBAC7C;AAEA,oBAAG,KAAK,QAAQ,kBAAkB;AAChC,4BAAU,KAAK,QAAQ,iBAAiB,OAAO;AAAA,gBACjD;AAEA,sBAAM,YAAY,IAAI,QAAQ,OAAO;AACrC,oBAAG,YAAY,UAAU,gBAAe;AACtC,4BAAU,IAAI,IAAI,KAAK,mBAAmB,QAAQ,OAAO,OAAO;AAAA,gBAClE;AACA,qBAAK,SAAS,aAAa,WAAW,KAAK;AAC3C,wBAAQ,MAAM,OAAO,GAAG,MAAM,YAAY,GAAG,CAAC;AAAA,cAChD,OAEI;AACF,sBAAM,YAAY,IAAI,QAAS,OAAO;AACtC,qBAAK,cAAc,KAAK,WAAW;AAEnC,oBAAG,YAAY,UAAU,gBAAe;AACtC,4BAAU,IAAI,IAAI,KAAK,mBAAmB,QAAQ,OAAO,OAAO;AAAA,gBAClE;AACA,qBAAK,SAAS,aAAa,WAAW,KAAK;AAC3C,8BAAc;AAAA,cAChB;AACA,yBAAW;AACX,kBAAI;AAAA,YACN;AAAA,UACF;AAAA,QACF,OAAK;AACH,sBAAY,QAAQ,CAAC;AAAA,QACvB;AAAA,MACF;AACA,aAAO,OAAO;AAAA,IAChB,GAlNiB;AAoNjB,aAAS,SAAS,aAAa,WAAW,OAAM;AAC9C,YAAM,SAAS,KAAK,QAAQ,UAAU,UAAU,SAAS,OAAO,UAAU,IAAI,CAAC;AAC/E,UAAG,WAAW,OAAM;AAAA,MACpB,WAAS,OAAO,WAAW,UAAS;AAClC,kBAAU,UAAU;AACpB,oBAAY,SAAS,SAAS;AAAA,MAChC,OAAK;AACH,oBAAY,SAAS,SAAS;AAAA,MAChC;AAAA,IACF;AATS;AAWT,QAAM,uBAAuB,gCAAS,KAAI;AAExC,UAAG,KAAK,QAAQ,iBAAgB;AAC9B,iBAAQ,cAAc,KAAK,iBAAgB;AACzC,gBAAM,SAAS,KAAK,gBAAgB,UAAU;AAC9C,gBAAM,IAAI,QAAS,OAAO,MAAM,OAAO,GAAG;AAAA,QAC5C;AACA,iBAAQ,cAAc,KAAK,cAAa;AACtC,gBAAM,SAAS,KAAK,aAAa,UAAU;AAC3C,gBAAM,IAAI,QAAS,OAAO,OAAO,OAAO,GAAG;AAAA,QAC7C;AACA,YAAG,KAAK,QAAQ,cAAa;AAC3B,mBAAQ,cAAc,KAAK,cAAa;AACtC,kBAAM,SAAS,KAAK,aAAa,UAAU;AAC3C,kBAAM,IAAI,QAAS,OAAO,OAAO,OAAO,GAAG;AAAA,UAC7C;AAAA,QACF;AACA,cAAM,IAAI,QAAS,KAAK,UAAU,OAAO,KAAK,UAAU,GAAG;AAAA,MAC7D;AACA,aAAO;AAAA,IACT,GApB6B;AAqB7B,aAAS,oBAAoB,UAAU,aAAa,OAAO,YAAY;AACrE,UAAI,UAAU;AACZ,YAAG,eAAe,OAAW,cAAa,YAAY,MAAM,WAAW;AAEvE,mBAAW,KAAK;AAAA,UAAc;AAAA,UAC5B,YAAY;AAAA,UACZ;AAAA,UACA;AAAA,UACA,YAAY,IAAI,IAAI,OAAO,KAAK,YAAY,IAAI,CAAC,EAAE,WAAW,IAAI;AAAA,UAClE;AAAA,QAAU;AAEZ,YAAI,aAAa,UAAa,aAAa;AACzC,sBAAY,IAAI,KAAK,QAAQ,cAAc,QAAQ;AACrD,mBAAW;AAAA,MACb;AACA,aAAO;AAAA,IACT;AAhBS;AAyBT,aAAS,aAAa,WAAW,OAAO,gBAAe;AACrD,YAAM,cAAc,OAAO;AAC3B,iBAAW,gBAAgB,WAAW;AACpC,cAAM,cAAc,UAAU,YAAY;AAC1C,YAAI,gBAAgB,eAAe,UAAU,YAAe,QAAO;AAAA,MACrE;AACA,aAAO;AAAA,IACT;AAPS;AAeT,aAAS,uBAAuB,SAAS,GAAG,cAAc,KAAI;AAC5D,UAAI;AACJ,UAAI,SAAS;AACb,eAAS,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,SAAS;AACnD,YAAI,KAAK,QAAQ,KAAK;AACtB,YAAI,cAAc;AACd,cAAI,OAAO,aAAc,gBAAe;AAAA,QAC5C,WAAW,OAAO,OAAO,OAAO,KAAK;AACjC,yBAAe;AAAA,QACnB,WAAW,OAAO,YAAY,CAAC,GAAG;AAChC,cAAG,YAAY,CAAC,GAAE;AAChB,gBAAG,QAAQ,QAAQ,CAAC,MAAM,YAAY,CAAC,GAAE;AACvC,qBAAO;AAAA,gBACL,MAAM;AAAA,gBACN;AAAA,cACF;AAAA,YACF;AAAA,UACF,OAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,QACF,WAAW,OAAO,KAAM;AACtB,eAAK;AAAA,QACP;AACA,kBAAU;AAAA,MACZ;AAAA,IACF;AA5BS;AA8BT,aAAS,iBAAiB,SAAS,KAAK,GAAG,QAAO;AAChD,YAAM,eAAe,QAAQ,QAAQ,KAAK,CAAC;AAC3C,UAAG,iBAAiB,IAAG;AACrB,cAAM,IAAI,MAAM,MAAM;AAAA,MACxB,OAAK;AACH,eAAO,eAAe,IAAI,SAAS;AAAA,MACrC;AAAA,IACF;AAPS;AAST,aAAS,WAAW,SAAQ,GAAG,gBAAgB,cAAc,KAAI;AAC/D,YAAM,SAAS,uBAAuB,SAAS,IAAE,GAAG,WAAW;AAC/D,UAAG,CAAC,OAAQ;AACZ,UAAI,SAAS,OAAO;AACpB,YAAM,aAAa,OAAO;AAC1B,YAAM,iBAAiB,OAAO,OAAO,IAAI;AACzC,UAAI,UAAU;AACd,UAAI,iBAAiB;AACrB,UAAG,mBAAmB,IAAG;AACvB,kBAAU,OAAO,UAAU,GAAG,cAAc;AAC5C,iBAAS,OAAO,UAAU,iBAAiB,CAAC,EAAE,UAAU;AAAA,MAC1D;AAEA,YAAM,aAAa;AACnB,UAAG,gBAAe;AAChB,cAAM,aAAa,QAAQ,QAAQ,GAAG;AACtC,YAAG,eAAe,IAAG;AACnB,oBAAU,QAAQ,OAAO,aAAW,CAAC;AACrC,2BAAiB,YAAY,OAAO,KAAK,OAAO,aAAa,CAAC;AAAA,QAChE;AAAA,MACF;AAEA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AA7BS;AAoCT,aAAS,iBAAiB,SAAS,SAAS,GAAE;AAC5C,YAAM,aAAa;AAEnB,UAAI,eAAe;AAEnB,aAAO,IAAI,QAAQ,QAAQ,KAAK;AAC9B,YAAI,QAAQ,CAAC,MAAM,KAAI;AACrB,cAAI,QAAQ,IAAE,CAAC,MAAM,KAAK;AACtB,kBAAM,aAAa,iBAAiB,SAAS,KAAK,GAAG,GAAG,OAAO,gBAAgB;AAC/E,gBAAI,eAAe,QAAQ,UAAU,IAAE,GAAE,UAAU,EAAE,KAAK;AAC1D,gBAAG,iBAAiB,SAAQ;AAC1B;AACA,kBAAI,iBAAiB,GAAG;AACtB,uBAAO;AAAA,kBACL,YAAY,QAAQ,UAAU,YAAY,CAAC;AAAA,kBAC3C,GAAI;AAAA,gBACN;AAAA,cACF;AAAA,YACF;AACA,gBAAE;AAAA,UACJ,WAAU,QAAQ,IAAE,CAAC,MAAM,KAAK;AAC9B,kBAAM,aAAa,iBAAiB,SAAS,MAAM,IAAE,GAAG,yBAAyB;AACjF,gBAAE;AAAA,UACJ,WAAU,QAAQ,OAAO,IAAI,GAAG,CAAC,MAAM,OAAO;AAC5C,kBAAM,aAAa,iBAAiB,SAAS,OAAO,IAAE,GAAG,yBAAyB;AAClF,gBAAE;AAAA,UACJ,WAAU,QAAQ,OAAO,IAAI,GAAG,CAAC,MAAM,MAAM;AAC3C,kBAAM,aAAa,iBAAiB,SAAS,OAAO,GAAG,yBAAyB,IAAI;AACpF,gBAAE;AAAA,UACJ,OAAO;AACL,kBAAM,UAAU,WAAW,SAAS,GAAG,GAAG;AAE1C,gBAAI,SAAS;AACX,oBAAM,cAAc,WAAW,QAAQ;AACvC,kBAAI,gBAAgB,WAAW,QAAQ,OAAO,QAAQ,OAAO,SAAO,CAAC,MAAM,KAAK;AAC9E;AAAA,cACF;AACA,kBAAE,QAAQ;AAAA,YACZ;AAAA,UACF;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AA1CS;AA4CT,aAAS,WAAW,KAAK,aAAa,SAAS;AAC7C,UAAI,eAAe,OAAO,QAAQ,UAAU;AAE1C,cAAM,SAAS,IAAI,KAAK;AACxB,YAAG,WAAW,OAAS,QAAO;AAAA,iBACtB,WAAW,QAAU,QAAO;AAAA,YAC/B,QAAO,SAAS,KAAK,OAAO;AAAA,MACnC,OAAO;AACL,YAAI,KAAK,QAAQ,GAAG,GAAG;AACrB,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAdS;AAiBT,WAAO,UAAU;AAAA;AAAA;;;AC7lBjB;AAAA;AAAA;AAQA,aAAS,SAAS,MAAM,SAAQ;AAC9B,aAAO,SAAU,MAAM,OAAO;AAAA,IAChC;AAFS;AAWT,aAAS,SAAS,KAAK,SAAS,OAAM;AACpC,UAAI;AACJ,YAAM,gBAAgB,CAAC;AACvB,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,cAAM,SAAS,IAAI,CAAC;AACpB,cAAM,WAAW,SAAS,MAAM;AAChC,YAAI,WAAW;AACf,YAAG,UAAU,OAAW,YAAW;AAAA,YAC9B,YAAW,QAAQ,MAAM;AAE9B,YAAG,aAAa,QAAQ,cAAa;AACnC,cAAG,SAAS,OAAW,QAAO,OAAO,QAAQ;AAAA,cACxC,SAAQ,KAAK,OAAO,QAAQ;AAAA,QACnC,WAAS,aAAa,QAAU;AAC9B;AAAA,QACF,WAAS,OAAO,QAAQ,GAAE;AAExB,cAAI,MAAM,SAAS,OAAO,QAAQ,GAAG,SAAS,QAAQ;AACtD,gBAAM,SAAS,UAAU,KAAK,OAAO;AAErC,cAAG,OAAO,IAAI,GAAE;AACd,6BAAkB,KAAK,OAAO,IAAI,GAAG,UAAU,OAAO;AAAA,UACxD,WAAS,OAAO,KAAK,GAAG,EAAE,WAAW,KAAK,IAAI,QAAQ,YAAY,MAAM,UAAa,CAAC,QAAQ,sBAAqB;AACjH,kBAAM,IAAI,QAAQ,YAAY;AAAA,UAChC,WAAS,OAAO,KAAK,GAAG,EAAE,WAAW,GAAE;AACrC,gBAAG,QAAQ,qBAAsB,KAAI,QAAQ,YAAY,IAAI;AAAA,gBACxD,OAAM;AAAA,UACb;AAEA,cAAG,cAAc,QAAQ,MAAM,UAAa,cAAc,eAAe,QAAQ,GAAG;AAClF,gBAAG,CAAC,MAAM,QAAQ,cAAc,QAAQ,CAAC,GAAG;AACxC,4BAAc,QAAQ,IAAI,CAAE,cAAc,QAAQ,CAAE;AAAA,YACxD;AACA,0BAAc,QAAQ,EAAE,KAAK,GAAG;AAAA,UAClC,OAAK;AAGH,gBAAI,QAAQ,QAAQ,UAAU,UAAU,MAAO,GAAG;AAChD,4BAAc,QAAQ,IAAI,CAAC,GAAG;AAAA,YAChC,OAAK;AACH,4BAAc,QAAQ,IAAI;AAAA,YAC5B;AAAA,UACF;AAAA,QACF;AAAA,MAEF;AAEA,UAAG,OAAO,SAAS,UAAS;AAC1B,YAAG,KAAK,SAAS,EAAG,eAAc,QAAQ,YAAY,IAAI;AAAA,MAC5D,WAAS,SAAS,OAAW,eAAc,QAAQ,YAAY,IAAI;AACnE,aAAO;AAAA,IACT;AAnDS;AAqDT,aAAS,SAAS,KAAI;AACpB,YAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,cAAM,MAAM,KAAK,CAAC;AAClB,YAAG,QAAQ,KAAM,QAAO;AAAA,MAC1B;AAAA,IACF;AANS;AAQT,aAAS,iBAAiB,KAAK,SAAS,OAAO,SAAQ;AACrD,UAAI,SAAS;AACX,cAAM,OAAO,OAAO,KAAK,OAAO;AAChC,cAAM,MAAM,KAAK;AACjB,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,gBAAM,WAAW,KAAK,CAAC;AACvB,cAAI,QAAQ,QAAQ,UAAU,QAAQ,MAAM,UAAU,MAAM,IAAI,GAAG;AACjE,gBAAI,QAAQ,IAAI,CAAE,QAAQ,QAAQ,CAAE;AAAA,UACtC,OAAO;AACL,gBAAI,QAAQ,IAAI,QAAQ,QAAQ;AAAA,UAClC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAbS;AAeT,aAAS,UAAU,KAAK,SAAQ;AAC9B,YAAM,EAAE,aAAa,IAAI;AACzB,YAAM,YAAY,OAAO,KAAK,GAAG,EAAE;AAEnC,UAAI,cAAc,GAAG;AACnB,eAAO;AAAA,MACT;AAEA,UACE,cAAc,MACb,IAAI,YAAY,KAAK,OAAO,IAAI,YAAY,MAAM,aAAa,IAAI,YAAY,MAAM,IACtF;AACA,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT;AAhBS;AAiBT,YAAQ,WAAW;AAAA;AAAA;;;AChHnB;AAAA;AAAA,QAAM,EAAE,aAAY,IAAI;AACxB,QAAM,mBAAmB;AACzB,QAAM,EAAE,SAAQ,IAAI;AACpB,QAAM,YAAY;AAElB,QAAMC,aAAN,MAAe;AAAA,MALf,OAKe;AAAA;AAAA;AAAA,MAEX,YAAY,SAAQ;AAChB,aAAK,mBAAmB,CAAC;AACzB,aAAK,UAAU,aAAa,OAAO;AAAA,MAEvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,MAAM,SAAQ,kBAAiB;AAC3B,YAAG,OAAO,YAAY,UAAS;AAAA,QAC/B,WAAU,QAAQ,UAAS;AACvB,oBAAU,QAAQ,SAAS;AAAA,QAC/B,OAAK;AACD,gBAAM,IAAI,MAAM,iDAAiD;AAAA,QACrE;AACA,YAAI,kBAAiB;AACjB,cAAG,qBAAqB,KAAM,oBAAmB,CAAC;AAElD,gBAAM,SAAS,UAAU,SAAS,SAAS,gBAAgB;AAC3D,cAAI,WAAW,MAAM;AACnB,kBAAM,MAAO,GAAG,OAAO,IAAI,GAAG,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,GAAG,EAAG;AAAA,UACxE;AAAA,QACF;AACF,cAAM,mBAAmB,IAAI,iBAAiB,KAAK,OAAO;AAC1D,yBAAiB,oBAAoB,KAAK,gBAAgB;AAC1D,cAAM,gBAAgB,iBAAiB,SAAS,OAAO;AACvD,YAAG,KAAK,QAAQ,iBAAiB,kBAAkB,OAAW,QAAO;AAAA,YAChE,QAAO,SAAS,eAAe,KAAK,OAAO;AAAA,MACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,UAAU,KAAK,OAAM;AACjB,YAAG,MAAM,QAAQ,GAAG,MAAM,IAAG;AACzB,gBAAM,IAAI,MAAM,6BAA6B;AAAA,QACjD,WAAS,IAAI,QAAQ,GAAG,MAAM,MAAM,IAAI,QAAQ,GAAG,MAAM,IAAG;AACxD,gBAAM,IAAI,MAAM,sEAAsE;AAAA,QAC1F,WAAS,UAAU,KAAI;AACnB,gBAAM,IAAI,MAAM,2CAA2C;AAAA,QAC/D,OAAK;AACD,eAAK,iBAAiB,GAAG,IAAI;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO,UAAUA;AAAA;AAAA;;;ACzDjB;AAAA;AAAA,QAAM,MAAM;AAQZ,aAAS,MAAM,QAAQ,SAAS;AAC5B,UAAI,cAAc;AAClB,UAAI,QAAQ,UAAU,QAAQ,SAAS,SAAS,GAAG;AAC/C,sBAAc;AAAA,MAClB;AACA,aAAO,SAAS,QAAQ,SAAS,IAAI,WAAW;AAAA,IACpD;AANS;AAQT,aAAS,SAAS,KAAK,SAAS,OAAO,aAAa;AAChD,UAAI,SAAS;AACb,UAAI,uBAAuB;AAE3B,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,cAAM,SAAS,IAAI,CAAC;AACpB,cAAM,UAAU,SAAS,MAAM;AAC/B,YAAG,YAAY,OAAW;AAE1B,YAAI,WAAW;AACf,YAAI,MAAM,WAAW,EAAG,YAAW;AAAA,YAC9B,YAAW,GAAG,KAAK,IAAI,OAAO;AAEnC,YAAI,YAAY,QAAQ,cAAc;AAClC,cAAI,UAAU,OAAO,OAAO;AAC5B,cAAI,CAAC,WAAW,UAAU,OAAO,GAAG;AAChC,sBAAU,QAAQ,kBAAkB,SAAS,OAAO;AACpD,sBAAU,qBAAqB,SAAS,OAAO;AAAA,UACnD;AACA,cAAI,sBAAsB;AACtB,sBAAU;AAAA,UACd;AACA,oBAAU;AACV,iCAAuB;AACvB;AAAA,QACJ,WAAW,YAAY,QAAQ,eAAe;AAC1C,cAAI,sBAAsB;AACtB,sBAAU;AAAA,UACd;AACA,oBAAU,YAAY,OAAO,OAAO,EAAE,CAAC,EAAE,QAAQ,YAAY,CAAC;AAC9D,iCAAuB;AACvB;AAAA,QACJ,WAAW,YAAY,QAAQ,iBAAiB;AAC5C,oBAAU,cAAc,OAAO,OAAO,OAAO,EAAE,CAAC,EAAE,QAAQ,YAAY,CAAC;AACvE,iCAAuB;AACvB;AAAA,QACJ,WAAW,QAAQ,CAAC,MAAM,KAAK;AAC3B,gBAAMC,UAAS,YAAY,OAAO,IAAI,GAAG,OAAO;AAChD,gBAAM,UAAU,YAAY,SAAS,KAAK;AAC1C,cAAI,iBAAiB,OAAO,OAAO,EAAE,CAAC,EAAE,QAAQ,YAAY;AAC5D,2BAAiB,eAAe,WAAW,IAAI,MAAM,iBAAiB;AACtE,oBAAU,UAAU,IAAI,OAAO,GAAG,cAAc,GAAGA,OAAM;AACzD,iCAAuB;AACvB;AAAA,QACJ;AACA,YAAI,gBAAgB;AACpB,YAAI,kBAAkB,IAAI;AACtB,2BAAiB,QAAQ;AAAA,QAC7B;AACA,cAAM,SAAS,YAAY,OAAO,IAAI,GAAG,OAAO;AAChD,cAAM,WAAW,cAAc,IAAI,OAAO,GAAG,MAAM;AACnD,cAAM,WAAW,SAAS,OAAO,OAAO,GAAG,SAAS,UAAU,aAAa;AAC3E,YAAI,QAAQ,aAAa,QAAQ,OAAO,MAAM,IAAI;AAC9C,cAAI,QAAQ,qBAAsB,WAAU,WAAW;AAAA,cAClD,WAAU,WAAW;AAAA,QAC9B,YAAY,CAAC,YAAY,SAAS,WAAW,MAAM,QAAQ,mBAAmB;AAC1E,oBAAU,WAAW;AAAA,QACzB,WAAW,YAAY,SAAS,SAAS,GAAG,GAAG;AAC3C,oBAAU,WAAW,IAAI,QAAQ,GAAG,WAAW,KAAK,OAAO;AAAA,QAC/D,OAAO;AACH,oBAAU,WAAW;AACrB,cAAI,YAAY,gBAAgB,OAAO,SAAS,SAAS,IAAI,KAAK,SAAS,SAAS,IAAI,IAAI;AACxF,sBAAU,cAAc,QAAQ,WAAW,WAAW;AAAA,UAC1D,OAAO;AACH,sBAAU;AAAA,UACd;AACA,oBAAU,KAAK,OAAO;AAAA,QAC1B;AACA,+BAAuB;AAAA,MAC3B;AAEA,aAAO;AAAA,IACX;AAxES;AA0ET,aAAS,SAAS,KAAK;AACnB,YAAM,OAAO,OAAO,KAAK,GAAG;AAC5B,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,cAAM,MAAM,KAAK,CAAC;AAClB,YAAG,CAAC,IAAI,eAAe,GAAG,EAAG;AAC7B,YAAI,QAAQ,KAAM,QAAO;AAAA,MAC7B;AAAA,IACJ;AAPS;AAST,aAAS,YAAY,SAAS,SAAS;AACnC,UAAI,UAAU;AACd,UAAI,WAAW,CAAC,QAAQ,kBAAkB;AACtC,iBAAS,QAAQ,SAAS;AACtB,cAAG,CAAC,QAAQ,eAAe,IAAI,EAAG;AAClC,cAAI,UAAU,QAAQ,wBAAwB,MAAM,QAAQ,IAAI,CAAC;AACjE,oBAAU,qBAAqB,SAAS,OAAO;AAC/C,cAAI,YAAY,QAAQ,QAAQ,2BAA2B;AACvD,uBAAW,IAAI,KAAK,OAAO,QAAQ,oBAAoB,MAAM,CAAC;AAAA,UAClE,OAAO;AACH,uBAAW,IAAI,KAAK,OAAO,QAAQ,oBAAoB,MAAM,CAAC,KAAK,OAAO;AAAA,UAC9E;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAfS;AAiBT,aAAS,WAAW,OAAO,SAAS;AAChC,cAAQ,MAAM,OAAO,GAAG,MAAM,SAAS,QAAQ,aAAa,SAAS,CAAC;AACtE,UAAI,UAAU,MAAM,OAAO,MAAM,YAAY,GAAG,IAAI,CAAC;AACrD,eAAS,SAAS,QAAQ,WAAW;AACjC,YAAI,QAAQ,UAAU,KAAK,MAAM,SAAS,QAAQ,UAAU,KAAK,MAAM,OAAO,QAAS,QAAO;AAAA,MAClG;AACA,aAAO;AAAA,IACX;AAPS;AAST,aAAS,qBAAqB,WAAW,SAAS;AAC9C,UAAI,aAAa,UAAU,SAAS,KAAK,QAAQ,iBAAiB;AAC9D,iBAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,QAAQ,KAAK;AAC9C,gBAAM,SAAS,QAAQ,SAAS,CAAC;AACjC,sBAAY,UAAU,QAAQ,OAAO,OAAO,OAAO,GAAG;AAAA,QAC1D;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AARS;AAST,WAAO,UAAU;AAAA;AAAA;;;ACtIjB;AAAA;AAAA;AAEA,QAAM,qBAAqB;AAC3B,QAAM,wBAAwB;AAE9B,QAAM,iBAAiB;AAAA,MACrB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,cAAc;AAAA,MACd,kBAAkB;AAAA,MAClB,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,sBAAsB;AAAA,MACtB,2BAA2B;AAAA,MAC3B,mBAAmB,gCAAS,KAAK,GAAG;AAClC,eAAO;AAAA,MACT,GAFmB;AAAA,MAGnB,yBAAyB,gCAAS,UAAU,GAAG;AAC7C,eAAO;AAAA,MACT,GAFyB;AAAA,MAGzB,eAAe;AAAA,MACf,iBAAiB;AAAA,MACjB,cAAc,CAAC;AAAA,MACf,UAAU;AAAA,QACR,EAAE,OAAO,IAAI,OAAO,KAAK,GAAG,GAAG,KAAK,QAAQ;AAAA;AAAA,QAC5C,EAAE,OAAO,IAAI,OAAO,KAAK,GAAG,GAAG,KAAK,OAAO;AAAA,QAC3C,EAAE,OAAO,IAAI,OAAO,KAAK,GAAG,GAAG,KAAK,OAAO;AAAA,QAC3C,EAAE,OAAO,IAAI,OAAO,KAAM,GAAG,GAAG,KAAK,SAAS;AAAA,QAC9C,EAAE,OAAO,IAAI,OAAO,KAAM,GAAG,GAAG,KAAK,SAAS;AAAA,MAChD;AAAA,MACA,iBAAiB;AAAA,MACjB,WAAW,CAAC;AAAA;AAAA;AAAA,MAGZ,cAAc;AAAA,IAChB;AAEA,aAAS,QAAQ,SAAS;AACxB,WAAK,UAAU,OAAO,OAAO,CAAC,GAAG,gBAAgB,OAAO;AACxD,UAAI,KAAK,QAAQ,qBAAqB,QAAQ,KAAK,QAAQ,qBAAqB;AAC9E,aAAK,cAAc,WAAgB;AACjC,iBAAO;AAAA,QACT;AAAA,MACF,OAAO;AACL,aAAK,qBAAqB,sBAAsB,KAAK,QAAQ,gBAAgB;AAC7E,aAAK,gBAAgB,KAAK,QAAQ,oBAAoB;AACtD,aAAK,cAAc;AAAA,MACrB;AAEA,WAAK,uBAAuB;AAE5B,UAAI,KAAK,QAAQ,QAAQ;AACvB,aAAK,YAAY;AACjB,aAAK,aAAa;AAClB,aAAK,UAAU;AAAA,MACjB,OAAO;AACL,aAAK,YAAY,WAAW;AAC1B,iBAAO;AAAA,QACT;AACA,aAAK,aAAa;AAClB,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AAzBS;AA2BT,YAAQ,UAAU,QAAQ,SAAS,MAAM;AACvC,UAAG,KAAK,QAAQ,eAAc;AAC5B,eAAO,mBAAmB,MAAM,KAAK,OAAO;AAAA,MAC9C,OAAM;AACJ,YAAG,MAAM,QAAQ,IAAI,KAAK,KAAK,QAAQ,iBAAiB,KAAK,QAAQ,cAAc,SAAS,GAAE;AAC5F,iBAAO;AAAA,YACL,CAAC,KAAK,QAAQ,aAAa,GAAI;AAAA,UACjC;AAAA,QACF;AACA,eAAO,KAAK,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE;AAAA,MAC/B;AAAA,IACF;AAEA,YAAQ,UAAU,MAAM,SAAS,MAAM,OAAO,QAAQ;AACpD,UAAI,UAAU;AACd,UAAI,MAAM;AACV,YAAM,QAAQ,OAAO,KAAK,GAAG;AAC7B,eAAS,OAAO,MAAM;AACpB,YAAG,CAAC,OAAO,UAAU,eAAe,KAAK,MAAM,GAAG,EAAG;AACrD,YAAI,OAAO,KAAK,GAAG,MAAM,aAAa;AAEpC,cAAI,KAAK,YAAY,GAAG,GAAG;AACzB,mBAAO;AAAA,UACT;AAAA,QACF,WAAW,KAAK,GAAG,MAAM,MAAM;AAE7B,cAAI,KAAK,YAAY,GAAG,GAAG;AACzB,mBAAO;AAAA,UACT,WAAW,QAAQ,KAAK,QAAQ,eAAe;AAC7C,mBAAO;AAAA,UACT,WAAW,IAAI,CAAC,MAAM,KAAK;AACzB,mBAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,MAAM,KAAK;AAAA,UACxD,OAAO;AACL,mBAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,MAAM,KAAK;AAAA,UACxD;AAAA,QAEF,WAAW,KAAK,GAAG,aAAa,MAAM;AACpC,iBAAO,KAAK,iBAAiB,KAAK,GAAG,GAAG,KAAK,IAAI,KAAK;AAAA,QACxD,WAAW,OAAO,KAAK,GAAG,MAAM,UAAU;AAExC,gBAAM,OAAO,KAAK,YAAY,GAAG;AACjC,cAAI,QAAQ,CAAC,KAAK,mBAAmB,MAAM,KAAK,GAAG;AACjD,uBAAW,KAAK,iBAAiB,MAAM,KAAK,KAAK,GAAG,CAAC;AAAA,UACvD,WAAW,CAAC,MAAM;AAEhB,gBAAI,QAAQ,KAAK,QAAQ,cAAc;AACrC,kBAAI,SAAS,KAAK,QAAQ,kBAAkB,KAAK,KAAK,KAAK,GAAG,CAAC;AAC/D,qBAAO,KAAK,qBAAqB,MAAM;AAAA,YACzC,OAAO;AACL,qBAAO,KAAK,iBAAiB,KAAK,GAAG,GAAG,KAAK,IAAI,KAAK;AAAA,YACxD;AAAA,UACF;AAAA,QACF,WAAW,MAAM,QAAQ,KAAK,GAAG,CAAC,GAAG;AAEnC,gBAAM,SAAS,KAAK,GAAG,EAAE;AACzB,cAAI,aAAa;AACjB,cAAI,cAAc;AAClB,mBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,kBAAM,OAAO,KAAK,GAAG,EAAE,CAAC;AACxB,gBAAI,OAAO,SAAS,aAAa;AAAA,YAEjC,WAAW,SAAS,MAAM;AACxB,kBAAG,IAAI,CAAC,MAAM,IAAK,QAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,MAAM,KAAK;AAAA,kBACpE,QAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,MAAM,KAAK;AAAA,YAE7D,WAAW,OAAO,SAAS,UAAU;AACnC,kBAAG,KAAK,QAAQ,cAAa;AAC3B,sBAAM,SAAS,KAAK,IAAI,MAAM,QAAQ,GAAG,OAAO,OAAO,GAAG,CAAC;AAC3D,8BAAc,OAAO;AACrB,oBAAI,KAAK,QAAQ,uBAAuB,KAAK,eAAe,KAAK,QAAQ,mBAAmB,GAAG;AAC7F,iCAAe,OAAO;AAAA,gBACxB;AAAA,cACF,OAAK;AACH,8BAAc,KAAK,qBAAqB,MAAM,KAAK,OAAO,MAAM;AAAA,cAClE;AAAA,YACF,OAAO;AACL,kBAAI,KAAK,QAAQ,cAAc;AAC7B,oBAAI,YAAY,KAAK,QAAQ,kBAAkB,KAAK,IAAI;AACxD,4BAAY,KAAK,qBAAqB,SAAS;AAC/C,8BAAc;AAAA,cAChB,OAAO;AACL,8BAAc,KAAK,iBAAiB,MAAM,KAAK,IAAI,KAAK;AAAA,cAC1D;AAAA,YACF;AAAA,UACF;AACA,cAAG,KAAK,QAAQ,cAAa;AAC3B,yBAAa,KAAK,gBAAgB,YAAY,KAAK,aAAa,KAAK;AAAA,UACvE;AACA,iBAAO;AAAA,QACT,OAAO;AAEL,cAAI,KAAK,QAAQ,uBAAuB,QAAQ,KAAK,QAAQ,qBAAqB;AAChF,kBAAM,KAAK,OAAO,KAAK,KAAK,GAAG,CAAC;AAChC,kBAAM,IAAI,GAAG;AACb,qBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,yBAAW,KAAK,iBAAiB,GAAG,CAAC,GAAG,KAAK,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAAA,YAC/D;AAAA,UACF,OAAO;AACL,mBAAO,KAAK,qBAAqB,KAAK,GAAG,GAAG,KAAK,OAAO,MAAM;AAAA,UAChE;AAAA,QACF;AAAA,MACF;AACA,aAAO,EAAC,SAAkB,IAAQ;AAAA,IACpC;AAEA,YAAQ,UAAU,mBAAmB,SAAS,UAAU,KAAI;AAC1D,YAAM,KAAK,QAAQ,wBAAwB,UAAU,KAAK,GAAG;AAC7D,YAAM,KAAK,qBAAqB,GAAG;AACnC,UAAI,KAAK,QAAQ,6BAA6B,QAAQ,QAAQ;AAC5D,eAAO,MAAM;AAAA,MACf,MAAO,QAAO,MAAM,WAAW,OAAO,MAAM;AAAA,IAC9C;AAEA,aAAS,qBAAsB,QAAQ,KAAK,OAAO,QAAQ;AACzD,YAAM,SAAS,KAAK,IAAI,QAAQ,QAAQ,GAAG,OAAO,OAAO,GAAG,CAAC;AAC7D,UAAI,OAAO,KAAK,QAAQ,YAAY,MAAM,UAAa,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACvF,eAAO,KAAK,iBAAiB,OAAO,KAAK,QAAQ,YAAY,GAAG,KAAK,OAAO,SAAS,KAAK;AAAA,MAC5F,OAAO;AACL,eAAO,KAAK,gBAAgB,OAAO,KAAK,KAAK,OAAO,SAAS,KAAK;AAAA,MACpE;AAAA,IACF;AAPS;AAST,YAAQ,UAAU,kBAAkB,SAAS,KAAK,KAAK,SAAS,OAAO;AACrE,UAAG,QAAQ,IAAG;AACZ,YAAG,IAAI,CAAC,MAAM,IAAK,QAAQ,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,UAAS,MAAM,KAAK;AAAA,aAC9E;AACH,iBAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,UAAU,KAAK,SAAS,GAAG,IAAI,KAAK;AAAA,QACjF;AAAA,MACF,OAAK;AAEH,YAAI,YAAY,OAAO,MAAM,KAAK;AAClC,YAAI,gBAAgB;AAEpB,YAAG,IAAI,CAAC,MAAM,KAAK;AACjB,0BAAgB;AAChB,sBAAY;AAAA,QACd;AAGA,aAAK,WAAW,YAAY,OAAO,IAAI,QAAQ,GAAG,MAAM,IAAI;AAC1D,iBAAS,KAAK,UAAU,KAAK,IAAI,MAAO,MAAM,UAAU,gBAAgB,MAAM,MAAM;AAAA,QACtF,WAAW,KAAK,QAAQ,oBAAoB,SAAS,QAAQ,KAAK,QAAQ,mBAAmB,cAAc,WAAW,GAAG;AACvH,iBAAO,KAAK,UAAU,KAAK,IAAI,OAAO,GAAG,QAAQ,KAAK;AAAA,QACxD,OAAM;AACJ,iBACE,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,UAAU,gBAAgB,KAAK,aACnE,MACA,KAAK,UAAU,KAAK,IAAI;AAAA,QAC5B;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,UAAU,WAAW,SAAS,KAAI;AACxC,UAAI,WAAW;AACf,UAAG,KAAK,QAAQ,aAAa,QAAQ,GAAG,MAAM,IAAG;AAC/C,YAAG,CAAC,KAAK,QAAQ,qBAAsB,YAAW;AAAA,MACpD,WAAS,KAAK,QAAQ,mBAAkB;AACtC,mBAAW;AAAA,MACb,OAAK;AACH,mBAAW,MAAM,GAAG;AAAA,MACtB;AACA,aAAO;AAAA,IACT;AAcA,YAAQ,UAAU,mBAAmB,SAAS,KAAK,KAAK,SAAS,OAAO;AACtE,UAAI,KAAK,QAAQ,kBAAkB,SAAS,QAAQ,KAAK,QAAQ,eAAe;AAC9E,eAAO,KAAK,UAAU,KAAK,IAAI,YAAY,GAAG,QAAS,KAAK;AAAA,MAC9D,WAAU,KAAK,QAAQ,oBAAoB,SAAS,QAAQ,KAAK,QAAQ,iBAAiB;AACxF,eAAO,KAAK,UAAU,KAAK,IAAI,OAAO,GAAG,QAAS,KAAK;AAAA,MACzD,WAAS,IAAI,CAAC,MAAM,KAAK;AACvB,eAAQ,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,UAAS,MAAM,KAAK;AAAA,MAClE,OAAK;AACH,YAAI,YAAY,KAAK,QAAQ,kBAAkB,KAAK,GAAG;AACvD,oBAAY,KAAK,qBAAqB,SAAS;AAE/C,YAAI,cAAc,IAAG;AACnB,iBAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,UAAU,KAAK,SAAS,GAAG,IAAI,KAAK;AAAA,QACjF,OAAK;AACH,iBAAO,KAAK,UAAU,KAAK,IAAI,MAAM,MAAM,UAAU,MAClD,YACD,OAAO,MAAM,KAAK;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,UAAU,uBAAuB,SAAS,WAAU;AAC1D,UAAG,aAAa,UAAU,SAAS,KAAK,KAAK,QAAQ,iBAAgB;AACnE,iBAAS,IAAE,GAAG,IAAE,KAAK,QAAQ,SAAS,QAAQ,KAAK;AACjD,gBAAM,SAAS,KAAK,QAAQ,SAAS,CAAC;AACtC,sBAAY,UAAU,QAAQ,OAAO,OAAO,OAAO,GAAG;AAAA,QACxD;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,aAAS,UAAU,OAAO;AACxB,aAAO,KAAK,QAAQ,SAAS,OAAO,KAAK;AAAA,IAC3C;AAFS;AAIT,aAAS,YAAY,MAAoB;AACvC,UAAI,KAAK,WAAW,KAAK,QAAQ,mBAAmB,KAAK,SAAS,KAAK,QAAQ,cAAc;AAC3F,eAAO,KAAK,OAAO,KAAK,aAAa;AAAA,MACvC,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF;AANS;AAQT,WAAO,UAAU;AAAA;AAAA;;;AC7RjB;AAAA;AAAA;AAEA,QAAM,YAAY;AAClB,QAAMC,aAAY;AAClB,QAAM,aAAa;AAEnB,WAAO,UAAU;AAAA,MACf,WAAWA;AAAA,MACX,cAAc;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;ACMA,SAAS,iBAAiB,MAA0B,OAAwB;AAC1E,QAAM,KAAK,QAAQ,IAAI,YAAY,EAAE,KAAK;AAC1C,QAAM,KAAK,SAAS,IAAI,YAAY;AACpC,MAAI,oDAAoD,KAAK,IAAI,MAAM,CAAC,EAAG,QAAO;AAClF,MAAI,8EAA8E,KAAK,IAAI,MAAM,CAAC,EAAG,QAAO;AAC5G,MAAI,mBAAmB,KAAK,IAAI,MAAM,CAAC,EAAG,QAAO;AACjD,MAAI,oDAAoD,KAAK,IAAI,MAAM,CAAC,EAAG,QAAO;AAClF,SAAO;AACT;AARS;AAUF,SAAS,WAAW,SAAiB,MAA2B;AACrE,QAAM,OAAO,GAAG,OAAO;AAAA,EAAK,IAAI;AAChC,QAAM,MAAM,wBAAC,OAAe,KAAK,MAAM,EAAE,IAAI,CAAC,GAAG,KAAK,GAA1C;AAEZ,QAAM,KAAK,IAAI,aAAa,KAAM,WAAmB,QAAQ,aAAa,KAAK,GAAG,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AACnI,QAAM,OAAO,kBAAkB,IAAI,eAAe,KAAK,WAAW,YAAY,GAAG,OAAO;AACxF,QAAM,WAAW,IAAI,mBAAmB,KAAK,SAAS,YAAY;AAClE,QAAM,WAAY,QAAQ,SAAS,KAAK,IAAI,QAAQ,QAAQ,SAAS,QAAQ,KAAK,QAAQ,SAAS,QAAQ,IAAI,WAAW;AAC1H,QAAM,QAAQ,IAAI,gBAAgB,KAAK,WAAW,GAAG,IAAI;AACzD,QAAM,UAAU,IAAI,wBAAwB;AAC5C,QAAM,MAAM,WAAW,IAAI,yBAAyB,KAAK,EAAE;AAC3D,QAAM,MAAM,WAAW,IAAI,yBAAyB,KAAK,EAAE;AAC3D,QAAM,KAAK,IAAI,mBAAmB,MAAK,oBAAI,KAAK,GAAE,YAAY;AAC9D,QAAM,cAAc,IAAI,2BAA2B;AAEnD,SAAO;AAAA,IACL,aAAa;AAAA,IACb,eAAe;AAAA,IACf;AAAA,IACA;AAAA,IACA,SAAS,SAAS,YAAY;AAAA,IAC9B,iBAAiB,SAAS,GAAG,IAAI,MAAM;AAAA,IACvC,iBAAiB,SAAS,GAAG,IAAI,MAAM;AAAA,IACvC,iBAAiB,IAAI,KAAK,EAAE,EAAE,YAAY;AAAA,IAC1C,aAAa,aAAa,MAAM,GAAG,GAAI;AAAA,EACzC;AACF;AA1BgB;AA6BT,SAAS,gBAAgB,SAAiB,MAA6B;AAC5E,QAAM,OAAO,GAAG,OAAO;AAAA,EAAK,IAAI;AAChC,QAAM,UAAyB,CAAC;AAGhC,QAAM,eAAe,iDAAiD,KAAK,IAAI,KAAK,wCAAwC,KAAK,IAAI;AACrI,MAAI,CAAC,cAAc;AACjB,WAAO,CAAC,WAAW,SAAS,IAAI,CAAC;AAAA,EACnC;AAEA,QAAM,OAAO,KAAK,QAAQ,SAAS,IAAI;AACvC,QAAM,SAAS,wBAAC,MAAwC,EAAE,YAAY,EAAE,WAAW,KAAK,IAAI,QAAQ,EAAE,YAAY,EAAE,WAAW,QAAQ,IAAI,WAAW,SAAvI;AAIf,QAAM,OAAO;AACb,MAAI;AACJ,SAAQ,IAAI,KAAK,KAAK,IAAI,GAAI;AAC5B,UAAM,MAAM,OAAO,EAAE,CAAC,CAAC;AACvB,UAAM,MAAM,EAAE,CAAC;AACf,UAAM,UAAU,EAAE,CAAC;AACnB,UAAM,aAAa,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,SAAS,EAAE;AAClD,UAAM,UAAU,EAAE,CAAC;AACnB,UAAM,UAAU,EAAE,CAAC;AACnB,UAAM,MAAM,kBAAkB,SAAS,OAAO;AAC9C,UAAM,cAAc,gBAAgB,UAAU;AAC9C,UAAM,aAAa,cAAc,mBAAmB,WAAW,IAAI;AAEnE,UAAM,QAAQ,GAAG,WAAW,IAAI,YAAY,CAAC,CAAC,gBAAgB,GAAG,IAAI,cAAc,QAAQ,cAAc,EAAE,GAAG,KAAK;AACnH,UAAM,cAAc,oBAAoB,cAAc,eAAe,SAAS,IAAI,GAAG,IAAI,GAAG,IAAI,OAAO;AAEvG,YAAQ,KAAK;AAAA,MACX;AAAA,MACA,eAAe;AAAA,MACf,UAAU;AAAA,MACV;AAAA,MACA,SAAS,cAAc;AAAA,MACvB,iBAAiB;AAAA,MACjB,aAAa,aAAa,GAAG,aAAa,OAAO;AAAA,MACjD,UAAU,EAAE,WAAW,WAAW,GAAG,GAAG,UAAU,WAAW,OAAO,GAAG,uBAAuB,eAAe,OAAU;AAAA,IACzH,CAAC;AAAA,EACH;AAIA,QAAM,OAAO;AACb,SAAQ,IAAI,KAAK,KAAK,IAAI,GAAI;AAC5B,UAAM,MAAM,OAAO,EAAE,CAAC,CAAC;AACvB,UAAM,OAAO,EAAE,CAAC;AAEhB,UAAM,OAAO,KAAK,MAAM,KAAK,WAAW,KAAK,YAAY,GAAG;AAC5D,UAAM,QAAQ,qEAAqE,KAAK,IAAI;AAC5F,UAAM,SAAS,QAAQ,kBAAkB,MAAM,CAAC,GAAG,OAAO,KAAI,oBAAI,KAAK,GAAE,YAAY;AACrF,UAAM,iBAAiB,qDAAqD,KAAK,IAAI;AACrF,UAAM,eAAe,iBAAiB,eAAe,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,KAAK,IAAI;AAC/E,UAAM,cAAc,eAAe,gBAAgB,aAAa,QAAQ,WAAW,EAAE,EAAE,KAAK,CAAC,IAAI;AACjG,UAAM,aAAa,cAAc,mBAAmB,WAAW,IAAI;AAGnE,UAAM,WAAW,sBAAsB,KAAK,IAAI;AAChD,UAAM,cAAc,MAAM,KAAK,KAAK,SAAS,8BAA8B,CAAC;AAC5E,UAAM,UAAU,YAAY,SAAS,KAAK,IAAI,GAAG,YAAY,IAAI,CAAC,MAAM,SAAS,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI;AAE/F,UAAM,QAAQ,GAAG,WAAW,IAAI,YAAY,CAAC,CAAC,qBAAqB,IAAI;AACvE,UAAM,cAAc,iBAAiB,IAAI,IAAI,MAAM;AACnD,YAAQ,KAAK;AAAA,MACX;AAAA,MACA,eAAe;AAAA,MACf,UAAU;AAAA,MACV;AAAA,MACA,SAAS,cAAc;AAAA,MACvB,iBAAiB;AAAA,MACjB,aAAa,0BAA0B,IAAI;AAAA,MAC3C,UAAU,EAAE,MAAM,UAAU,WAAW,SAAS,SAAS,CAAC,GAAG,EAAE,IAAI,QAAW,cAAc,SAAS,uBAAuB,YAAY;AAAA,IAC1I,CAAC;AAAA,EACH;AAGA,SAAO,QAAQ,SAAS,UAAU,CAAC,WAAW,SAAS,IAAI,CAAC;AAC9D;AA/EgB;AAiFhB,SAAS,kBAAkB,cAAsB,UAA0B;AAEzE,QAAM,CAAC,GAAG,GAAG,CAAC,IAAI,aAAa,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC;AACpE,QAAM,CAAC,IAAI,EAAE,IAAI,SAAS,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC;AAC/D,QAAM,MAAM,wBAAC,MAAc,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG,GAA3C;AACZ,SAAO,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACvD;AANS;AAQT,SAAS,gBAAgB,KAA4B;AACnD,QAAM,IAAI,IAAI,QAAQ,gBAAgB,EAAE,EAAE,QAAQ,WAAW,GAAG,EAAE,KAAK;AACvE,MAAI,CAAC,KAAK,WAAW,KAAK,GAAG,EAAG,QAAO;AACvC,SAAO;AACT;AAJS;AAMT,SAAS,WAAW,GAAW;AAC7B,SAAO,EAAE,OAAO,CAAC,EAAE,YAAY,IAAI,EAAE,MAAM,CAAC;AAC9C;AAFS;AAKF,SAAS,mBAAmB,MAAkC;AACnE,QAAM,IAAI,KACP,YAAY,EACZ,QAAQ,aAAa,EAAE,EACvB,QAAQ,QAAQ,GAAG,EACnB,KAAK;AACR,QAAM,MAA8B;AAAA,IAClC,sBAAsB;AAAA,IACtB,QAAQ;AAAA,IACR,iBAAiB;AAAA,IACjB,4BAA4B;AAAA,IAC5B,KAAK;AAAA,IACL,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,WAAW;AAAA,IACX,UAAU;AAAA,IACV,SAAS;AAAA,IACT,SAAS;AAAA,IACT,sBAAsB;AAAA,IACtB,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,IACN,eAAe;AAAA,IACf,SAAS;AAAA,IACT,WAAW;AAAA,IACX,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,SAAS;AAAA,IACT,OAAO;AAAA,IACP,aAAa;AAAA,IACb,SAAS;AAAA,IACT,aAAa;AAAA,IACb,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,UAAU;AAAA,IACV,SAAS;AAAA,IACT,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,0BAA0B;AAAA,IAC1B,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,SAAS;AAAA,IACT,UAAU;AAAA,IACV,OAAO;AAAA,IACP,eAAe;AAAA,IACf,OAAO;AAAA,IACP,OAAO;AAAA,IACP,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,MAAM;AAAA,IACN,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,SAAS;AAAA,IACT,MAAM;AAAA,IACN,gBAAgB;AAAA,IAChB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,OAAO;AAAA,IACP,OAAO;AAAA,IACP,yBAAyB;AAAA,IACzB,oCAAoC;AAAA,IACpC,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,UAAU;AAAA,IACV,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,OAAO;AAAA,IACP,OAAO;AAAA,IACP,eAAe;AAAA,IACf,eAAe;AAAA,IACf,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,aAAa;AAAA,IACb,UAAU;AAAA,IACV,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,IACN,WAAW;AAAA,IACX,UAAU;AAAA,IACV,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,WAAW;AAAA,IACX,aAAa;AAAA,IACb,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,eAAe;AAAA,IACf,WAAW;AAAA,IACX,oBAAoB;AAAA,IACpB,KAAK;AAAA,IACL,eAAe;AAAA,IACf,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,IACP,mBAAmB;AAAA,IACnB,oBAAoB;AAAA,IACpB,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,gBAAgB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,KAAK;AAAA,IACL,wBAAwB;AAAA,IACxB,OAAO;AAAA,IACP,SAAS;AAAA,IACT,QAAQ;AAAA,EACV;AACA,SAAO,IAAI,CAAC;AACd;AAvLgB;;;AC3JhB,6BAA0B;AAe1B,SAAS,cAAc,OAA4C;AACjE,QAAM,KAAK,SAAS,IAAI,YAAY;AACpC,MAAI,MAAM,MAAO,QAAO;AACxB,MAAI,MAAM,SAAU,QAAO;AAC3B,SAAO;AACT;AALS;AAOT,SAAS,UAAU,OAAuB;AACxC,QAAM,IAAI,MAAM,YAAY;AAC5B,MAAI,EAAE,SAAS,YAAY,EAAG,QAAO;AACrC,MAAI,EAAE,SAAS,OAAO,EAAG,QAAO;AAChC,MAAI,EAAE,SAAS,SAAS,KAAK,EAAE,SAAS,kBAAkB,KAAK,EAAE,SAAS,SAAS,KAAK,EAAE,SAAS,WAAW,EAAG,QAAO;AACxH,MAAI,EAAE,SAAS,UAAU,KAAK,EAAE,SAAS,MAAM,EAAG,QAAO;AACzD,SAAO;AACT;AAPS;AAST,SAAS,0BAA0B,MAAkC;AACnE,MAAI,CAAC,KAAM,QAAO;AAGlB,QAAM,WAAW;AAAA;AAAA,IAEf;AAAA,IACA;AAAA;AAAA,IAGA;AAAA;AAAA,IAGA;AAAA,EACF;AAEA,aAAW,WAAW,UAAU;AAC9B,UAAM,QAAQ,QAAQ,KAAK,IAAI;AAC/B,QAAI,OAAO;AACT,YAAM,SAAS,MAAM,CAAC,EAAE,QAAQ,MAAM,EAAE;AACxC,UAAI,MAAM,WAAW,MAAM;AAE3B,UAAI,CAAC,SAAS,GAAG,EAAG;AAEpB,YAAM,cAAc,MAAM,CAAC,KAAK,IAAI,YAAY;AAChD,UAAI,eAAe,aAAa,eAAe,OAAO;AACpD,eAAO;AAAA,MACT,WAAW,eAAe,OAAO,eAAe,YAAY;AAC1D,eAAO;AAAA,MACT;AAGA,UAAI,OAAO,MAAM,OAAO,KAAa;AACnC,eAAO,KAAK,MAAM,GAAG;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAvCS;AAyCF,SAAS,eAAe,KAAgC;AAC7D,QAAM,SAAS,IAAI,iCAAU,EAAE,kBAAkB,OAAO,qBAAqB,GAAG,CAAC;AACjF,QAAM,MAAM,OAAO,MAAM,GAAG;AAC5B,QAAM,QAAQ,KAAK,KAAK,SAAS;AACjC,MAAI,CAAC,MAAO,QAAO,CAAC;AACpB,QAAM,OAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAClD,QAAM,SAA4B,CAAC;AACnC,aAAW,MAAM,MAAM;AACrB,UAAM,UAAU,OAAO,GAAG,eAAe,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG,SAAS,EAAE;AAClF,QAAI,CAAC,QAAS;AACd,UAAM,MAAM,SAAS,OAAO;AAC5B,UAAM,QAAgB,OAAO,GAAG,SAAS,EAAE;AAC3C,UAAM,QAAQ,OAAO,GAAG,kBAAkB,KAAK,EAAE;AACjD,UAAM,WAAW,cAAc,KAAK;AACpC,UAAM,IAAI,UAAU,KAAK;AACzB,UAAM,MAAM,GAAG,UAAU,IAAI,KAAK,GAAG,OAAO,IAAI,oBAAI,KAAK;AACzD,UAAM,OAAO,MAAM,IAAI,QAAQ,CAAC,IAAI,oBAAI,KAAK,IAAI;AACjD,UAAM,UAAU,GAAG,eAAe,IAAI,OAAO,GAAG,eAAe,CAAC,IAAI;AACpE,UAAM,QAAQ,GAAG,cAAc,IAAI,OAAO,GAAG,cAAc,CAAC,IAAI;AAChE,QAAI;AACJ,QAAI;AACJ,QAAI,OAAO;AACT,YAAM,CAAC,QAAQ,MAAM,IAAI,MAAM,KAAK,EAAE,MAAM,KAAK;AACjD,YAAM,OAAO,MAAM;AACnB,YAAM,OAAO,MAAM;AACnB,UAAI,CAAC,SAAS,GAAG,EAAG,OAAM;AAC1B,UAAI,CAAC,SAAS,GAAG,EAAG,OAAM;AAAA,IAC5B;AACA,UAAM,cAAkC,GAAG,cAAc,OAAO,GAAG,WAAW,IAAI;AAGlF,UAAM,WAAW,GAAG,KAAK,IAAI,eAAe,EAAE,IAAI,GAAG,kBAAkB,KAAK,EAAE,IAAI,GAAG,gBAAgB,KAAK,EAAE,IAAI,GAAG,cAAc,KAAK,EAAE;AACxI,UAAM,sBAAsB,0BAA0B,QAAQ;AAE9D,WAAO,KAAK;AAAA,MACV,aAAa;AAAA,MACb,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB,KAAK,YAAY;AAAA,MAClC;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACA,SAAO;AACT;AAhDgB;;;ACxEhB,IAAAC,0BAA0B;AAgB1B,SAAS,kBAAkB,MAAsB;AAC/C,QAAM,IAAI,KAAK,YAAY;AAG3B,MAAI,oBAAoB,KAAK,IAAI,EAAG,QAAO;AAC3C,MAAI,gCAAgC,KAAK,IAAI,EAAG,QAAO;AACvD,MAAI,0DAA0D,KAAK,IAAI,EAAG,QAAO;AACjF,MAAI,sCAAsC,KAAK,IAAI,EAAG,QAAO;AAC7D,MAAI,oDAAoD,KAAK,IAAI,EAAG,QAAO;AAC3E,MAAI,wCAAwC,KAAK,IAAI,EAAG,QAAO;AAG/D,MAAI,6BAA6B,KAAK,IAAI,EAAG,QAAO;AACpD,MAAI,0CAA0C,KAAK,IAAI,EAAG,QAAO;AAGjE,MAAI,sDAAsD,KAAK,IAAI,EAAG,QAAO;AAG7E,SAAO;AACT;AApBS;AAsBT,SAAS,kBAAkB,IAAmB;AAC5C,QAAM,OAAO,IAAI;AACjB,MAAI,CAAC,KAAM,QAAO,CAAC;AACnB,MAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,WAAO,KACJ,IAAI,CAAC,MAAM;AACV,UAAI,OAAO,MAAM,SAAU,QAAO;AAClC,UAAI,KAAK,OAAO,MAAM,UAAU;AAC9B,eAAQ,EAAU,OAAO,KAAM,EAAU,QAAQ;AAAA,MACnD;AACA,aAAO;AAAA,IACT,CAAC,EACA,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAAA,EACtB;AACA,MAAI,OAAO,SAAS,SAAU,QAAO,CAAC,IAAI;AAC1C,MAAI,QAAQ,OAAO,SAAS,SAAU,QAAO,CAAG,KAAa,OAAO,KAAM,KAAa,QAAQ,EAAG,EAAE,OAAO,OAAO;AAClH,SAAO,CAAC;AACV;AAjBS;AAmBT,SAAS,8BAA8B,aAAyC;AAE9E,QAAM,eAAe,YAAY,MAAM,8DAA8D;AACrG,MAAI,cAAc;AAChB,WAAO,aAAa,CAAC,EAAE,KAAK;AAAA,EAC9B;AACA,SAAO;AACT;AAPS;AAST,SAAS,mBAAmB,aAAqB,YAA0C;AAEzF,QAAM,aAAa,YAAY,MAAM,iDAAiD;AACtF,MAAI,YAAY;AACd,WAAO,WAAW,CAAC,EAAE,KAAK;AAAA,EAC5B;AAGA,aAAW,OAAO,YAAY;AAC5B,QAAI,kCAAkC,KAAK,GAAG,GAAG;AAC/C,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAdS;AAgBT,SAAS,6BAA6B,YAA0C;AAE9E,aAAW,KAAK,YAAY;AAC1B,UAAM,IAAI,OAAO,CAAC,EAAE,KAAK;AACzB,QAAI,CAAC,EAAG;AAER,QAAI,kCAAkC,KAAK,CAAC,EAAG;AAE/C,QAAI,8EAA8E,KAAK,CAAC,EAAG;AAE3F,QAAI,4BAA4B,KAAK,CAAC,GAAG;AACvC,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAfS;AAiBT,SAAS,eAAe,MAAkC;AACxD,QAAM,IAAI,gDAAgD,KAAK,IAAI;AACnE,QAAM,MAAM,IAAI,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI;AAC3C,SAAO,SAAS,GAAG,IAAI,MAAM;AAC/B;AAJS;AAMT,SAAS,qBAAqB,MAAkC;AAC9D,QAAM,IAAI,+BAA+B,KAAK,IAAI;AAClD,SAAO,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,IAAI;AAClC;AAHS;AAKT,SAAS,wBAAwB,MAAc,UAAsC;AAEnF,QAAMC,UAAS;AACf,QAAM,UAAoB,CAAC;AAC3B,aAAW,MAAM,KAAK,SAAS,QAAQ,GAAG;AACxC,UAAM,MAAM,GAAG,SAAS;AACxB,UAAM,QAAQ,KAAK,MAAM,KAAK,IAAI,GAAG,MAAMA,OAAM,GAAG,KAAK,IAAI,KAAK,QAAQ,MAAMA,OAAM,CAAC;AACvF,UAAM,OAAO,MAAM,MAAM,8FAA8F;AACvH,QAAI,MAAM;AACR,iBAAW,KAAK,MAAM;AACpB,cAAM,cAAc,iBAAiB,KAAK,CAAC;AAC3C,YAAI,aAAa;AACf,gBAAM,MAAM,WAAW,EAAE,QAAQ,WAAW,EAAE,CAAC;AAC/C,cAAI,SAAS,GAAG,EAAG,SAAQ,KAAK,MAAM,GAAS;AAC/C;AAAA,QACF;AACA,cAAM,SAAS,aAAa,KAAK,CAAC,IAAI,CAAC;AACvC,cAAM,MAAM,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,eAAe,EAAE;AACzD,cAAM,MAAM,WAAW,GAAG;AAC1B,YAAI,CAAC,SAAS,GAAG,EAAG;AACpB,YAAI,CAAC,OAAQ,SAAQ,KAAK,GAAG;AAAA,iBACpB,OAAO,YAAY,MAAM,IAAK,SAAQ,KAAK,MAAM,GAAK;AAAA,iBACtD,OAAO,YAAY,MAAM,IAAK,SAAQ,KAAK,MAAM,GAAS;AAAA,MACrE;AAAA,IACF;AAAA,EACF;AACA,MAAI,CAAC,QAAQ,OAAQ,QAAO;AAC5B,SAAO,KAAK,IAAI,GAAG,OAAO;AAC5B;AA5BS;AA8BT,SAASC,2BAA0B,MAAkC;AAEnE,QAAM,WAAW,wBAAwB,MAAM,8GAA8G;AAC7J,SAAO;AACT;AAJS,OAAAA,4BAAA;AAMT,SAAS,sBAAsB,MAAc,cAA8C;AACzF,QAAM,IAAI,KAAK,YAAY;AAG3B,QAAM,WAAW;AAGjB,QAAM,cAAc;AAGpB,QAAM,MAAM,eAAe,IAAI;AAC/B,QAAM,MAAM,qBAAqB,IAAI;AACrC,QAAM,SAAS,wBAAwB,MAAM,yCAAyC;AACtF,QAAM,WAAW,wBAAwB,MAAM,yCAAyC;AACxF,QAAM,UAAU,wBAAwB,MAAM,sBAAsB;AAGpE,MAAI,iBAAiB,cAAc;AACjC,QAAI,QAAQ,QAAW;AACrB,UAAI,OAAO,IAAK,QAAO;AACvB,UAAI,OAAO,IAAK,QAAO;AAAA,IACzB;AACA,QAAI,WAAW,QAAW;AACxB,UAAI,UAAU,IAAK,QAAO;AAC1B,UAAI,UAAU,GAAI,QAAO;AAAA,IAC3B;AAAA,EACF;AAEA,MAAI,iBAAiB,WAAW;AAC9B,QAAI,QAAQ,QAAW;AACrB,UAAI,OAAO,EAAG,QAAO;AACrB,UAAI,OAAO,EAAG,QAAO;AAAA,IACvB;AAAA,EACF;AAEA,MAAI,iBAAiB,SAAS;AAC5B,QAAI,WAAW,UAAa,UAAU,GAAI,QAAO;AACjD,QAAI,aAAa,UAAa,YAAY,IAAS,QAAO;AAC1D,QAAI,WAAW,UAAa,UAAU,GAAI,QAAO;AACjD,QAAI,aAAa,UAAa,YAAY,IAAQ,QAAO;AAAA,EAC3D;AAEA,MAAI,iBAAiB,YAAY;AAC/B,QAAI,kEAAkE,KAAK,IAAI,EAAG,QAAO;AACzF,QAAI,WAAW,UAAa,UAAU,EAAG,QAAO;AAAA,EAClD;AAEA,MAAI,iBAAiB,YAAY;AAE/B,QAAI,WAAW,UAAa,UAAU,GAAI,QAAO;AACjD,QAAI,aAAa,UAAa,YAAY,IAAM,QAAO;AACvD,QAAI,yCAAyC,KAAK,IAAI,EAAG,QAAO;AAAA,EAClE;AAEA,MAAI,iBAAiB,WAAW;AAC9B,QAAI,aAAa,UAAa,YAAY,IAAW,QAAO;AAC5D,QAAI,aAAa,UAAa,YAAY,IAAS,QAAO;AAC1D,QAAI,yEAAyE,KAAK,IAAI,EAAG,QAAO;AAAA,EAClG;AAEA,MAAI,iBAAiB,YAAY;AAC/B,QAAI,WAAW,UAAa,UAAU,GAAI,QAAO;AACjD,QAAI,wDAAwD,KAAK,IAAI,EAAG,QAAO;AAAA,EACjF;AAGA,MAAI,WAAW,QAAW;AACxB,QAAI,UAAU,IAAK,QAAO;AAC1B,QAAI,UAAU,GAAI,QAAO;AAAA,EAC3B;AAEA,MAAI,YAAY,UAAa,WAAW,IAAK,QAAO;AAEpD,MAAI,aAAa,QAAW;AAC1B,QAAI,YAAY,IAAS,QAAO;AAChC,QAAI,YAAY,IAAQ,QAAO;AAAA,EACjC;AAGA,MAAI,SAAS,KAAK,IAAI,EAAG,QAAO;AAChC,MAAI,YAAY,KAAK,IAAI,EAAG,QAAO;AAEnC,SAAO;AACT;AAnFS;AAqFF,SAAS,mBAAmB,KAAoC;AACrE,QAAM,SAAS,IAAI,kCAAU,EAAE,kBAAkB,OAAO,qBAAqB,GAAG,CAAC;AACjF,QAAM,MAAM,OAAO,MAAM,GAAG;AAC5B,QAAM,QAAQ,KAAK,KAAK,SAAS;AACjC,MAAI,CAAC,MAAO,QAAO,CAAC;AACpB,QAAM,OAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAClD,QAAM,SAAgC,CAAC;AAEvC,aAAW,MAAM,MAAM;AACrB,UAAM,OAAO,OAAO,GAAG,OAAO,OAAO,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG,SAAS,EAAE;AAC9E,QAAI,CAAC,KAAM;AAEX,UAAM,QAAgB,OAAO,GAAG,SAAS,EAAE;AAC3C,UAAM,cAAsB,GAAG,cAAc,OAAO,GAAG,WAAW,IAAI;AACtE,UAAM,MAAM,GAAG,UAAU,IAAI,KAAK,GAAG,OAAO,IAAI,oBAAI,KAAK;AACzD,UAAM,OAAO,MAAM,IAAI,QAAQ,CAAC,IAAI,oBAAI,KAAK,IAAI;AACjD,UAAM,aAAa,kBAAkB,EAAE;AAGvC,UAAM,kBAAkB,8BAA8B,WAAW;AACjE,UAAM,kBAAkB,6BAA6B,UAAU;AAC/D,UAAM,eAAe,mBAAmB,kBAAkB,QAAQ,YAAY,EAAE,EAAE,KAAK;AAGvF,UAAM,cAAc,mBAAmB,aAAa,UAAU;AAC9D,UAAM,MAAM,cAAc,aAAa,WAAW,KAAK,aAAa,IAAI;AAGxE,UAAM,WAAW,GAAG,KAAK,IAAI,WAAW,IAAI,WAAW,KAAK,GAAG,CAAC;AAChE,UAAM,gBAAgB,kBAAkB,QAAQ;AAChD,UAAM,WAA4C,sBAAsB,UAAU,aAAa;AAG/F,UAAM,sBAAsBA,2BAA0B,QAAQ;AAE9D,WAAO,KAAK;AAAA,MACV,aAAa;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAU,eAAe,mBAAmB,WAAW,KAAM;AAAA,MAC7D,iBAAiB,KAAK,YAAY;AAAA,MAClC;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACA,SAAO;AACT;AA/CgB;;;ACvOhB,IAAAC,0BAA0B;AAgB1B,SAAS,iBAAiB,OAA8B;AAEtD,QAAM,iBAAiB,MAAM,MAAM,sBAAsB;AACzD,SAAO,iBAAiB,WAAW,eAAe,CAAC,CAAC,IAAI;AAC1D;AAJS;AAMT,SAAS,qBAAqB,SAA6C;AAEzE,MAAI,yBAAyB,KAAK,OAAO,EAAG,QAAO;AACnD,MAAI,+BAA+B,KAAK,OAAO,EAAG,QAAO;AACzD,MAAI,+BAA+B,KAAK,OAAO,EAAG,QAAO;AACzD,SAAO;AACT;AANS;AAQT,SAAS,yBAAyB,OAAsD;AAEtF,QAAM,gBAAgB,MAAM,MAAM,+CAA+C;AACjF,MAAI,eAAe;AACjB,UAAM,OAAO,cAAc,CAAC,GAAG,KAAK;AACpC,UAAM,gBAAgB,cAAc,CAAC,GAAG,KAAK;AAC7C,WAAO,EAAE,SAAS,eAAe,QAAQ,KAAK;AAAA,EAChD;AAGA,QAAM,cAAc,MAAM,MAAM,yCAAyC;AACzE,MAAI,aAAa;AACf,WAAO,EAAE,SAAS,YAAY,CAAC,GAAG,KAAK,EAAE;AAAA,EAC3C;AAGA,QAAM,eAAe,MAAM,MAAM,gCAAgC;AACjE,MAAI,cAAc;AAChB,WAAO,EAAE,SAAS,aAAa,CAAC,GAAG,KAAK,EAAE;AAAA,EAC5C;AAEA,SAAO,CAAC;AACV;AAtBS;AAwBT,SAAS,aAAa,SAAgC;AAEpD,QAAM,aAAa,QAAQ,MAAM,0CAA0C;AAC3E,SAAO,aAAa,WAAW,WAAW,CAAC,CAAC,IAAI;AAClD;AAJS;AAMT,SAAS,iBAAiB,SAAgC;AAExD,QAAM,YAAY,QAAQ,MAAM,kEAAkE;AAClG,MAAI,WAAW;AACb,WAAO,GAAG,UAAU,CAAC,CAAC;AAAA,EACxB;AACA,SAAO;AACT;AAPS;AAST,SAAS,2BAA2B,WAAmB,OAAsB,SAAqC;AAEhH,MAAI,CAAC,UAAW,QAAO;AAGvB,QAAM,QAAQ,yBAAyB,KAAK,OAAO;AACnD,QAAM,WAAW,+BAA+B,KAAK,OAAO;AAC5D,QAAM,WAAW,+BAA+B,KAAK,OAAO;AAG5D,MAAI,SAAS,aAAa,EAAK,QAAO;AACtC,MAAI,SAAS,aAAa,EAAK,QAAO;AACtC,MAAI,YAAY,aAAa,IAAK,QAAO;AACzC,MAAI,YAAY,aAAa,IAAK,QAAO;AACzC,MAAI,YAAY,aAAa,EAAK,QAAO;AACzC,MAAI,aAAa,EAAK,QAAO;AAC7B,MAAI,aAAa,EAAK,QAAO;AAE7B,SAAO;AACT;AAnBS;AAqBF,SAAS,cAAc,SAAmC;AAC/D,MAAI;AACF,UAAM,SAAS,IAAI,kCAAU;AAAA,MAC3B,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,YAAY;AAAA,MACZ,iBAAiB;AAAA,IACnB,CAAC;AAED,UAAM,SAAS,OAAO,MAAM,OAAO;AACnC,UAAM,OAAO,QAAQ;AACrB,QAAI,CAAC,KAAM,QAAO,CAAC;AAEnB,UAAM,UAAU,MAAM,QAAQ,KAAK,KAAK,IAAI,KAAK,QAAS,KAAK,QAAQ,CAAC,KAAK,KAAK,IAAI,CAAC;AACvF,UAAM,UAA4B,CAAC;AAEnC,eAAW,SAAS,SAAS;AAC3B,UAAI;AACF,cAAM,KAAK,MAAM,MAAM;AACvB,cAAM,QAAQ,MAAM,SAAS;AAC7B,cAAM,UAAU,MAAM,UAAU,OAAO,KAAK,MAAM,WAAW;AAC7D,cAAM,UAAU,MAAM,WAAW;AAGjC,cAAM,eAAe,GAAG,MAAM,uCAAuC;AACrE,cAAM,UAAU,eAAe,GAAG,aAAa,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,KAAK;AACzE,cAAM,cAAc,QAAQ,OAAO;AAGnC,YAAI;AACJ,YAAI;AAEJ,YAAI,MAAM,cAAc,GAAG;AACzB,gBAAM,SAAS,OAAO,MAAM,cAAc,CAAC,EAAE,KAAK,EAAE,MAAM,KAAK;AAC/D,cAAI,OAAO,UAAU,GAAG;AACtB,8BAAkB,WAAW,OAAO,CAAC,CAAC;AACtC,8BAAkB,WAAW,OAAO,CAAC,CAAC;AAAA,UACxC;AAAA,QACF;AAGA,cAAM,YAAY,iBAAiB,KAAK;AACxC,cAAM,eAAe,yBAAyB,KAAK;AACnD,cAAM,QAAQ,aAAa,OAAO;AAClC,cAAM,iBAAiB,iBAAiB,OAAO,KAAK;AAGpD,cAAM,WAAW,qBAAqB,OAAO;AAG7C,cAAM,sBAAsB,YAAY,2BAA2B,WAAW,OAAO,OAAO,IAAI;AAGhG,YAAI;AACJ,YAAI,aAAa,SAAS;AACxB,oBAAU,mBAAmB,aAAa,OAAO,KAAK,aAAa;AAAA,QACrE;AAGA,YAAI,cAAc,aAAa,aAAa,SAAS;AACrD,YAAI,aAAa,QAAQ;AACvB,yBAAe,SAAS,aAAa,MAAM;AAAA,QAC7C;AACA,YAAI,aAAa,SAAS;AACxB,yBAAe,OAAO,aAAa,OAAO;AAAA,QAC5C;AACA,YAAI,OAAO;AACT,yBAAe,OAAO,KAAK;AAAA,QAC7B;AAGA,cAAM,aAAa,QAAQ,MAAM,yCAAyC;AAC1E,YAAI,YAAY;AACd,yBAAe,wBAAwB,WAAW,CAAC,CAAC;AAAA,QACtD;AAEA,cAAM,gBAAgB,QAAQ,MAAM,4CAA4C;AAChF,YAAI,eAAe;AACjB,yBAAe,wBAAwB,cAAc,CAAC,CAAC;AAAA,QACzD;AAEA,gBAAQ,KAAK;AAAA,UACX;AAAA,UACA,eAAe;AAAA;AAAA,UACf;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,iBAAiB;AAAA,UACjB;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MAEH,SAAS,OAAO;AACd,gBAAQ,KAAK,+BAA+B,OAAO,KAAK;AACxD;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EAET,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO,CAAC;AAAA,EACV;AACF;AA3GgB;;;AC1FhB,IAAAC,0BAA0B;AAgBnB,SAAS,iBAAiB,YAAyC;AACxE,MAAI;AACF,YAAQ,IAAI,2BAA2B;AAEvC,UAAM,SAAS,IAAI,kCAAU;AAAA,MAC3B,kBAAkB;AAAA,MAClB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,IACvB,CAAC;AAED,UAAM,MAAM,OAAO,MAAM,UAAU;AAEnC,QAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO;AAChC,cAAQ,IAAI,mCAAmC;AAC/C,aAAO,CAAC;AAAA,IACV;AAGA,UAAM,UAAU,MAAM,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,QAAQ,CAAC,IAAI,KAAK,KAAK;AAChF,UAAM,YAAiC,CAAC;AAExC,YAAQ,IAAI,SAAS,QAAQ,MAAM,oBAAoB;AAEvD,eAAW,SAAS,SAAS;AAC3B,UAAI;AACF,cAAM,WAAW,kBAAkB,KAAK;AACxC,YAAI,UAAU;AACZ,oBAAU,KAAK,QAAQ;AAAA,QACzB;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,iCAAiC,KAAK;AAAA,MAEtD;AAAA,IACF;AAEA,YAAQ,IAAI,UAAU,UAAU,MAAM,+BAA+B;AACrE,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,oCAAoC,KAAK;AACvD,UAAM;AAAA,EACR;AACF;AAzCgB;AA2ChB,SAAS,kBAAkB,OAAsC;AAE/D,QAAM,KAAK,MAAM,MAAM;AACvB,QAAM,QAAQ,MAAM,SAAS;AAC7B,QAAM,UAAU,MAAM,WAAW;AACjC,QAAM,UAAU,MAAM,WAAW;AACjC,QAAM,YAAY,MAAM,aAAa;AAErC,MAAI,CAAC,MAAM,CAAC,OAAO;AACjB,WAAO;AAAA,EACT;AAGA,MAAI,MAAM,YAAY,EAAE,SAAS,cAAc,KAC3C,QAAQ,YAAY,EAAE,SAAS,oBAAoB,KACnD,QAAQ,YAAY,EAAE,SAAS,kBAAkB,GAAG;AACtD,WAAO;AAAA,EACT;AAGA,QAAM,WAAW,MAAM,WAAW,KAAK;AACvC,QAAM,cAAc,MAAM,cAAc,KAAK;AAC7C,QAAM,aAAa,MAAM,aAAa,KAAK;AAC3C,QAAM,cAAc,MAAM,cAAc,KAAK;AAC7C,QAAM,aAAa,MAAM,aAAa,KAAK;AAG3C,QAAM,eAAe,0BAA0B,UAAU,KAAK;AAG9D,MAAI,CAAC,cAAc;AACjB,WAAO;AAAA,EACT;AAGA,QAAM,WAAW,qBAAqB,aAAa,YAAY,KAAK;AAGpE,QAAM,WAAW,uBAAuB,aAAa,UAAU;AAG/D,QAAM,UAAU,aAAa;AAC7B,QAAM,OAAO,UAAU,IAAI,KAAK,OAAO,IAAI,oBAAI,KAAK;AAGpD,QAAM,aAAa,YAAY,sBAAsB,EAAE,CAAC;AAExD,QAAM,WAA8B;AAAA,IAClC,aAAa;AAAA,IACb,eAAe;AAAA,IACf;AAAA,IACA;AAAA,IACA,aAAa,WAAW;AAAA,IACxB,iBAAiB,KAAK,YAAY;AAAA,IAClC,iBAAiB,SAAS,YAAY;AAAA,IACtC,iBAAiB,SAAS,aAAa;AAAA,IACvC,SAAS,SAAS;AAAA,IAClB,qBAAqBC,4BAA2B,aAAa,YAAY,WAAW;AAAA,EACtF;AAEA,SAAO;AACT;AA7DS;AAiET,SAAS,0BAA0B,UAAyB,OAA8B;AACxF,MAAI,CAAC,YAAY,CAAC,MAAO,QAAO;AAEhC,QAAM,aAAa,YAAY,OAAO,YAAY;AAGlD,MAAI,UAAU,SAAS,SAAS,GAAG;AACjC,WAAO;AAAA,EACT;AAGA,MAAI,UAAU,SAAS,OAAO,KAAK,UAAU,SAAS,aAAa,GAAG;AACpE,WAAO;AAAA,EACT;AAGA,MAAI,UAAU,SAAS,UAAU,KAAK,UAAU,SAAS,cAAc,KACnE,UAAU,SAAS,cAAc,GAAG;AACtC,WAAO;AAAA,EACT;AAGA,MAAI,UAAU,SAAS,WAAW,KAAK,UAAU,SAAS,gBAAgB,KACtE,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,SAAS,GAAG;AAClE,WAAO;AAAA,EACT;AAGA,MAAI,UAAU,SAAS,YAAY,KAAK,UAAU,SAAS,SAAS,GAAG;AACrE,WAAO;AAAA,EACT;AAGA,MAAI,UAAU,SAAS,WAAW,KAAK,UAAU,SAAS,aAAa,GAAG;AACxE,WAAO;AAAA,EACT;AAGA,MAAI,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,gBAAgB,GAAG;AACzE,WAAO;AAAA,EACT;AAIA,SAAO;AACT;AA7CS;AA+CT,SAAS,qBAAqB,UAAyB,SAAwB,OAAuB;AACpG,QAAM,OAAO,YAAY,IAAI,YAAY;AACzC,QAAM,OAAO,WAAW,IAAI,YAAY;AACxC,QAAM,aAAa,MAAM,YAAY;AAGrC,MAAI,WAAW,SAAS,iBAAiB,GAAG;AAC1C,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,aAAa,WAAW,SAAS,SAAS,KAAK,WAAW,SAAS,WAAW,GAAG;AAC3F,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,YAAY,QAAQ,aAAa;AAC3C,WAAO;AAAA,EACT;AAGA,MAAI,WAAW,SAAS,qBAAqB,GAAG;AAC9C,WAAO;AAAA,EACT;AAGA,MAAI,WAAW,SAAS,SAAS,KAAK,CAAC,WAAW,SAAS,OAAO,GAAG;AACnE,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,UAAU;AACpB,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,YAAY;AACtB,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,WAAW,WAAW,SAAS,UAAU,KAAK,WAAW,SAAS,OAAO,GAAG;AACtF,WAAO;AAAA,EACT;AAGA,SAAO;AACT;AA/CS;AAiDT,SAAS,uBAAuB,UAAyB,SAIvD;AAEA,MAAI,UAAU;AACd,MAAI,WAA0B;AAC9B,MAAI,YAA2B;AAG/B,MAAI,WAAW,QAAQ,KAAK,GAAG;AAC7B,UAAM,SAAS,wBAAwB,OAAO;AAC9C,QAAI,OAAO,SAAS,GAAG;AAErB,iBAAW,OAAO,OAAO,CAAC,KAAK,UAAU,MAAM,MAAM,KAAK,CAAC,IAAI,OAAO;AACtE,kBAAY,OAAO,OAAO,CAAC,KAAK,UAAU,MAAM,MAAM,KAAK,CAAC,IAAI,OAAO;AAAA,IACzE;AAAA,EACF;AAGA,MAAI,CAAC,YAAY,UAAU;AACzB,UAAM,WAAW,6BAA6B,QAAQ;AACtD,eAAW,SAAS;AACpB,gBAAY,SAAS;AAAA,EACvB;AAGA,MAAI,UAAU;AACZ,UAAM,YAAY,SAAS,YAAY;AACvC,QAAI,UAAU,SAAS,aAAa,KAAK,UAAU,SAAS,IAAI,GAAG;AACjE,gBAAU;AAAA,IACZ,WAAW,UAAU,SAAS,gBAAgB,KAAK,UAAU,SAAS,IAAI,GAAG;AAC3E,gBAAU;AAAA,IACZ,WAAW,UAAU,SAAS,MAAM,KAAK,UAAU,SAAS,IAAI,GAAG;AACjE,gBAAU;AAAA,IACZ;AAAA,EACF;AAEA,SAAO,EAAE,UAAU,WAAW,QAAQ;AACxC;AAxCS;AA0CT,SAAS,wBAAwB,SAAoD;AACnF,QAAM,SAA4C,CAAC;AAGnD,QAAM,QAAQ,QAAQ,KAAK,EAAE,MAAM,KAAK;AAExC,aAAW,QAAQ,OAAO;AACxB,UAAM,CAAC,QAAQ,MAAM,IAAI,KAAK,MAAM,GAAG;AACvC,UAAM,MAAM,WAAW,MAAM;AAC7B,UAAM,MAAM,WAAW,MAAM;AAE7B,QAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG;AAC9B,aAAO,KAAK,EAAE,KAAK,IAAI,CAAC;AAAA,IAC1B;AAAA,EACF;AAEA,SAAO;AACT;AAjBS;AAmBT,SAAS,6BAA6B,UAGpC;AAIA,QAAM,YAAY,SAAS,YAAY;AAGvC,QAAM,cAA0D;AAAA,IAC9D,cAAc,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IAC7C,WAAW,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA,IACzC,SAAS,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA,IACvC,YAAY,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA,IAC1C,cAAc,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IAC7C,UAAU,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IACzC,UAAU,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IACzC,WAAW,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IAC1C,UAAU,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IACzC,UAAU,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA,IACzC,eAAe,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA,EAC/C;AAEA,aAAW,CAAC,QAAQ,MAAM,KAAK,OAAO,QAAQ,WAAW,GAAG;AAC1D,QAAI,UAAU,SAAS,MAAM,GAAG;AAC9B,aAAO,EAAE,UAAU,OAAO,KAAK,WAAW,OAAO,IAAI;AAAA,IACvD;AAAA,EACF;AAGA,SAAO,EAAE,UAAU,SAAS,WAAW,SAAS;AAClD;AAhCS;AAkCT,SAAS,sBAAsB,KAAqB;AAGlD,QAAM,QAAQ,IAAI,MAAM,yDAAyD;AACjF,MAAI,OAAO;AACT,WAAO,GAAG,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;AAAA,EAC5C;AAGA,SAAO,IAAI,MAAM,GAAG,EAAE,IAAI,GAAG,QAAQ,kBAAkB,GAAG,KAAK;AACjE;AAVS;AAYT,SAASA,4BAA2B,UAAyB,SAAwB,UAAiC;AAEpH,MAAI,iBAAiB;AAGrB,UAAQ,UAAU,YAAY,GAAG;AAAA,IAC/B,KAAK;AACH,wBAAkB;AAClB;AAAA,IACF,KAAK;AACH,wBAAkB;AAClB;AAAA,IACF,KAAK;AACH,wBAAkB;AAClB;AAAA,IACF,KAAK;AACH,wBAAkB;AAClB;AAAA,EACJ;AAGA,UAAQ,SAAS,YAAY,GAAG;AAAA,IAC9B,KAAK;AACH,wBAAkB;AAClB;AAAA,IACF,KAAK;AACH,wBAAkB;AAClB;AAAA,EACJ;AAGA,MAAI,UAAU;AACZ,UAAM,YAAY,SAAS,YAAY;AAGvC,QAAI,UAAU,SAAS,aAAa,KAAK,UAAU,SAAS,UAAU,KAClE,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,SAAS,GAAG;AAClE,wBAAkB;AAAA,IACpB,WAES,UAAU,SAAS,MAAM,KAAK,UAAU,SAAS,OAAO,GAAG;AAClE,wBAAkB;AAAA,IACpB,WAES,UAAU,SAAS,QAAQ,GAAG;AACrC,wBAAkB;AAAA,IACpB,WAES,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,OAAO,GAAG;AACrE,wBAAkB;AAAA,IACpB;AAAA,EACF;AAEA,SAAO,KAAK,MAAM,cAAc;AAClC;AAtDS,OAAAA,6BAAA;;;ACxTF,SAAS,mBAAmB,YAAuC;AACxE,MAAI;AACF,YAAQ,IAAI,iCAAiC;AAE7C,UAAM,QAAQ,WAAW,KAAK,EAAE,MAAM,IAAI;AAC1C,QAAI,MAAM,UAAU,GAAG;AACrB,cAAQ,IAAI,sCAAsC;AAClD,aAAO,CAAC;AAAA,IACV;AAIA,UAAM,UAAU,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACrD,UAAM,YAA+B,CAAC;AAEtC,YAAQ,IAAI,SAAS,MAAM,SAAS,CAAC,yBAAyB;AAE9D,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI;AACF,cAAM,SAAS,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACpD,YAAI,OAAO,SAAS,QAAQ,OAAQ;AAEpC,cAAM,SAAiC,CAAC;AACxC,gBAAQ,QAAQ,CAAC,QAAQ,UAAU;AACjC,iBAAO,MAAM,IAAI,OAAO,KAAK;AAAA,QAC/B,CAAC;AAED,cAAM,WAAW,iBAAiB,MAAM;AACxC,YAAI,UAAU;AACZ,oBAAU,KAAK,QAAQ;AAAA,QACzB;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,sCAAsC,CAAC,KAAK,KAAK;AAAA,MAEjE;AAAA,IACF;AAEA,YAAQ,IAAI,uBAAuB,UAAU,MAAM,kBAAkB;AACrE,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO,CAAC;AAAA,EACV;AACF;AA3CgB;AA6ChB,SAAS,iBAAiB,QAAwD;AAChF,MAAI;AACF,UAAM,WAAW,WAAW,OAAO,QAAQ;AAC3C,UAAM,YAAY,WAAW,OAAO,SAAS;AAC7C,UAAM,aAAa,SAAS,OAAO,cAAc,KAAK,EAAE;AACxD,UAAM,aAAa,WAAW,OAAO,cAAc,GAAG;AACtD,UAAM,MAAM,WAAW,OAAO,OAAO,GAAG;AACxC,UAAM,WAAW,OAAO;AACxB,UAAM,WAAW,OAAO;AACxB,UAAM,YAAY,OAAO,aAAa;AACtC,UAAM,aAAa,OAAO,cAAc;AAGxC,QAAI,MAAM,QAAQ,KAAK,MAAM,SAAS,KAAK,CAAC,YAAY,CAAC,UAAU;AACjE,aAAO;AAAA,IACT;AAGA,UAAM,OAAO,SAAS,UAAU,GAAG,CAAC;AACpC,UAAM,QAAQ,SAAS,UAAU,GAAG,CAAC;AACrC,UAAM,MAAM,SAAS,UAAU,GAAG,EAAE;AACpC,UAAM,OAAO,SAAS,UAAU,GAAG,CAAC;AACpC,UAAM,SAAS,SAAS,UAAU,GAAG,CAAC;AACtC,UAAM,YAAY,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,IAAI,IAAI,MAAM;AAG3D,UAAM,cAAc,SAAS,SAAS,QAAQ,CAAC,CAAC,IAAI,UAAU,QAAQ,CAAC,CAAC,IAAI,QAAQ,IAAI,QAAQ;AAGhG,QAAI,WAAuC;AAG3C,QAAI,cAAc,MAAM,OAAO,KAAK;AAClC,iBAAW;AAAA,IACb,WAES,cAAc,MAAM,OAAO,IAAI;AACtC,iBAAW;AAAA,IACb,OAEK;AACH,iBAAW;AAAA,IACb;AAGA,UAAM,iBAAiB,cAAc,KAAK,SAAS,cAAc,KAAK,WAAW;AACjF,UAAM,QAAQ,0BAA0B,cAAc;AAGtD,UAAM,cAAc;AAAA,MAClB,cAAc,SAAS,IAAI,UAAU;AAAA,MACrC,eAAe,UAAU;AAAA,MACzB,aAAa,IAAI,eAAe,WAAW,QAAQ,CAAC,CAAC,MAAM;AAAA,MAC3D,MAAM,IAAI,yBAAyB,IAAI,QAAQ,CAAC,CAAC,QAAQ;AAAA,MACzD,cAAc,QAAQ,IAAI,QAAQ;AAAA,IACpC,EAAE,OAAO,OAAO,EAAE,KAAK,KAAK;AAG5B,UAAM,UAAU,gCAAgC,UAAU,SAAS;AAEnE,WAAO;AAAA,MACL;AAAA,MACA,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB;AAAA,MACA,qBAAqB;AAAA,IACvB;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAO;AAAA,EACT;AACF;AA5ES;AAgFT,SAAS,gCAAgC,KAAa,KAAiC;AAErF,MAAI,OAAO,MAAM,OAAO,MAAM,OAAO,QAAQ,OAAO,KAAK;AACvD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,MAAM,OAAO,MAAM,OAAO,QAAQ,OAAO,KAAK;AACvD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,MAAM,OAAO,MAAM,OAAO,QAAQ,OAAO,KAAK;AACvD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AACxD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,OAAO,OAAO,KAAK,OAAO,OAAO,OAAO,KAAK;AACtD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,MAAM,OAAO,MAAM,OAAO,MAAM,OAAO,KAAK;AACrD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,MAAM,OAAO,MAAM,OAAO,MAAM,OAAO,KAAK;AACrD,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,KAAK,OAAO,MAAM,OAAO,MAAM,OAAO,IAAI;AACnD,WAAO;AAAA,EACT;AAGA,SAAO;AACT;AA3CS;AA8CT,eAAsB,qBAAqB,QAAgB,WAAmB,GAA+B;AAC3G,MAAI;AAEF,UAAM,OAAO;AAGb,UAAM,SAAS;AAGf,UAAM,SAAQ,oBAAI,KAAK,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AACnD,UAAM,MAAM,qDAAqD,MAAM,IAAI,MAAM,IAAI,IAAI,IAAI,QAAQ,IAAI,KAAK;AAE9G,YAAQ,IAAI,6BAA6B,GAAG,EAAE;AAE9C,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,SAAS;AAAA,QACP,cAAc;AAAA,MAChB;AAAA,IACF,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,sBAAsB,SAAS,MAAM,KAAK,SAAS,UAAU,EAAE;AAAA,IACjF;AAEA,UAAM,aAAa,MAAM,SAAS,KAAK;AAGvC,QAAI,WAAW,SAAS,iBAAiB,KAAK,WAAW,SAAS,QAAQ,GAAG;AAC3E,YAAM,IAAI,MAAM,oBAAoB,UAAU,EAAE;AAAA,IAClD;AAEA,WAAO,mBAAmB,UAAU;AAAA,EACtC,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,UAAM;AAAA,EACR;AACF;AApCsB;;;AC1Lf,IAAM,cAAc,IAAI,YAAY;AAE3C,IAAM,cAAc;AAGpB,IAAM,eAAe,IAAI,WAAW,GAAG;AACvC,KAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,eAAa,YAAY,WAAW,CAAC,CAAC,IAAI;AAC9C;AAFS;AAIF,SAAS,aAAa,QAAQ;AACjC,MAAI,eAAe,KAAK,KAAK,OAAO,SAAS,CAAC,IAAI;AAClD,QAAM,MAAM,OAAO;AAEnB,MAAI,IAAI;AAER,MAAI,OAAO,SAAS,MAAM,GAAG;AACzB;AAAA,EACJ,WAAW,OAAO,SAAS,MAAM,GAAG;AAChC,oBAAgB;AAAA,EACpB,WAAW,OAAO,OAAO,SAAS,CAAC,MAAM,KAAK;AAC1C;AACA,QAAI,OAAO,OAAO,SAAS,CAAC,MAAM,KAAK;AACnC;AAAA,IACJ;AAAA,EACJ;AAEA,QAAM,cAAc,IAAI,YAAY,YAAY;AAChD,QAAM,QAAQ,IAAI,WAAW,WAAW;AAExC,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,QAAI,WAAW,aAAa,OAAO,WAAW,CAAC,CAAC;AAChD,QAAI,WAAW,aAAa,OAAO,WAAW,IAAI,CAAC,CAAC;AACpD,QAAI,WAAW,aAAa,OAAO,WAAW,IAAI,CAAC,CAAC;AACpD,QAAI,WAAW,aAAa,OAAO,WAAW,IAAI,CAAC,CAAC;AAEpD,UAAM,GAAG,IAAK,YAAY,IAAM,YAAY;AAC5C,UAAM,GAAG,KAAM,WAAW,OAAO,IAAM,YAAY;AACnD,UAAM,GAAG,KAAM,WAAW,MAAM,IAAM,WAAW;AAAA,EACrD;AAEA,SAAO;AACX;AAhCgB;AAkCT,SAAS,WAAW,SAAS;AAChC,YAAU,WAAW;AACrB,MAAI;AAEJ,MAAI;AACA,cAAU,IAAI,YAAY,OAAO;AAAA,EACrC,SAAS,KAAK;AACV,cAAU,IAAI,YAAY,cAAc;AAAA,EAC5C;AAEA,SAAO;AACX;AAXgB;AAkBhB,eAAsB,kBAAkB,MAAM;AAC1C,MAAI,iBAAiB,MAAM;AACvB,WAAO,MAAM,KAAK,YAAY;AAAA,EAClC;AAEA,QAAM,KAAK,IAAI,WAAW;AAE1B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,OAAG,SAAS,SAAU,GAAG;AACrB,cAAQ,EAAE,OAAO,MAAM;AAAA,IAC3B;AAEA,OAAG,UAAU,SAAU,GAAG;AACtB,aAAO,GAAG,KAAK;AAAA,IACnB;AAEA,OAAG,kBAAkB,IAAI;AAAA,EAC7B,CAAC;AACL;AAlBsB;AAoBf,SAAS,OAAO,GAAG;AACtB,MAAK,KAAK,MAAgB,KAAK,MAAkB,KAAK,MAAgB,KAAK,OAAkB,KAAK,MAAgB,KAAK,IAAe;AAClI,WAAO,OAAO,aAAa,CAAC;AAAA,EAChC;AACA,SAAO;AACX;AALgB;AAaT,SAAS,WAAW,SAAS,UAAU,KAAK;AAI/C,MAAI,WAAW,QAAQ,QAAQ,GAAG;AAClC,MAAI,YAAY,GAAG;AACf,cAAU,QAAQ,OAAO,GAAG,QAAQ;AAAA,EACxC;AAEA,aAAW,SAAS,YAAY;AAEhC,MAAI;AAEJ,MAAI,aAAa,KAAK;AAClB,UAAM,IAED,QAAQ,sBAAsB,KAAK,EAEnC,QAAQ,UAAU,GAAG;AAE1B,QAAI,MAAM,YAAY,OAAO,GAAG;AAChC,QAAI,eAAe,CAAC;AACpB,aAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC5C,UAAI,IAAI,IAAI,CAAC;AACb,UAAI,KAAK,MAAM,KAAK,MAAM,IAAc;AACpC,YAAI,KAAK,OAAO,IAAI,IAAI,CAAC,CAAC;AAC1B,YAAI,KAAK,OAAO,IAAI,IAAI,CAAC,CAAC;AAC1B,YAAI,MAAM,IAAI;AACV,cAAIC,KAAI,SAAS,KAAK,IAAI,EAAE;AAC5B,uBAAa,KAAKA,EAAC;AACnB,eAAK;AACL;AAAA,QACJ;AAAA,MACJ;AACA,mBAAa,KAAK,CAAC;AAAA,IACvB;AACA,cAAU,IAAI,YAAY,aAAa,MAAM;AAC7C,QAAI,WAAW,IAAI,SAAS,OAAO;AACnC,aAAS,IAAI,GAAG,MAAM,aAAa,QAAQ,IAAI,KAAK,KAAK;AACrD,eAAS,SAAS,GAAG,aAAa,CAAC,CAAC;AAAA,IACxC;AAAA,EACJ,WAAW,aAAa,KAAK;AACzB,cAAU,aAAa,IAAI,QAAQ,uBAAuB,EAAE,CAAC;AAAA,EACjE,OAAO;AAEH,cAAU,YAAY,OAAO,GAAG;AAAA,EACpC;AAEA,SAAO,WAAW,OAAO,EAAE,OAAO,OAAO;AAC7C;AAjDgB;AAmDT,SAAS,YAAY,KAAK;AAC7B,MAAI,aAAa;AACjB,MAAI,OAAO;AAEX,SAAO,CAAC,MAAM;AACV,QAAI,UAAU,OAAO,IAChB,SAAS,EAET,QAAQ,oEAAoE,CAAC,OAAO,MAAM,QAAQ,gBAAgB,YAAY;AAC3H,UAAI,CAAC,YAAY;AACb,eAAO;AAAA,MACX;AAEA,UAAI,WAAW,WAAW,eAAe,SAAS,MAAM,KAAK,CAAC,KAAK,KAAK,cAAc,GAAG;AAErF,eAAO,OAAO;AAAA,MAClB;AAEA,aAAO;AAAA,IACX,CAAC,EAEA,QAAQ,kEAAkE,CAAC,OAAO,MAAM,QAAQ,YAAY;AACzG,UAAI,CAAC,YAAY;AACb,eAAO;AAAA,MACX;AAEA,UAAI,WAAW,SAAS;AAEpB,eAAO,OAAO;AAAA,MAClB;AACA,aAAO;AAAA,IACX,CAAC,EAEA,QAAQ,kDAAkD,EAAE,EAE5D,QAAQ,kEAAkE,IAAI,EAE9E,QAAQ,yCAAyC,CAAC,GAAG,SAAS,UAAU,SAAS,WAAW,SAAS,UAAU,IAAI,CAAC;AAEzH,QAAI,cAAc,OAAO,QAAQ,QAAQ,KAAK,GAAG;AAE7C,mBAAa;AAAA,IACjB,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AA9CgB;AAgDT,SAAS,8BAA8B,YAAY,SAAS;AAC/D,YAAU,WAAW;AAErB,MAAI,eAAe,CAAC;AACpB,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,QAAI,IAAI,WAAW,OAAO,CAAC;AAC3B,QAAI,MAAM,OAAO,gBAAgB,KAAK,WAAW,OAAO,IAAI,GAAG,CAAC,CAAC,GAAG;AAEhE,UAAI,OAAO,WAAW,OAAO,IAAI,GAAG,CAAC;AACrC,WAAK;AACL,mBAAa,KAAK,SAAS,MAAM,EAAE,CAAC;AAAA,IACxC,WAAW,EAAE,WAAW,CAAC,IAAI,KAAK;AAC9B,UAAI,YAAY,OAAO,CAAC;AACxB,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,qBAAa,KAAK,EAAE,CAAC,CAAC;AAAA,MAC1B;AAAA,IACJ,OAAO;AAEH,mBAAa,KAAK,EAAE,WAAW,CAAC,CAAC;AAAA,IACrC;AAAA,EACJ;AAEA,QAAM,UAAU,IAAI,YAAY,aAAa,MAAM;AACnD,QAAM,WAAW,IAAI,SAAS,OAAO;AACrC,WAAS,IAAI,GAAG,MAAM,aAAa,QAAQ,IAAI,KAAK,KAAK;AACrD,aAAS,SAAS,GAAG,aAAa,CAAC,CAAC;AAAA,EACxC;AAEA,SAAO,WAAW,OAAO,EAAE,OAAO,OAAO;AAC7C;AA7BgB;AA+BT,SAAS,kCAAkC,QAAQ;AAKtD,MAAI,YAAY,oBAAI,IAAI;AAExB,SAAO,KAAK,OAAO,MAAM,EAAE,QAAQ,SAAO;AACtC,QAAI,QAAQ,IAAI,MAAM,gBAAgB;AACtC,QAAI,CAAC,OAAO;AAER;AAAA,IACJ;AAEA,QAAI,YAAY,IAAI,OAAO,GAAG,MAAM,KAAK,EAAE,YAAY;AACvD,QAAI,KAAK,OAAO,MAAM,CAAC,CAAC,KAAK;AAE7B,QAAI;AACJ,QAAI,CAAC,UAAU,IAAI,SAAS,GAAG;AAC3B,iBAAW;AAAA,QACP,SAAS;AAAA,QACT,QAAQ,CAAC;AAAA,MACb;AACA,gBAAU,IAAI,WAAW,QAAQ;AAAA,IACrC,OAAO;AACH,iBAAW,UAAU,IAAI,SAAS;AAAA,IACtC;AAEA,QAAI,QAAQ,OAAO,OAAO,GAAG;AAC7B,QAAI,OAAO,KAAK,MAAM,CAAC,EAAE,OAAO,MAAM,CAAC,EAAE,SAAS,CAAC,MAAM,QAAQ,QAAQ,MAAM,MAAM,sBAAsB,IAAI;AAC3G,eAAS,UAAU,MAAM,CAAC,KAAK;AAC/B,cAAQ,MAAM,CAAC;AAAA,IACnB;AAEA,aAAS,OAAO,KAAK,EAAE,IAAI,MAAM,CAAC;AAGlC,WAAO,OAAO,OAAO,GAAG;AAAA,EAC5B,CAAC;AAED,YAAU,QAAQ,CAAC,UAAU,QAAQ;AACjC,WAAO,OAAO,GAAG,IAAI;AAAA,MACjB,SAAS,OACJ,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE,EAC1B,IAAI,OAAK,EAAE,KAAK,EAChB,KAAK,EAAE;AAAA,MACZ,SAAS;AAAA,IACb;AAAA,EACJ,CAAC;AACL;AAjDgB;;;AC/NhB,IAAqB,qBAArB,MAAwC;AAAA,EAFxC,OAEwC;AAAA;AAAA;AAAA,EACpC,cAAc;AACV,SAAK,SAAS,CAAC;AAAA,EACnB;AAAA,EAEA,OAAO,MAAM;AACT,SAAK,OAAO,KAAK,IAAI;AACrB,SAAK,OAAO,KAAK,IAAI;AAAA,EACzB;AAAA,EAEA,WAAW;AAEP,WAAO,kBAAkB,IAAI,KAAK,KAAK,QAAQ,EAAE,MAAM,2BAA2B,CAAC,CAAC;AAAA,EACxF;AACJ;;;ACdA,IAAqB,gBAArB,MAAmC;AAAA,EAFnC,OAEmC;AAAA;AAAA;AAAA,EAC/B,YAAY,MAAM;AACd,WAAO,QAAQ,CAAC;AAEhB,SAAK,UAAU,KAAK,WAAW,IAAI,YAAY;AAE/C,SAAK,eAAe,MAAM;AAE1B,SAAK,SAAS,CAAC;AAEf,SAAK,YAAY;AAAA,EACrB;AAAA,EAEA,OAAO,QAAQ;AACX,QAAI,MAAM,KAAK,QAAQ,OAAO,MAAM;AAEpC,QAAI,kBAAkB,KAAK,GAAG,GAAG;AAC7B,YAAM,IAAI,QAAQ,qBAAqB,EAAE;AAAA,IAC7C;AAEA,SAAK,aAAa;AAElB,QAAI,KAAK,UAAU,UAAU,KAAK,cAAc;AAC5C,UAAI,eAAe,KAAK,MAAM,KAAK,UAAU,SAAS,CAAC,IAAI;AAC3D,UAAI;AAEJ,UAAI,iBAAiB,KAAK,UAAU,QAAQ;AACxC,oBAAY,KAAK;AACjB,aAAK,YAAY;AAAA,MACrB,OAAO;AACH,oBAAY,KAAK,UAAU,OAAO,GAAG,YAAY;AACjD,aAAK,YAAY,KAAK,UAAU,OAAO,YAAY;AAAA,MACvD;AAEA,UAAI,UAAU,QAAQ;AAClB,aAAK,OAAO,KAAK,aAAa,SAAS,CAAC;AAAA,MAC5C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,QAAI,KAAK,aAAa,CAAC,OAAO,KAAK,KAAK,SAAS,GAAG;AAChD,WAAK,OAAO,KAAK,aAAa,KAAK,SAAS,CAAC;AAAA,IACjD;AAEA,WAAO,kBAAkB,IAAI,KAAK,KAAK,QAAQ,EAAE,MAAM,2BAA2B,CAAC,CAAC;AAAA,EACxF;AACJ;;;AC/CA,IAAqB,YAArB,MAA+B;AAAA,EAF/B,OAE+B;AAAA;AAAA;AAAA,EAC3B,YAAY,MAAM;AACd,WAAO,QAAQ,CAAC;AAEhB,SAAK,UAAU,KAAK,WAAW,IAAI,YAAY;AAE/C,SAAK,eAAe,MAAM;AAE1B,SAAK,YAAY;AAEjB,SAAK,SAAS,CAAC;AAAA,EACnB;AAAA,EAEA,cAAc,cAAc;AACxB,QAAI,MAAM,IAAI,YAAY,aAAa,MAAM;AAC7C,QAAI,WAAW,IAAI,SAAS,GAAG;AAC/B,aAAS,IAAI,GAAG,MAAM,aAAa,QAAQ,IAAI,KAAK,KAAK;AACrD,eAAS,SAAS,GAAG,SAAS,aAAa,CAAC,GAAG,EAAE,CAAC;AAAA,IACtD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,KAAK;AAEd,UAAM,IAAI,QAAQ,WAAW,EAAE;AAE/B,QAAI,OAAO,IAAI,MAAM,OAAO;AAC5B,QAAI,eAAe,CAAC;AACpB,aAAS,QAAQ,MAAM;AACnB,UAAI,KAAK,OAAO,CAAC,MAAM,KAAK;AACxB,YAAI,aAAa,QAAQ;AACrB,eAAK,OAAO,KAAK,KAAK,cAAc,YAAY,CAAC;AACjD,yBAAe,CAAC;AAAA,QACpB;AACA,aAAK,OAAO,KAAK,IAAI;AACrB;AAAA,MACJ;AAEA,UAAI,KAAK,WAAW,GAAG;AACnB,qBAAa,KAAK,KAAK,OAAO,CAAC,CAAC;AAChC;AAAA,MACJ;AAEA,UAAI,KAAK,SAAS,GAAG;AACjB,qBAAa,KAAK,KAAK,OAAO,GAAG,CAAC,CAAC;AACnC,aAAK,OAAO,KAAK,KAAK,cAAc,YAAY,CAAC;AACjD,uBAAe,CAAC;AAEhB,eAAO,KAAK,OAAO,CAAC;AACpB,aAAK,OAAO,KAAK,IAAI;AAAA,MACzB;AAAA,IACJ;AACA,QAAI,aAAa,QAAQ;AACrB,WAAK,OAAO,KAAK,KAAK,cAAc,YAAY,CAAC;AACjD,qBAAe,CAAC;AAAA,IACpB;AAAA,EACJ;AAAA,EAEA,OAAO,QAAQ;AAEX,QAAI,MAAM,KAAK,QAAQ,OAAO,MAAM,IAAI;AAExC,UAAM,KAAK,YAAY;AAEvB,QAAI,IAAI,SAAS,KAAK,cAAc;AAChC,WAAK,YAAY;AACjB;AAAA,IACJ;AAEA,SAAK,YAAY;AAEjB,QAAI,gBAAgB,IAAI,MAAM,gBAAgB;AAC9C,QAAI,eAAe;AACf,UAAI,cAAc,UAAU,GAAG;AAC3B,aAAK,YAAY;AACjB;AAAA,MACJ;AACA,WAAK,YAAY,IAAI,OAAO,cAAc,KAAK;AAC/C,YAAM,IAAI,OAAO,GAAG,cAAc,KAAK;AAAA,IAC3C;AAEA,SAAK,aAAa,GAAG;AAAA,EACzB;AAAA,EAEA,WAAW;AACP,QAAI,KAAK,UAAU,QAAQ;AACvB,WAAK,aAAa,KAAK,SAAS;AAChC,WAAK,YAAY;AAAA,IACrB;AAGA,WAAO,kBAAkB,IAAI,KAAK,KAAK,QAAQ,EAAE,MAAM,2BAA2B,CAAC,CAAC;AAAA,EACxF;AACJ;;;AC1FA,IAAqB,WAArB,MAA8B;AAAA,EAL9B,OAK8B;AAAA;AAAA;AAAA,EAC1B,YAAY,MAAM;AACd,WAAO,QAAQ,CAAC;AAEhB,SAAK,aAAa,KAAK;AAEvB,SAAK,OAAO,CAAC,CAAC,KAAK;AACnB,SAAK,aAAa,CAAC;AACnB,QAAI,KAAK,YAAY;AACjB,WAAK,WAAW,WAAW,KAAK,IAAI;AAAA,IACxC;AAEA,SAAK,QAAQ;AAEb,SAAK,cAAc,CAAC;AAEpB,SAAK,cAAc;AAAA,MACf,OAAO;AAAA,MACP,SAAS;AAAA,IACb;AAEA,SAAK,0BAA0B;AAAA,MAC3B,OAAO;AAAA,IACX;AAEA,SAAK,qBAAqB;AAAA,MACtB,OAAO;AAAA,IACX;AAEA,SAAK,UAAU,CAAC;AAEhB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAEA,oBAAoB,kBAAkB;AAClC,QAAI,UAAU,KAAK,gBAAgB,GAAG;AAClC,WAAK,iBAAiB,IAAI,cAAc;AAAA,IAC5C,WAAW,oBAAoB,KAAK,gBAAgB,GAAG;AACnD,WAAK,iBAAiB,IAAI,UAAU,EAAE,SAAS,WAAW,KAAK,YAAY,OAAO,OAAO,OAAO,EAAE,CAAC;AAAA,IACvG,OAAO;AACH,WAAK,iBAAiB,IAAI,mBAAmB;AAAA,IACjD;AAAA,EACJ;AAAA,EAEA,MAAM,WAAW;AACb,QAAI,KAAK,UAAU,YAAY;AAC3B;AAAA,IACJ;AAEA,QAAI,KAAK,UAAU,UAAU;AACzB,WAAK,eAAe;AAAA,IACxB;AAGA,QAAI,aAAa,KAAK,WAAW;AACjC,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAI,WAAW,WAAW,CAAC;AAC3B,UAAI,SAAS,SAAS,MAAM;AACxB,mBAAW,OAAO,GAAG,CAAC;AACtB;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,KAAK,mBAAmB;AAE9B,SAAK,UAAU,KAAK,iBAAiB,MAAM,KAAK,eAAe,SAAS,IAAI;AAE5E,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,MAAM,qBAAqB;AACvB,aAAS,aAAa,KAAK,YAAY;AACnC,YAAM,UAAU,SAAS;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEA,sBAAsB,KAAK;AACvB,QAAI,WAAW;AAAA,MACX,OAAO;AAAA,MACP,QAAQ,CAAC;AAAA,IACb;AAEA,QAAI,MAAM;AACV,QAAI,QAAQ;AACZ,QAAI,QAAQ;AAEZ,QAAI,QAAQ;AACZ,QAAI,UAAU;AACd,QAAI;AAEJ,aAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC5C,YAAM,IAAI,OAAO,CAAC;AAClB,cAAQ,OAAO;AAAA,QACX,KAAK;AACD,cAAI,QAAQ,KAAK;AACb,kBAAM,MAAM,KAAK,EAAE,YAAY;AAC/B,oBAAQ;AACR,oBAAQ;AACR;AAAA,UACJ;AACA,mBAAS;AACT;AAAA,QACJ,KAAK;AACD,cAAI,SAAS;AACT,qBAAS;AAAA,UACb,WAAW,QAAQ,MAAM;AACrB,sBAAU;AACV;AAAA,UACJ,WAAW,SAAS,QAAQ,OAAO;AAC/B,oBAAQ;AAAA,UACZ,WAAW,CAAC,SAAS,QAAQ,KAAK;AAC9B,oBAAQ;AAAA,UACZ,WAAW,CAAC,SAAS,QAAQ,KAAK;AAC9B,gBAAI,QAAQ,OAAO;AACf,uBAAS,QAAQ,MAAM,KAAK;AAAA,YAChC,OAAO;AACH,uBAAS,OAAO,GAAG,IAAI,MAAM,KAAK;AAAA,YACtC;AACA,oBAAQ;AACR,oBAAQ;AAAA,UACZ,OAAO;AACH,qBAAS;AAAA,UACb;AACA,oBAAU;AACV;AAAA,MACR;AAAA,IACJ;AAGA,YAAQ,MAAM,KAAK;AACnB,QAAI,UAAU,SAAS;AACnB,UAAI,QAAQ,OAAO;AAEf,iBAAS,QAAQ;AAAA,MACrB,OAAO;AAEH,iBAAS,OAAO,GAAG,IAAI;AAAA,MAC3B;AAAA,IACJ,WAAW,OAAO;AAGd,eAAS,OAAO,MAAM,YAAY,CAAC,IAAI;AAAA,IAC3C;AAEA,QAAI,SAAS,OAAO;AAChB,eAAS,QAAQ,SAAS,MAAM,YAAY;AAAA,IAChD;AAGA,sCAAkC,QAAQ;AAE1C,WAAO;AAAA,EACX;AAAA,EAEA,iBAAiB,KAAK,OAAO;AACzB,WACI,IACK,MAAM,OAAO,EAGb,OAAO,CAAC,eAAe,iBAAiB;AACrC,UAAI,KAAK,KAAK,aAAa,KAAK,CAAC,aAAa,KAAK,aAAa,GAAG;AAC/D,YAAI,OAAO;AAGP,iBAAO,cAAc,MAAM,GAAG,EAAE,IAAI;AAAA,QACxC,OAAO;AACH,iBAAO,gBAAgB;AAAA,QAC3B;AAAA,MACJ,OAAO;AACH,eAAO,gBAAgB,OAAO;AAAA,MAClC;AAAA,IACJ,CAAC,EAGA,QAAQ,QAAQ,EAAE;AAAA,EAE/B;AAAA,EAEA,iBAAiB;AACb,QAAI,CAAC,KAAK,SAAS;AACf,aAAO;AAAA,IACX;AAEA,QAAI,MAAM,WAAW,KAAK,YAAY,OAAO,OAAO,OAAO,EAAE,OAAO,KAAK,OAAO;AAEhF,QAAI,YAAY,KAAK,KAAK,YAAY,OAAO,OAAO,MAAM,GAAG;AACzD,YAAM,KAAK,iBAAiB,KAAK,SAAS,KAAK,KAAK,YAAY,OAAO,OAAO,KAAK,CAAC;AAAA,IACxF;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,iBAAiB;AACb,aAAS,IAAI,KAAK,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AACnD,UAAI,OAAO,KAAK,YAAY,CAAC;AAC7B,UAAI,KAAK,MAAM,KAAK,IAAI,GAAG;AACvB,aAAK,YAAY,IAAI,CAAC,KAAK,OAAO;AAClC,aAAK,YAAY,OAAO,GAAG,CAAC;AAAA,MAChC,OAAO;AAEH,eAAO,KAAK,QAAQ,QAAQ,GAAG;AAC/B,YAAI,MAAM,KAAK,QAAQ,GAAG;AAC1B,YAAI,MAAM,MAAM,IAAI,KAAK,KAAK,IAAI,KAAK,OAAO,GAAG,GAAG,EAAE,KAAK;AAC3D,YAAI,QAAQ,MAAM,IAAI,KAAK,KAAK,OAAO,MAAM,CAAC,EAAE,KAAK;AACrD,aAAK,QAAQ,KAAK,EAAE,KAAK,IAAI,YAAY,GAAG,aAAa,KAAK,MAAM,CAAC;AAErE,gBAAQ,IAAI,YAAY,GAAG;AAAA,UACvB,KAAK;AACD,gBAAI,KAAK,YAAY,SAAS;AAC1B,mBAAK,cAAc,EAAE,OAAO,QAAQ,CAAC,EAAE;AAAA,YAC3C;AACA;AAAA,UACJ,KAAK;AACD,iBAAK,0BAA0B,EAAE,OAAO,QAAQ,CAAC,EAAE;AACnD;AAAA,UACJ,KAAK;AACD,iBAAK,qBAAqB,EAAE,OAAO,QAAQ,CAAC,EAAE;AAC9C;AAAA,UACJ,KAAK;AACD,iBAAK,YAAY;AACjB;AAAA,UACJ,KAAK;AACD,iBAAK,qBAAqB;AAC1B;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,YAAY,SAAS,KAAK,sBAAsB,KAAK,YAAY,KAAK;AAC3E,SAAK,YAAY,YAAY,gBAAgB,KAAK,KAAK,YAAY,OAAO,KAAK,IACzE,KAAK,YAAY,OAAO,MAAM,OAAO,KAAK,YAAY,OAAO,MAAM,QAAQ,GAAG,IAAI,CAAC,IACnF;AAEN,QAAI,KAAK,YAAY,aAAa,KAAK,YAAY,OAAO,OAAO,UAAU;AAEvE,WAAK,WAAW,WAAW,KAAK;AAAA,QAC5B,OAAO,YAAY,OAAO,KAAK,YAAY,OAAO,OAAO,QAAQ;AAAA,QACjE,MAAM;AAAA,MACV,CAAC;AAAA,IACL;AAEA,SAAK,mBAAmB,SAAS,KAAK,sBAAsB,KAAK,mBAAmB,KAAK;AAEzF,SAAK,wBAAwB,WAAW,KAAK,wBAAwB,MAChE,YAAY,EACZ,MAAM,QAAQ,EACd,MAAM;AAEX,SAAK,oBAAoB,KAAK,wBAAwB,QAAQ;AAAA,EAClE;AAAA,EAEA,KAAK,MAAM;AACP,YAAQ,KAAK,OAAO;AAAA,MAChB,KAAK;AACD,YAAI,CAAC,KAAK,QAAQ;AACd,eAAK,QAAQ;AACb,iBAAO,KAAK,eAAe;AAAA,QAC/B;AACA,aAAK,YAAY,KAAK,WAAW,EAAE,OAAO,IAAI,CAAC;AAC/C;AAAA,MACJ,KAAK,QAAQ;AAET,aAAK,eAAe,OAAO,IAAI;AAAA,MACnC;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC/QO,IAAM,eAAe;AAAA,EACxB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,mBAAmB;AAAA,EACnB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,eAAe;AAAA,EACf,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,0BAA0B;AAAA,EAC1B,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,aAAa;AAAA,EACb,eAAe;AAAA,EACf,SAAS;AAAA,EACT,SAAS;AAAA,EACT,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,8BAA8B;AAAA,EAC9B,2BAA2B;AAAA,EAC3B,qBAAqB;AAAA,EACrB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,qBAAqB;AAAA,EACrB,UAAU;AAAA,EACV,eAAe;AAAA,EACf,qCAAqC;AAAA,EACrC,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AAAA,EACT,WAAW;AAAA,EACX,SAAS;AAAA,EACT,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,4BAA4B;AAAA,EAC5B,sBAAsB;AAAA,EACtB,sBAAsB;AAAA,EACtB,aAAa;AAAA,EACb,mBAAmB;AAAA,EACnB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,2BAA2B;AAAA,EAC3B,eAAe;AAAA,EACf,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,0BAA0B;AAAA,EAC1B,mBAAmB;AAAA,EACnB,yBAAyB;AAAA,EACzB,8BAA8B;AAAA,EAC9B,0BAA0B;AAAA,EAC1B,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,eAAe;AAAA,EACf,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,eAAe;AAAA,EACf,yBAAyB;AAAA,EACzB,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,wBAAwB;AAAA,EACxB,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,sBAAsB;AAAA,EACtB,0BAA0B;AAAA,EAC1B,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,kBAAkB;AAAA,EAClB,SAAS;AAAA,EACT,SAAS;AAAA,EACT,uBAAuB;AAAA,EACvB,2BAA2B;AAAA,EAC3B,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,iBAAiB;AAAA,EACjB,uBAAuB;AAAA,EACvB,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,sBAAsB;AAAA,EACtB,eAAe;AAAA,EACf,kBAAkB;AAAA,EAClB,yBAAyB;AAAA,EACzB,iBAAiB;AAAA,EACjB,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,eAAe;AAAA,EACf,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,sBAAsB;AAAA,EACtB,qBAAqB;AAAA,EACrB,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,gBAAgB;AAAA,EAChB,mBAAmB;AAAA,EACnB,eAAe;AAAA,EACf,oBAAoB;AAAA,EACpB,sBAAsB;AAAA,EACtB,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,oBAAoB;AAAA,EACpB,eAAe;AAAA,EACf,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,mBAAmB;AAAA,EACnB,wBAAwB;AAAA,EACxB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,wBAAwB;AAAA,EACxB,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,SAAS;AAAA,EACT,eAAe;AAAA,EACf,UAAU;AAAA,EACV,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,yBAAyB;AAAA,EACzB,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,2BAA2B;AAAA,EAC3B,0BAA0B;AAAA,EAC1B,oBAAoB;AAAA,EACpB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,aAAa;AAAA,EACb,sBAAsB;AAAA,EACtB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,0BAA0B;AAAA,EAC1B,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,yBAAyB;AAAA,EACzB,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB,0BAA0B;AAAA,EAC1B,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,0BAA0B;AAAA,EAC1B,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,iBAAiB;AAAA,EACjB,uBAAuB;AAAA,EACvB,kBAAkB;AAAA,EAClB,6BAA6B;AAAA,EAC7B,uBAAuB;AAAA,EACvB,iBAAiB;AAAA,EACjB,sBAAsB;AAAA,EACtB,2BAA2B;AAAA,EAC3B,uBAAuB;AAAA,EACvB,sBAAsB;AAAA,EACtB,yBAAyB;AAAA,EACzB,2BAA2B;AAAA,EAC3B,qBAAqB;AAAA,EACrB,0BAA0B;AAAA,EAC1B,uBAAuB;AAAA,EACvB,4BAA4B;AAAA,EAC5B,eAAe;AAAA,EACf,oBAAoB;AAAA,EACpB,iBAAiB;AAAA,EACjB,sBAAsB;AAAA,EACtB,2BAA2B;AAAA,EAC3B,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,sBAAsB;AAAA,EACtB,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,0BAA0B;AAAA,EAC1B,oBAAoB;AAAA,EACpB,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,aAAa;AAAA,EACb,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,qBAAqB;AAAA,EACrB,cAAc;AAAA,EACd,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,wBAAwB;AAAA,EACxB,mBAAmB;AAAA,EACnB,WAAW;AAAA,EACX,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,oBAAoB;AAAA,EACpB,wBAAwB;AAAA,EACxB,0BAA0B;AAAA,EAC1B,SAAS;AAAA,EACT,SAAS;AAAA,EACT,uBAAuB;AAAA,EACvB,gBAAgB;AAAA,EAChB,mBAAmB;AAAA,EACnB,yBAAyB;AAAA,EACzB,kBAAkB;AAAA,EAClB,wBAAwB;AAAA,EACxB,wBAAwB;AAAA,EACxB,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,sBAAsB;AAAA,EACtB,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,sBAAsB;AAAA,EACtB,mBAAmB;AAAA,EACnB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,wBAAwB;AAAA,EACxB,kBAAkB;AAAA,EAClB,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB,yBAAyB;AAAA,EACzB,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,wBAAwB;AAAA,EACxB,mBAAmB;AAAA,EACnB,cAAc;AAAA,EACd,SAAS;AAAA,EACT,SAAS;AAAA,EACT,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AAAA,EACT,eAAe;AAAA,EACf,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,eAAe;AAAA,EACf,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,WAAW;AAAA,EACX,eAAe;AAAA,EACf,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,UAAU;AAAA,EACV,aAAa;AAAA,EACb,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,mBAAmB;AAAA,EACnB,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAAA,EACd,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AAAA,EACX,aAAa;AAAA,EACb,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,cAAc;AAAA,EACd,WAAW;AAAA,EACX,UAAU;AAAA,EACV,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,aAAa;AAAA,EACb,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,cAAc;AAAA,EACd,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,aAAa;AAAA,EACb,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,cAAc;AAAA,EACd,eAAe;AAAA,EACf,cAAc;AAAA,EACd,aAAa;AAAA,EACb,qBAAqB;AAAA,EACrB,mBAAmB;AAAA,EACnB,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,wBAAwB;AAAA,EACxB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,aAAa;AAAA,EACb,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,EACd,aAAa;AAAA,EACb,cAAc;AAAA,EACd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,cAAc;AAAA,EACd,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,eAAe;AAAA,EACf,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,eAAe;AAAA,EACf,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,UAAU;AAAA,EACV,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,SAAS;AAAA,EACT,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,WAAW;AAAA,EACX,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,SAAS;AAAA,EACT,aAAa;AAAA,EACb,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,mBAAmB;AAAA,EACnB,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,cAAc;AAAA,EACd,cAAc;AAAA,EACd,aAAa;AAAA,EACb,eAAe;AAAA,EACf,oBAAoB;AAAA,EACpB,eAAe;AAAA,EACf,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,cAAc;AAAA,EACd,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,SAAS;AAAA,EACT,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,cAAc;AAAA,EACd,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,cAAc;AAAA,EACd,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,cAAc;AAAA,EACd,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,cAAc;AAAA,EACd,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,aAAa;AAAA,EACb,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,EACd,cAAc;AAAA,EACd,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,aAAa;AAAA,EACb,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,cAAc;AAAA,EACd,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB,qBAAqB;AAAA,EACrB,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,yBAAyB;AAAA,EACzB,oBAAoB;AAAA,EACpB,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,cAAc;AAAA,EACd,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,cAAc;AAAA,EACd,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,SAAS;AAAA,EACT,UAAU;AAAA,EACV,cAAc;AAAA,EACd,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,mBAAmB;AAAA,EACnB,wBAAwB;AAAA,EACxB,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,aAAa;AAAA,EACb,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,EACd,aAAa;AAAA,EACb,eAAe;AAAA,EACf,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,aAAa;AAAA,EACb,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,mBAAmB;AAAA,EACnB,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,aAAa;AAAA,EACb,cAAc;AAAA,EACd,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,eAAe;AAAA,EACf,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,gBAAgB;AAAA,EAChB,qBAAqB;AAAA,EACrB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,eAAe;AAAA,EACf,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,UAAU;AAAA,EACV,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,eAAe;AAAA,EACf,oBAAoB;AAAA,EACpB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,mBAAmB;AAAA,EACnB,qBAAqB;AAAA,EACrB,oBAAoB;AAAA,EACpB,sBAAsB;AAAA,EACtB,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,aAAa;AAAA,EACb,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAAA,EACd,WAAW;AAAA,EACX,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,WAAW;AAAA,EACX,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,eAAe;AAAA,EACf,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,aAAa;AAAA,EACb,cAAc;AAAA,EACd,WAAW;AAAA,EACX,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,sBAAsB;AAAA,EACtB,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,cAAc;AAAA,EACd,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,mBAAmB;AAAA,EACnB,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,qBAAqB;AAAA,EACrB,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,eAAe;AAAA,EACf,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,UAAU;AAAA,EACV,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,eAAe;AAAA,EACf,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,WAAW;AAAA,EACX,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,aAAa;AAAA,EACb,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,eAAe;AAAA,EACf,mBAAmB;AAAA,EACnB,qBAAqB;AAAA,EACrB,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,cAAc;AAAA,EACd,aAAa;AAAA,EACb,WAAW;AAAA,EACX,aAAa;AAAA,EACb,cAAc;AAAA,EACd,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,sBAAsB;AAAA,EACtB,uBAAuB;AAAA,EACvB,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,EACT,UAAU;AAAA,EACV,aAAa;AAAA,EACb,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,eAAe;AAAA,EACf,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,cAAc;AAAA,EACd,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,SAAS;AAAA,EACT,WAAW;AAAA,EACX,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,aAAa;AAAA,EACb,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AACd;AAEA,IAAO,wBAAQ;;;ACzrER,SAAS,mBAAmB,KAAK;AACpC,SAAO,IAAI,QAAQ,qCAAqC,CAAC,OAAO,WAAW;AACvE,QAAI,OAAO,sBAAa,KAAK,MAAM,UAAU;AACzC,aAAO,sBAAa,KAAK;AAAA,IAC7B;AAEA,QAAI,OAAO,OAAO,CAAC,MAAM,OAAO,MAAM,OAAO,MAAM,SAAS,CAAC,MAAM,KAAK;AAEpE,aAAO;AAAA,IACX;AAEA,QAAI;AACJ,QAAI,OAAO,OAAO,CAAC,MAAM,KAAK;AAE1B,kBAAY,SAAS,OAAO,OAAO,CAAC,GAAG,EAAE;AAAA,IAC7C,OAAO;AAEH,kBAAY,SAAS,OAAO,OAAO,CAAC,GAAG,EAAE;AAAA,IAC7C;AAEA,QAAI,SAAS;AAEb,QAAK,aAAa,SAAU,aAAa,SAAW,YAAY,SAAU;AAEtE,aAAO;AAAA,IACX;AAEA,QAAI,YAAY,OAAQ;AACpB,mBAAa;AACb,gBAAU,OAAO,aAAe,cAAc,KAAM,OAAS,KAAM;AACnE,kBAAY,QAAU,YAAY;AAAA,IACtC;AAEA,cAAU,OAAO,aAAa,SAAS;AAEvC,WAAO;AAAA,EACX,CAAC;AACL;AArCgB;AAuCT,SAAS,WAAW,KAAK;AAC5B,SAAO,IAAI,KAAK,EAAE,QAAQ,aAAa,OAAK;AACxC,QAAI,MAAM,EAAE,WAAW,CAAC,EAAE,SAAS,EAAE;AACrC,QAAI,IAAI,SAAS,GAAG;AAChB,YAAM,MAAM;AAAA,IAChB;AACA,WAAO,QAAQ,IAAI,YAAY,IAAI;AAAA,EACvC,CAAC;AACL;AARgB;AAUT,SAAS,WAAW,KAAK;AAC5B,MAAI,OAAO,WAAW,GAAG,EAAE,QAAQ,OAAO,QAAQ;AAClD,SAAO,UAAU,OAAO;AAC5B;AAHgB;AAKT,SAAS,WAAW,KAAK;AAC5B,QAAM,IAED,QAAQ,UAAU,GAAQ,EAC1B,QAAQ,qBAAqB,GAAG,EAEhC,QAAQ,iBAAiB,IAAI,EAC7B,QAAQ,wCAAwC,MAAM,EACtD,QAAQ,yCAAyC,GAAG,EACpD,QAAQ,qBAAqB,EAAE,EAC/B,QAAQ,uBAAuB,EAAE,EACjC,QAAQ,0BAA0B,EAAE,EACpC,QAAQ,uBAAuB,EAAE,EACjC,QAAQ,uBAAuB,EAAE,EAEjC,QAAQ,+CAA+C,QAAQ,EAE/D,QAAQ,0CAA0C,EAAE,EAEpD,QAAQ,8BAA8B,IAAI,EAE1C,QAAQ,gBAAgB,mBAAmB,EAE3C,QAAQ,YAAY,GAAG,EAGvB,QAAQ,WAAW,IAAI,EAEvB,QAAQ,WAAW,GAAG,EAEtB,QAAQ,WAAW,EAAE,EAErB,QAAQ,UAAU,MAAM,EACxB,QAAQ,QAAQ,IAAI,EACpB,QAAQ,QAAQ,IAAI;AAEzB,QAAM,mBAAmB,GAAG;AAE5B,SAAO;AACX;AAvCgB;AAyChB,SAAS,kBAAkB,SAAS;AAChC,SAAO,CAAC,EACH,OAAO,QAAQ,QAAQ,CAAC,CAAC,EACzB,OAAO,QAAQ,OAAO,IAAI,QAAQ,OAAO,MAAM,QAAQ,OAAO,EAC9D,KAAK,GAAG;AACjB;AALS;AAOT,SAAS,oBAAoB,WAAW;AACpC,MAAI,QAAQ,CAAC;AAEb,MAAI,iBAAiB,wBAAC,SAAS,gBAAgB;AAC3C,QAAI,aAAa;AACb,YAAM,KAAK,IAAI;AAAA,IACnB;AAEA,QAAI,QAAQ,OAAO;AACf,UAAI,aAAa,GAAG,QAAQ,IAAI;AAChC,UAAI,WAAW;AAEf,YAAM,KAAK,UAAU;AACrB,cAAQ,MAAM,QAAQ,cAAc;AACpC,YAAM,KAAK,QAAQ;AAAA,IACvB,OAAO;AACH,YAAM,KAAK,kBAAkB,OAAO,CAAC;AAAA,IACzC;AAAA,EACJ,GAfqB;AAiBrB,YAAU,QAAQ,cAAc;AAEhC,SAAO,MAAM,KAAK,EAAE;AACxB;AAvBS;AAyBT,SAAS,kBAAkB,SAAS;AAChC,SAAO,mBAAmB,WAAW,QAAQ,OAAO,CAAC,kCAAkC,WAAW,QAAQ,QAAQ,IAAI,QAAQ,OAAO,GAAG,CAAC;AAC7I;AAFS;AAIT,SAAS,oBAAoB,WAAW;AACpC,MAAI,QAAQ,CAAC;AAEb,MAAI,iBAAiB,wBAAC,SAAS,gBAAgB;AAC3C,QAAI,aAAa;AACb,YAAM,KAAK,wDAAwD;AAAA,IACvE;AAEA,QAAI,QAAQ,OAAO;AACf,UAAI,aAAa,4CAA4C,WAAW,QAAQ,IAAI,CAAC;AACrF,UAAI,WAAW;AAEf,YAAM,KAAK,UAAU;AACrB,cAAQ,MAAM,QAAQ,cAAc;AACpC,YAAM,KAAK,QAAQ;AAAA,IACvB,OAAO;AACH,YAAM,KAAK,kBAAkB,OAAO,CAAC;AAAA,IACzC;AAAA,EACJ,GAfqB;AAiBrB,YAAU,QAAQ,cAAc;AAEhC,SAAO,MAAM,KAAK,GAAG;AACzB;AAvBS;AAyBT,SAAS,UAAU,KAAK,YAAY,YAAY;AAC5C,SAAO,OAAO,IAAI,SAAS;AAC3B,eAAa,cAAc;AAE3B,MAAI,MAAM,GACN,MAAM,IAAI,QACV,SAAS,IACT,MACA;AAEJ,SAAO,MAAM,KAAK;AACd,WAAO,IAAI,OAAO,KAAK,UAAU;AACjC,QAAI,KAAK,SAAS,YAAY;AAC1B,gBAAU;AACV;AAAA,IACJ;AACA,QAAK,QAAQ,KAAK,MAAM,qBAAqB,GAAI;AAC7C,aAAO,MAAM,CAAC;AACd,gBAAU;AACV,aAAO,KAAK;AACZ;AAAA,IACJ,YAAY,QAAQ,KAAK,MAAM,cAAc,MAAM,MAAM,CAAC,EAAE,UAAU,cAAc,MAAM,CAAC,KAAK,IAAI,SAAS,KAAK,KAAK,QAAQ;AAC3H,aAAO,KAAK,OAAO,GAAG,KAAK,UAAU,MAAM,CAAC,EAAE,UAAU,cAAc,MAAM,CAAC,KAAK,IAAI,SAAS,GAAG;AAAA,IACtG,WAAY,QAAQ,IAAI,OAAO,MAAM,KAAK,MAAM,EAAE,MAAM,cAAc,GAAI;AACtE,aAAO,OAAO,MAAM,CAAC,EAAE,OAAO,GAAG,MAAM,CAAC,EAAE,UAAU,CAAC,cAAc,MAAM,CAAC,KAAK,IAAI,SAAS,EAAE;AAAA,IAClG;AAEA,cAAU;AACV,WAAO,KAAK;AACZ,QAAI,MAAM,KAAK;AACX,gBAAU;AAAA,IACd;AAAA,EACJ;AAEA,SAAO;AACX;AAnCS;AAqCF,SAAS,iBAAiB,SAAS;AACtC,MAAI,OAAO,CAAC;AAEZ,MAAI,QAAQ,MAAM;AACd,SAAK,KAAK,EAAE,KAAK,QAAQ,KAAK,kBAAkB,QAAQ,IAAI,EAAE,CAAC;AAAA,EACnE;AAEA,MAAI,QAAQ,SAAS;AACjB,SAAK,KAAK,EAAE,KAAK,WAAW,KAAK,QAAQ,QAAQ,CAAC;AAAA,EACtD;AAEA,MAAI,QAAQ,MAAM;AACd,QAAI,cAAc;AAAA,MACd,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAEA,QAAI,UAAU,OAAO,SAAS,cAAc,QAAQ,OAAO,IAAI,KAAK,eAAe,WAAW,WAAW,EAAE,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC;AAExI,SAAK,KAAK,EAAE,KAAK,QAAQ,KAAK,QAAQ,CAAC;AAAA,EAC3C;AAEA,MAAI,QAAQ,MAAM,QAAQ,GAAG,QAAQ;AACjC,SAAK,KAAK,EAAE,KAAK,MAAM,KAAK,oBAAoB,QAAQ,EAAE,EAAE,CAAC;AAAA,EACjE;AAEA,MAAI,QAAQ,MAAM,QAAQ,GAAG,QAAQ;AACjC,SAAK,KAAK,EAAE,KAAK,MAAM,KAAK,oBAAoB,QAAQ,EAAE,EAAE,CAAC;AAAA,EACjE;AAEA,MAAI,QAAQ,OAAO,QAAQ,IAAI,QAAQ;AACnC,SAAK,KAAK,EAAE,KAAK,OAAO,KAAK,oBAAoB,QAAQ,GAAG,EAAE,CAAC;AAAA,EACnE;AAcA,MAAI,eAAe,KACd,IAAI,OAAK,EAAE,IAAI,MAAM,EACrB,OAAO,CAAC,KAAK,QAAQ;AAClB,WAAO,MAAM,MAAM,MAAM;AAAA,EAC7B,GAAG,CAAC;AAER,SAAO,KAAK,QAAQ,SAAO;AACvB,QAAI,SAAS,eAAe,IAAI,IAAI;AACpC,QAAI,SAAS,GAAG,IAAI,GAAG,KAAK,IAAI,OAAO,MAAM,CAAC;AAC9C,QAAI,cAAc,GAAG,IAAI,OAAO,IAAI,IAAI,SAAS,CAAC,CAAC,IAAI,IAAI,OAAO,MAAM,CAAC;AAEzE,QAAI,cAAc,UAAU,IAAI,KAAK,IAAI,IAAI,EACxC,MAAM,OAAO,EACb,IAAI,UAAQ,KAAK,KAAK,CAAC;AAE5B,WAAO,YAAY,IAAI,CAAC,MAAM,MAAM,GAAG,IAAI,cAAc,MAAM,GAAG,IAAI,EAAE;AAAA,EAC5E,CAAC;AAED,MAAI,gBAAgB,KACf,IAAI,OAAK,EAAE,MAAM,EACjB,OAAO,CAAC,KAAK,QAAQ;AAClB,WAAO,MAAM,MAAM,MAAM;AAAA,EAC7B,GAAG,CAAC;AAER,MAAI,aAAa,IAAI,OAAO,aAAa;AAEzC,MAAI,WAAW;AAAA,EACjB,UAAU;AAAA,EACV,KAAK,KAAK,IAAI,CAAC;AAAA,EACf,UAAU;AAAA;AAGR,SAAO;AACX;AApFgB;AAsFT,SAAS,iBAAiB,SAAS;AACtC,MAAI,OAAO,CAAC;AAEZ,MAAI,QAAQ,MAAM;AACd,SAAK,KAAK,yFAAyF,kBAAkB,QAAQ,IAAI,CAAC,QAAQ;AAAA,EAC9I;AAEA,MAAI,QAAQ,SAAS;AACjB,SAAK;AAAA,MACD,wHAAwH;AAAA,QACpH,QAAQ;AAAA,MACZ,CAAC;AAAA,IACL;AAAA,EACJ;AAEA,MAAI,QAAQ,MAAM;AACd,QAAI,cAAc;AAAA,MACd,MAAM;AAAA,MACN,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAEA,QAAI,UAAU,OAAO,SAAS,cAAc,QAAQ,OAAO,IAAI,KAAK,eAAe,WAAW,WAAW,EAAE,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC;AAExI,SAAK;AAAA,MACD,6HAA6H;AAAA,QACzH,QAAQ;AAAA,MACZ,CAAC,KAAK,WAAW,OAAO,CAAC;AAAA,IAC7B;AAAA,EACJ;AAEA,MAAI,QAAQ,MAAM,QAAQ,GAAG,QAAQ;AACjC,SAAK,KAAK,uFAAuF,oBAAoB,QAAQ,EAAE,CAAC,QAAQ;AAAA,EAC5I;AAEA,MAAI,QAAQ,MAAM,QAAQ,GAAG,QAAQ;AACjC,SAAK,KAAK,uFAAuF,oBAAoB,QAAQ,EAAE,CAAC,QAAQ;AAAA,EAC5I;AAEA,MAAI,QAAQ,OAAO,QAAQ,IAAI,QAAQ;AACnC,SAAK,KAAK,wFAAwF,oBAAoB,QAAQ,GAAG,CAAC,QAAQ;AAAA,EAC9I;AAEA,MAAI,WAAW,oCAAoC,KAAK,SAAS,0CAA0C,EAAE,GAAG,KAAK;AAAA,IACjH;AAAA,EACJ,CAAC,GAAG,KAAK,SAAS,WAAW,EAAE;AAE/B,SAAO;AACX;AApDgB;;;ACjRhB,SAAS,eAAe,QAAQ;AAC5B,MAAI;AACJ,MAAI,UAAU;AACd,MAAI,QAAQ;AACZ,MAAI;AACJ,MAAI,YAAY,CAAC;AACjB,MAAI,OAAO;AAAA,IACP,SAAS,CAAC;AAAA,IACV,SAAS,CAAC;AAAA,IACV,OAAO,CAAC;AAAA,IACR,MAAM,CAAC;AAAA,EACX;AACA,MAAI;AACJ,MAAI;AAGJ,OAAK,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAC3C,YAAQ,OAAO,CAAC;AAChB,QAAI,MAAM,SAAS,YAAY;AAC3B,cAAQ,MAAM,OAAO;AAAA,QACjB,KAAK;AACD,kBAAQ;AACR;AAAA,QACJ,KAAK;AACD,kBAAQ;AACR;AAAA,QACJ,KAAK;AACD,kBAAQ;AACR,oBAAU;AACV;AAAA,QACJ;AACI,kBAAQ;AAAA,MAChB;AAAA,IACJ,WAAW,MAAM,OAAO;AACpB,UAAI,UAAU,WAAW;AAIrB,cAAM,QAAQ,MAAM,MAAM,QAAQ,cAAc,EAAE;AAAA,MACtD;AACA,WAAK,KAAK,EAAE,KAAK,MAAM,KAAK;AAAA,IAChC;AAAA,EACJ;AAGA,MAAI,CAAC,KAAK,KAAK,UAAU,KAAK,QAAQ,QAAQ;AAC1C,SAAK,OAAO,KAAK;AACjB,SAAK,UAAU,CAAC;AAAA,EACpB;AAEA,MAAI,SAAS;AAET,SAAK,OAAO,KAAK,KAAK,KAAK,GAAG;AAC9B,cAAU,KAAK;AAAA,MACX,MAAM,YAAY,KAAK,QAAS,WAAW,QAAQ,IAAK;AAAA,MACxD,OAAO,KAAK,MAAM,SAAS,cAAc,KAAK,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC;AAAA,IACtE,CAAC;AAAA,EACL,OAAO;AAEH,QAAI,CAAC,KAAK,QAAQ,UAAU,KAAK,KAAK,QAAQ;AAC1C,WAAK,IAAI,KAAK,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK;AACxC,YAAI,KAAK,KAAK,CAAC,EAAE,MAAM,mBAAmB,GAAG;AACzC,eAAK,UAAU,KAAK,KAAK,OAAO,GAAG,CAAC;AACpC;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,gBAAgB,gCAAUC,UAAS;AACnC,YAAI,CAAC,KAAK,QAAQ,QAAQ;AACtB,eAAK,UAAU,CAACA,SAAQ,KAAK,CAAC;AAC9B,iBAAO;AAAA,QACX,OAAO;AACH,iBAAOA;AAAA,QACX;AAAA,MACJ,GAPoB;AAUpB,UAAI,CAAC,KAAK,QAAQ,QAAQ;AACtB,aAAK,IAAI,KAAK,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK;AAExC,eAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE,QAAQ,4BAA4B,aAAa,EAAE,KAAK;AACpF,cAAI,KAAK,QAAQ,QAAQ;AACrB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,CAAC,KAAK,KAAK,UAAU,KAAK,QAAQ,QAAQ;AAC1C,WAAK,OAAO,KAAK;AACjB,WAAK,UAAU,CAAC;AAAA,IACpB;AAGA,QAAI,KAAK,QAAQ,SAAS,GAAG;AACzB,WAAK,OAAO,KAAK,KAAK,OAAO,KAAK,QAAQ,OAAO,CAAC,CAAC;AAAA,IACvD;AAGA,SAAK,OAAO,KAAK,KAAK,KAAK,GAAG;AAC9B,SAAK,UAAU,KAAK,QAAQ,KAAK,GAAG;AAEpC,QAAI,CAAC,KAAK,WAAW,eAAe,KAAK,KAAK,KAAK,KAAK,CAAC,GAAG;AAExD,YAAM,qBAAqB,cAAc,YAAY,KAAK,IAAI,CAAC;AAC/D,UAAI,sBAAsB,mBAAmB,QAAQ;AACjD,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,WAAW,SAAS;AAC1B,aAAO,CAAC;AAAA,IACZ,OAAO;AACH,gBAAU;AAAA,QACN,SAAS,KAAK,WAAW,KAAK,QAAQ;AAAA,QACtC,MAAM,YAAY,KAAK,QAAQ,KAAK,WAAW,EAAE;AAAA,MACrD;AAEA,UAAI,QAAQ,YAAY,QAAQ,MAAM;AAClC,aAAK,QAAQ,WAAW,IAAI,MAAM,GAAG,GAAG;AACpC,kBAAQ,OAAO;AAAA,QACnB,OAAO;AACH,kBAAQ,UAAU;AAAA,QACtB;AAAA,MACJ;AAEA,gBAAU,KAAK,OAAO;AAAA,IAC1B;AAAA,EACJ;AAEA,SAAO;AACX;AApIS;AA4IT,IAAM,YAAN,MAAgB;AAAA,EApJhB,OAoJgB;AAAA;AAAA;AAAA,EACZ,YAAY,KAAK;AACb,SAAK,OAAO,OAAO,IAAI,SAAS;AAChC,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,OAAO;AACZ,SAAK,UAAU;AAEf,SAAK,OAAO,CAAC;AAIb,SAAK,YAAY;AAAA,MACb,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOL,KAAK;AAAA,IACT;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW;AACP,QAAI,KACA,OAAO,CAAC;AACZ,aAAS,IAAI,GAAG,MAAM,KAAK,IAAI,QAAQ,IAAI,KAAK,KAAK;AACjD,YAAM,KAAK,IAAI,OAAO,CAAC;AACvB,WAAK,UAAU,GAAG;AAAA,IACtB;AAEA,SAAK,KAAK,QAAQ,UAAQ;AACtB,WAAK,SAAS,KAAK,SAAS,IAAI,SAAS,EAAE,KAAK;AAChD,UAAI,KAAK,OAAO;AACZ,aAAK,KAAK,IAAI;AAAA,MAClB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,KAAK;AACX,QAAI,KAAK,SAAS;AAAA,IAElB,WAAW,QAAQ,KAAK,mBAAmB;AACvC,WAAK,OAAO;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AACA,WAAK,KAAK,KAAK,KAAK,IAAI;AACxB,WAAK,OAAO;AACZ,WAAK,oBAAoB;AACzB,WAAK,UAAU;AACf;AAAA,IACJ,WAAW,CAAC,KAAK,qBAAqB,OAAO,KAAK,WAAW;AACzD,WAAK,OAAO;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AACA,WAAK,KAAK,KAAK,KAAK,IAAI;AACxB,WAAK,OAAO;AACZ,WAAK,oBAAoB,KAAK,UAAU,GAAG;AAC3C,WAAK,UAAU;AACf;AAAA,IACJ,WAAW,CAAC,KAAK,GAAG,EAAE,SAAS,KAAK,iBAAiB,KAAK,QAAQ,MAAM;AACpE,WAAK,UAAU;AACf;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AACA,WAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IAC5B;AAEA,QAAI,QAAQ,MAAM;AAGd,YAAM;AAAA,IACV;AAEA,QAAI,IAAI,WAAW,CAAC,KAAK,MAAQ,CAAC,KAAK,GAAI,EAAE,SAAS,GAAG,GAAG;AAExD,WAAK,KAAK,SAAS;AAAA,IACvB;AAEA,SAAK,UAAU;AAAA,EACnB;AACJ;AAgBA,SAAS,cAAc,KAAK,SAAS;AACjC,YAAU,WAAW,CAAC;AAEtB,MAAI,YAAY,IAAI,UAAU,GAAG;AACjC,MAAI,SAAS,UAAU,SAAS;AAEhC,MAAI,YAAY,CAAC;AACjB,MAAI,UAAU,CAAC;AACf,MAAI,kBAAkB,CAAC;AAEvB,SAAO,QAAQ,WAAS;AACpB,QAAI,MAAM,SAAS,eAAe,MAAM,UAAU,OAAO,MAAM,UAAU,MAAM;AAC3E,UAAI,QAAQ,QAAQ;AAChB,kBAAU,KAAK,OAAO;AAAA,MAC1B;AACA,gBAAU,CAAC;AAAA,IACf,OAAO;AACH,cAAQ,KAAK,KAAK;AAAA,IACtB;AAAA,EACJ,CAAC;AAED,MAAI,QAAQ,QAAQ;AAChB,cAAU,KAAK,OAAO;AAAA,EAC1B;AAEA,YAAU,QAAQ,CAAAA,aAAW;AACzB,IAAAA,WAAU,eAAeA,QAAO;AAChC,QAAIA,SAAQ,QAAQ;AAChB,wBAAkB,gBAAgB,OAAOA,QAAO;AAAA,IACpD;AAAA,EACJ,CAAC;AAED,MAAI,QAAQ,SAAS;AACjB,QAAIC,aAAY,CAAC;AACjB,QAAI,kBAAkB,iCAAQ;AAC1B,WAAK,QAAQ,CAAAD,aAAW;AACpB,YAAIA,SAAQ,OAAO;AACf,iBAAO,gBAAgBA,SAAQ,KAAK;AAAA,QACxC,OAAO;AACH,UAAAC,WAAU,KAAKD,QAAO;AAAA,QAC1B;AAAA,MACJ,CAAC;AAAA,IACL,GARsB;AAStB,oBAAgB,eAAe;AAC/B,WAAOC;AAAA,EACX;AAEA,SAAO;AACX;AAhDS;AAmDT,IAAO,yBAAQ;;;AC9SR,SAAS,kBAAkB,aAAa;AAC3C,MAAI,SAAS;AACb,MAAI,YAAY;AAEhB,MAAI,QAAQ,IAAI,WAAW,WAAW;AACtC,MAAI,aAAa,MAAM;AACvB,MAAI,gBAAgB,aAAa;AACjC,MAAI,aAAa,aAAa;AAE9B,MAAI,GAAG,GAAG,GAAG;AACb,MAAI;AAGJ,WAAS,IAAI,GAAG,IAAI,YAAY,IAAI,IAAI,GAAG;AAEvC,YAAS,MAAM,CAAC,KAAK,KAAO,MAAM,IAAI,CAAC,KAAK,IAAK,MAAM,IAAI,CAAC;AAG5D,SAAK,QAAQ,aAAa;AAC1B,SAAK,QAAQ,WAAW;AACxB,SAAK,QAAQ,SAAS;AACtB,QAAI,QAAQ;AAGZ,cAAU,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC;AAAA,EACtE;AAGA,MAAI,iBAAiB,GAAG;AACpB,YAAQ,MAAM,UAAU;AAExB,SAAK,QAAQ,QAAQ;AAGrB,SAAK,QAAQ,MAAM;AAEnB,cAAU,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI;AAAA,EAC5C,WAAW,iBAAiB,GAAG;AAC3B,YAAS,MAAM,UAAU,KAAK,IAAK,MAAM,aAAa,CAAC;AAEvD,SAAK,QAAQ,UAAU;AACvB,SAAK,QAAQ,SAAS;AAGtB,SAAK,QAAQ,OAAO;AAEpB,cAAU,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI;AAAA,EAC3D;AAEA,SAAO;AACX;AAlDgB;;;ACVhB,IAAqB,aAArB,MAAqB,YAAW;AAAA,EARhC,OAQgC;AAAA;AAAA;AAAA,EAC5B,OAAO,MAAM,KAAK,SAAS;AACvB,UAAM,SAAS,IAAI,YAAW,OAAO;AACrC,WAAO,OAAO,MAAM,GAAG;AAAA,EAC3B;AAAA,EAEA,YAAY,SAAS;AACjB,SAAK,UAAU,WAAW,CAAC;AAE3B,SAAK,OAAO,KAAK,cAAc,IAAI,SAAS;AAAA,MACxC,YAAY;AAAA,IAChB,CAAC;AACD,SAAK,aAAa,CAAC;AAEnB,SAAK,cAAc,CAAC;AACpB,SAAK,cAAc,CAAC;AAEpB,SAAK,sBACA,KAAK,QAAQ,sBAAsB,IAC/B,SAAS,EACT,QAAQ,WAAW,EAAE,EACrB,KAAK,EACL,YAAY,KAAK;AAE1B,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,MAAM,WAAW;AAEb,UAAM,KAAK,KAAK,SAAS;AAAA,EAC7B;AAAA,EAEA,MAAM,YAAY,MAAM,SAAS;AAC7B,QAAI,aAAa,KAAK;AAGtB,QAAI,WAAW,UAAU,KAAK,SAAS,KAAK,KAAK,CAAC,MAAM,MAAQ,KAAK,CAAC,MAAM,IAAM;AAE9E,eAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,YAAI,WAAW,WAAW,CAAC;AAE3B,YAAI,KAAK,WAAW,SAAS,MAAM,SAAS,KAAK,KAAK,WAAW,SAAS,MAAM,SAAS,GAAG;AACxF;AAAA,QACJ;AAEA,YAAI,eAAe,KAAK,WAAW,SAAS,MAAM,SAAS;AAE3D,YAAI,iBAAiB,KAAK,KAAK,SAAS,CAAC,MAAM,MAAQ,KAAK,KAAK,SAAS,CAAC,MAAM,KAAO;AACpF;AAAA,QACJ;AAEA,YAAI,iBAAiB;AACrB,iBAASC,KAAI,GAAGA,KAAI,SAAS,MAAM,QAAQA,MAAK;AAC5C,cAAI,KAAKA,KAAI,CAAC,MAAM,SAAS,MAAMA,EAAC,GAAG;AACnC,6BAAiB;AACjB;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,CAAC,gBAAgB;AACjB;AAAA,QACJ;AAEA,YAAI,cAAc;AACd,gBAAM,SAAS,KAAK,SAAS;AAE7B,eAAK,cAAc,SAAS,KAAK,cAAc,KAAK;AAAA,QACxD,OAAO;AAEH,gBAAM,SAAS,KAAK,mBAAmB;AAEvC,eAAK,cAAc,IAAI,SAAS;AAAA,YAC5B,YAAY;AAAA,YACZ,YAAY,SAAS;AAAA,UACzB,CAAC;AAAA,QACL;AAEA,YAAI,SAAS;AACT,iBAAO,KAAK,SAAS;AAAA,QACzB;AAEA;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,YAAY,KAAK,IAAI;AAE1B,QAAI,SAAS;AACT,aAAO,KAAK,SAAS;AAAA,IACzB;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,QAAI,WAAW,KAAK;AACpB,QAAI,SAAS,KAAK;AAElB,QAAI,MAAM,6BAAM;AACZ,aAAO;AAAA,QACH,OAAO,IAAI,WAAW,KAAK,KAAK,UAAU,SAAS,QAAQ;AAAA,QAC3D,MAAM,KAAK,WAAW,KAAK,GAAG;AAAA,MAClC;AAAA,IACJ,GALU;AAOV,WAAO,KAAK,UAAU,KAAK,GAAG,QAAQ;AAClC,YAAM,IAAI,KAAK,GAAG,KAAK,SAAS;AAEhC,UAAI,MAAM,MAAQ,MAAM,IAAM;AAC1B,iBAAS,KAAK;AAAA,MAClB;AAEA,UAAI,MAAM,IAAM;AACZ,eAAO,IAAI;AAAA,MACf;AAAA,IACJ;AAEA,WAAO,IAAI;AAAA,EACf;AAAA,EAEA,MAAM,kBAAkB;AAGpB,QAAI,cAAc,CAAC;AAEnB,QAAI,YAAY,oBAAI,IAAI;AACxB,QAAI,UAAW,KAAK,UAAU,oBAAI,IAAI;AAEtC,QAAI,yBAAyB,KAAK,uBAAuB;AAEzD,QAAI,OAAO,8BAAO,MAAM,aAAa,YAAY;AAC7C,oBAAc,eAAe;AAC7B,gBAAU,WAAW;AAErB,UAAI,CAAC,KAAK,YAAY,WAAW;AAE7B,YAAI,KAAK,sBAAsB,IAAI,KAAK,CAAC,wBAAwB;AAC7D,gBAAM,YAAY,IAAI,YAAW;AACjC,eAAK,aAAa,MAAM,UAAU,MAAM,KAAK,OAAO;AAEpD,cAAI,CAAC,QAAQ,IAAI,IAAI,GAAG;AACpB,oBAAQ,IAAI,MAAM,CAAC,CAAC;AAAA,UACxB;AAEA,cAAI,YAAY,QAAQ,IAAI,IAAI;AAGhC,cAAI,KAAK,WAAW,QAAQ,CAAC,KAAK,WAAW,MAAM;AAC/C,sBAAU,QAAQ,UAAU,SAAS,CAAC;AACtC,sBAAU,MAAM,KAAK,EAAE,MAAM,cAAc,OAAO,KAAK,WAAW,CAAC;AACnE,sBAAU,IAAI,OAAO;AAAA,UACzB;AAEA,cAAI,KAAK,WAAW,MAAM;AACtB,sBAAU,OAAO,UAAU,QAAQ,CAAC;AACpC,sBAAU,KAAK,KAAK,EAAE,MAAM,cAAc,OAAO,KAAK,WAAW,CAAC;AAClE,sBAAU,IAAI,MAAM;AAAA,UACxB;AAEA,cAAI,UAAU,SAAS;AACnB,sBAAU,QAAQ,QAAQ,CAAC,cAAc,gBAAgB;AACrD,sBAAQ,IAAI,aAAa,YAAY;AAAA,YACzC,CAAC;AAAA,UACL;AAEA,mBAAS,cAAc,KAAK,WAAW,eAAe,CAAC,GAAG;AACtD,iBAAK,YAAY,KAAK,UAAU;AAAA,UACpC;AAAA,QACJ,WAGS,KAAK,iBAAiB,IAAI,GAAG;AAClC,cAAI,WAAW,KAAK,YAAY,OAAO,MAAM,OAAO,KAAK,YAAY,OAAO,MAAM,QAAQ,GAAG,IAAI,CAAC;AAElG,cAAI,eAAe,eAAe;AAClC,cAAI,CAAC,QAAQ,IAAI,YAAY,GAAG;AAC5B,oBAAQ,IAAI,cAAc,CAAC,CAAC;AAAA,UAChC;AAEA,cAAI,YAAY,QAAQ,IAAI,YAAY;AACxC,oBAAU,QAAQ,IAAI,UAAU,QAAQ,KAAK,CAAC;AAC9C,oBAAU,QAAQ,EAAE,KAAK,EAAE,MAAM,QAAQ,OAAO,KAAK,eAAe,EAAE,CAAC;AACvE,oBAAU,IAAI,QAAQ;AAAA,QAC1B,WAGS,KAAK,SAAS;AACnB,gBAAM,WAAW,KAAK,mBAAmB,OAAO,OAAO,YAAY,KAAK,YAAY,OAAO,OAAO,QAAQ;AAC1G,gBAAM,aAAa;AAAA,YACf,UAAU,WAAW,YAAY,QAAQ,IAAI;AAAA,YAC7C,UAAU,KAAK,YAAY,OAAO;AAAA,YAClC,aAAa,KAAK,mBAAmB,OAAO,SAAS;AAAA,UACzD;AAEA,cAAI,WAAW,KAAK,WAAW;AAC3B,uBAAW,UAAU;AAAA,UACzB;AAEA,cAAI,KAAK,oBAAoB;AACzB,uBAAW,cAAc,KAAK;AAAA,UAClC;AAEA,cAAI,KAAK,WAAW;AAChB,uBAAW,YAAY,KAAK;AAAA,UAChC;AAEA,kBAAQ,KAAK,YAAY,OAAO,OAAO;AAAA;AAAA,YAEnC,KAAK;AAAA,YACL,KAAK,mBAAmB;AACpB,kBAAI,KAAK,YAAY,OAAO,OAAO,QAAQ;AACvC,2BAAW,SAAS,KAAK,YAAY,OAAO,OAAO,OAAO,SAAS,EAAE,YAAY,EAAE,KAAK;AAAA,cAC5F;AAGA,oBAAM,cAAc,KAAK,eAAe,EAAE,QAAQ,UAAU,IAAI,EAAE,QAAQ,QAAQ,IAAI;AACtF,yBAAW,UAAU,YAAY,OAAO,WAAW;AACnD;AAAA,YACJ;AAAA;AAAA,YAGA;AACI,yBAAW,UAAU,KAAK;AAAA,UAClC;AAEA,eAAK,YAAY,KAAK,UAAU;AAAA,QACpC;AAAA,MACJ,WAAW,KAAK,YAAY,cAAc,eAAe;AACrD,sBAAc;AAAA,MAClB,WAAW,KAAK,YAAY,cAAc,WAAW;AACjD,kBAAU;AAAA,MACd;AAEA,eAAS,aAAa,KAAK,YAAY;AACnC,cAAM,KAAK,WAAW,aAAa,OAAO;AAAA,MAC9C;AAAA,IACJ,GA1GW;AA4GX,UAAM,KAAK,KAAK,MAAM,OAAO,CAAC,CAAC;AAE/B,YAAQ,QAAQ,cAAY;AACxB,gBAAU,QAAQ,cAAY;AAC1B,YAAI,CAAC,YAAY,QAAQ,GAAG;AACxB,sBAAY,QAAQ,IAAI,CAAC;AAAA,QAC7B;AAEA,YAAI,SAAS,QAAQ,GAAG;AACpB,mBAAS,QAAQ,EAAE,QAAQ,eAAa;AACpC,oBAAQ,UAAU,MAAM;AAAA,cACpB,KAAK;AACD,4BAAY,QAAQ,EAAE,KAAK,UAAU,KAAK;AAC1C;AAAA,cAEJ,KAAK;AACD;AACI,0BAAQ,UAAU;AAAA,oBACd,KAAK;AACD,kCAAY,QAAQ,EAAE,KAAK,iBAAiB,UAAU,KAAK,CAAC;AAC5D;AAAA,oBACJ,KAAK;AACD,kCAAY,QAAQ,EAAE,KAAK,iBAAiB,UAAU,KAAK,CAAC;AAC5D;AAAA,kBACR;AAAA,gBACJ;AACA;AAAA,YACR;AAAA,UACJ,CAAC;AAAA,QACL,OAAO;AACH,cAAI;AACJ,kBAAQ,UAAU;AAAA,YACd,KAAK;AACD,gCAAkB;AAClB;AAAA,YACJ,KAAK;AACD,gCAAkB;AAClB;AAAA,UACR;AAEA,WAAC,SAAS,eAAe,KAAK,CAAC,GAAG,QAAQ,eAAa;AACnD,oBAAQ,UAAU,MAAM;AAAA,cACpB,KAAK;AACD,wBAAQ,UAAU;AAAA,kBACd,KAAK;AACD,gCAAY,QAAQ,EAAE,KAAK,WAAW,UAAU,KAAK,CAAC;AACtD;AAAA,kBACJ,KAAK;AACD,gCAAY,QAAQ,EAAE,KAAK,WAAW,UAAU,KAAK,CAAC;AACtD;AAAA,gBACR;AACA;AAAA,cAEJ,KAAK;AACD;AACI,0BAAQ,UAAU;AAAA,oBACd,KAAK;AACD,kCAAY,QAAQ,EAAE,KAAK,iBAAiB,UAAU,KAAK,CAAC;AAC5D;AAAA,oBACJ,KAAK;AACD,kCAAY,QAAQ,EAAE,KAAK,iBAAiB,UAAU,KAAK,CAAC;AAC5D;AAAA,kBACR;AAAA,gBACJ;AACA;AAAA,YACR;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAED,WAAO,KAAK,WAAW,EAAE,QAAQ,cAAY;AACzC,kBAAY,QAAQ,IAAI,YAAY,QAAQ,EAAE,KAAK,IAAI;AAAA,IAC3D,CAAC;AAED,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,iBAAiB,MAAM;AACnB,QAAI,KAAK,mBAAmB,OAAO,UAAU,cAAc;AAEvD,aAAO;AAAA,IACX;AAEA,YAAQ,KAAK,YAAY,OAAO,OAAO;AAAA,MACnC,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,MAEX,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EAEA,sBAAsB,MAAM;AACxB,QAAI,KAAK,YAAY,OAAO,UAAU,kBAAkB;AACpD,aAAO;AAAA,IACX;AACA,QAAI,cAAc,KAAK,mBAAmB,OAAO,UAAU,KAAK,QAAQ,oBAAoB,eAAe;AAC3G,WAAO,gBAAgB;AAAA,EAC3B;AAAA;AAAA,EAGA,yBAAyB;AACrB,QAAI,KAAK,QAAQ,wBAAwB;AACrC,aAAO;AAAA,IACX;AAEA,QAAI,yBAAyB;AAC7B,QAAI,OAAO,iCAAQ;AACf,UAAI,CAAC,KAAK,YAAY,WAAW;AAC7B,YAAI,CAAC,2BAA2B,yBAAyB,EAAE,SAAS,KAAK,YAAY,OAAO,KAAK,GAAG;AAChG,mCAAyB;AAAA,QAC7B;AAAA,MACJ;AAEA,eAAS,aAAa,KAAK,YAAY;AACnC,aAAK,SAAS;AAAA,MAClB;AAAA,IACJ,GAVW;AAWX,SAAK,KAAK,IAAI;AACd,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,cAAc,QAAQ;AACxB,QAAI,WAAW;AACf,QAAI,SAAS,CAAC;AACd,UAAM,SAAS,OAAO,UAAU;AAEhC,WAAO,MAAM;AACT,YAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,UAAI,MAAM;AACN;AAAA,MACJ;AACA,aAAO,KAAK,KAAK;AACjB,kBAAY,MAAM;AAAA,IACtB;AAEA,UAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,QAAI,eAAe;AACnB,aAAS,SAAS,QAAQ;AACtB,aAAO,IAAI,OAAO,YAAY;AAC9B,sBAAgB,MAAM;AAAA,IAC1B;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,MAAM,KAAK;AACb,QAAI,KAAK,SAAS;AACd,YAAM,IAAI,MAAM,sDAAsD;AAAA,IAC1E;AACA,SAAK,UAAU;AAGf,QAAI,OAAO,OAAO,IAAI,cAAc,YAAY;AAC5C,YAAM,MAAM,KAAK,cAAc,GAAG;AAAA,IACtC;AAGA,UAAM,OAAO,IAAI,YAAY,CAAC;AAG9B,QAAI,OAAO,QAAQ,UAAU;AACzB,YAAM,YAAY,OAAO,GAAG;AAAA,IAChC;AAGA,QAAI,eAAe,QAAQ,OAAO,UAAU,SAAS,KAAK,GAAG,MAAM,iBAAiB;AAChF,YAAM,MAAM,kBAAkB,GAAG;AAAA,IACrC;AAGA,QAAI,IAAI,kBAAkB,aAAa;AACnC,YAAM,IAAI,WAAW,GAAG,EAAE;AAAA,IAC9B;AAEA,SAAK,MAAM;AAEX,SAAK,KAAK,IAAI,WAAW,GAAG;AAC5B,SAAK,UAAU;AAEf,WAAO,KAAK,UAAU,KAAK,GAAG,QAAQ;AAClC,YAAM,OAAO,KAAK,SAAS;AAE3B,YAAM,KAAK,YAAY,KAAK,OAAO,KAAK,IAAI;AAAA,IAChD;AAEA,UAAM,KAAK,gBAAgB;AAE3B,UAAM,UAAU;AAAA,MACZ,SAAS,KAAK,KAAK,QAAQ,IAAI,YAAU,EAAE,KAAK,MAAM,KAAK,OAAO,MAAM,MAAM,EAAE,EAAE,QAAQ;AAAA,IAC9F;AAEA,eAAW,OAAO,CAAC,QAAQ,QAAQ,GAAG;AAClC,YAAM,gBAAgB,KAAK,KAAK,QAAQ,KAAK,UAAQ,KAAK,QAAQ,GAAG;AACrE,UAAI,iBAAiB,cAAc,OAAO;AACtC,cAAM,YAAY,uBAAc,cAAc,KAAK;AACnD,YAAI,aAAa,UAAU,QAAQ;AAC/B,kBAAQ,GAAG,IAAI,UAAU,CAAC;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AAEA,eAAW,OAAO,CAAC,gBAAgB,aAAa,GAAG;AAC/C,YAAM,gBAAgB,KAAK,KAAK,QAAQ,KAAK,UAAQ,KAAK,QAAQ,GAAG;AACrE,UAAI,iBAAiB,cAAc,OAAO;AACtC,cAAM,YAAY,uBAAc,cAAc,KAAK;AACnD,YAAI,aAAa,UAAU,UAAU,UAAU,CAAC,EAAE,SAAS;AACvD,gBAAM,WAAW,IAAI,QAAQ,UAAU,CAAC,GAAG,MAAM,EAAE,YAAY,CAAC;AAChE,kBAAQ,QAAQ,IAAI,UAAU,CAAC,EAAE;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ;AAEA,eAAW,OAAO,CAAC,MAAM,MAAM,OAAO,UAAU,GAAG;AAC/C,YAAM,iBAAiB,KAAK,KAAK,QAAQ,OAAO,UAAQ,KAAK,QAAQ,GAAG;AACxE,UAAI,YAAY,CAAC;AAEjB,qBACK,OAAO,WAAS,SAAS,MAAM,KAAK,EACpC,IAAI,WAAS,uBAAc,MAAM,KAAK,CAAC,EACvC,QAAQ,YAAW,YAAY,UAAU,OAAO,UAAU,CAAC,CAAC,CAAE;AAEnE,UAAI,aAAa,UAAU,QAAQ;AAC/B,cAAM,WAAW,IAAI,QAAQ,UAAU,CAAC,GAAG,MAAM,EAAE,YAAY,CAAC;AAChE,gBAAQ,QAAQ,IAAI;AAAA,MACxB;AAAA,IACJ;AAEA,eAAW,OAAO,CAAC,WAAW,cAAc,eAAe,YAAY,GAAG;AACtE,YAAM,SAAS,KAAK,KAAK,QAAQ,KAAK,UAAQ,KAAK,QAAQ,GAAG;AAC9D,UAAI,UAAU,OAAO,OAAO;AACxB,cAAM,WAAW,IAAI,QAAQ,UAAU,CAAC,GAAG,MAAM,EAAE,YAAY,CAAC;AAChE,gBAAQ,QAAQ,IAAI,YAAY,OAAO,KAAK;AAAA,MAChD;AAAA,IACJ;AAEA,QAAI,aAAa,KAAK,KAAK,QAAQ,KAAK,UAAQ,KAAK,QAAQ,MAAM;AACnE,QAAI,YAAY;AACZ,UAAI,OAAO,IAAI,KAAK,WAAW,KAAK;AACpC,UAAI,CAAC,QAAQ,KAAK,SAAS,MAAM,gBAAgB;AAC7C,eAAO,WAAW;AAAA,MACtB,OAAO;AAEH,eAAO,KAAK,YAAY;AAAA,MAC5B;AACA,cAAQ,OAAO;AAAA,IACnB;AAEA,QAAI,KAAK,aAAa,MAAM;AACxB,cAAQ,OAAO,KAAK,YAAY;AAAA,IACpC;AAEA,QAAI,KAAK,aAAa,OAAO;AACzB,cAAQ,OAAO,KAAK,YAAY;AAAA,IACpC;AAEA,YAAQ,cAAc,KAAK;AAE3B,YAAQ,KAAK,oBAAoB;AAAA,MAC7B,KAAK;AACD;AAAA,MAEJ,KAAK;AACD,iBAAS,cAAc,QAAQ,eAAe,CAAC,GAAG;AAC9C,cAAI,YAAY,SAAS;AACrB,uBAAW,UAAU,kBAAkB,WAAW,OAAO;AACzD,uBAAW,WAAW;AAAA,UAC1B;AAAA,QACJ;AACA;AAAA,MAEJ,KAAK;AACD,YAAI,oBAAoB,IAAI,YAAY,MAAM;AAC9C,iBAAS,cAAc,QAAQ,eAAe,CAAC,GAAG;AAC9C,cAAI,YAAY,SAAS;AACrB,uBAAW,UAAU,kBAAkB,OAAO,WAAW,OAAO;AAChE,uBAAW,WAAW;AAAA,UAC1B;AAAA,QACJ;AACA;AAAA,MAEJ;AACI,cAAM,IAAI,MAAM,6BAA6B;AAAA,IACrD;AAEA,WAAO;AAAA,EACX;AACJ;;;ACvfA,SAAS,KAAK,MAAe,OAAqB,CAAC,GAAG;AACpD,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG,EAAE,SAAS,EAAE,gBAAgB,mBAAmB,GAAG,GAAG,KAAK,CAAC;AACxG;AAFS;AAKT,SAAS,sBAAsB,MAA0B,OAAgB,aAA+F;AACtK,QAAM,KAAK,QAAQ,IAAI,YAAY,EAAE,KAAK;AAC1C,QAAM,OAAO,GAAG,SAAS,EAAE,IAAI,eAAe,EAAE,GAAG,YAAY;AAC/D,QAAM,MAAO,IAAI,MAAM;AAEvB,MAAI,oDAAoD,KAAK,GAAG,EAAG,QAAO;AAC1E,MAAI,8EAA8E,KAAK,GAAG,EAAG,QAAO;AACpG,MAAI,iCAAiC,KAAK,GAAG,EAAG,QAAO;AACvD,MAAI,sDAAsD,KAAK,GAAG,EAAG,QAAO;AAC5E,MAAI,mDAAmD,KAAK,GAAG,EAAG,QAAO;AACzE,MAAI,uCAAuC,KAAK,GAAG,EAAG,QAAO;AAG7D,MAAI,4FAA4F,KAAK,GAAG,EAAG,QAAO;AAElH,SAAO;AACT;AAhBS;AAkBT,eAAe,mBAAmB,QAAqB,KAAsF;AAC3I,MAAI;AACJ,UAAM,WAAW,sBAAsB,OAAO,eAAe,OAAO,OAAO,OAAO,WAAW;AAE3F,QAAI,WAAiD;AACrD,QAAI,YAAY;AAChB,QAAI;AACF,iBAAW,MAAM,IAAI,GAAG,QAAQ,0DAA0D,EAAE,KAAK,OAAO,WAAW,EAAE,MAAqC;AAAA,IAC5J,SAAS,KAAU;AACjB,UAAI,OAAO,KAAK,WAAW,GAAG,EAAE,YAAY,EAAE,SAAS,6BAA6B,GAAG;AACrF,oBAAY;AACZ,mBAAW,MAAM,IAAI,GAAG,QAAQ,iDAAiD,EAAE,KAAK,OAAO,WAAW,EAAE,MAAqC;AAAA,MACnJ,OAAO;AACL,cAAM;AAAA,MACR;AAAA,IACF;AAEA,QAAI,eAAe;AACnB,QAAI,mBAAmB;AACvB,QAAI,CAAC,UAAU;AACb,UAAI,WAAW;AAEb,cAAM,IAAI,GAAG,QAAQ;AAAA,iEACoC,EACvD,KAAK,OAAO,aAAa,UAAU,OAAO,UAAU,OAAO,OAAO,OAAO,WAAW,MAAM,OAAO,mBAAmB,MAAM,OAAO,mBAAmB,MAAM,OAAO,eAAe,EAChL,IAAI;AAAA,MACR,OAAO;AACL,cAAM,IAAI,GAAG,QAAQ;AAAA,oEACuC,EACzD,KAAK,OAAO,aAAa,UAAU,OAAO,UAAU,OAAO,OAAO,OAAO,WAAW,MAAM,OAAO,mBAAmB,MAAM,OAAO,mBAAmB,MAAM,OAAO,iBAAiB,OAAO,eAAe,MAAM,OAAO,uBAAuB,IAAI,EAChP,IAAI;AAAA,MACT;AACA,qBAAe;AAAA,IACjB,OAAO;AACL,UAAI,WAAW;AACb,cAAM,IAAI,GAAG,QAAQ,0JAA0J,EAC5K,KAAK,UAAU,OAAO,UAAU,OAAO,OAAO,OAAO,WAAW,MAAM,OAAO,mBAAmB,MAAM,OAAO,mBAAmB,MAAM,OAAO,iBAAiB,OAAO,WAAW,EAChL,IAAI;AAAA,MACT,OAAO;AACL,cAAM,IAAI,GAAG,QAAQ,6OAA6O,EAC/P,KAAK,UAAU,OAAO,UAAU,OAAO,OAAO,OAAO,WAAW,MAAM,OAAO,mBAAmB,MAAM,OAAO,mBAAmB,MAAM,OAAO,iBAAiB,OAAO,eAAe,MAAM,OAAO,uBAAuB,MAAM,OAAO,WAAW,EAChP,IAAI;AAAA,MACT;AACA,UAAI,SAAS,aAAa,OAAO,UAAU;AACzC,cAAM,IAAI,GAAG,QAAQ;AAAA,kDACqB,EACxC,KAAK,SAAS,IAAI,SAAS,UAAU,OAAO,UAAU,cAAc,EACpE,IAAI;AAAA,MACR;AACA,yBAAmB;AAAA,IACrB;AAGA,QAAI,IAAI,OAAO;AAEb,YAAM,eAAe;AAAA,QACnB;AAAA,QACA;AAAA;AAAA,MACF;AACA,YAAM,QAAQ,IAAI,aAAa,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC,CAAC,CAAC;AAAA,IACjF;AAEA,WAAO,EAAE,cAAc,iBAAiB;AAAA,EAC1C,SAAS,GAAQ;AACf,WAAO,EAAE,cAAc,GAAG,kBAAkB,GAAG,OAAO,GAAG,WAAW,OAAO,CAAC,EAAE;AAAA,EAChF;AACF;AAlEe;AAoEf,IAAO,gBAAQ;AAAA,EACb,MAAM,MAAM,KAAc,KAA6B;AACvD,UAAM,MAAM,IAAI,IAAI,IAAI,GAAG;AAE3B,UAAM,WAAY,IAAI,SAAS,QAAQ,SAAS,EAAE,KAAK;AAEvD,QAAI,IAAI,WAAW,WAAW;AAC1B,aAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,+BAA+B,KAAK,gCAAgC,gBAAgB,gCAAgC,6BAA6B,EAAE,CAAC;AAAA,IAC1M;AAEA,QAAI,IAAI,WAAW,UAAU,aAAa,iBAAiB;AACzD,UAAI;AACF,cAAM,OAAO,IAAI,QAAQ,IAAI,eAAe,KAAK;AACjD,cAAM,QAAQ,KAAK,QAAQ,eAAe,EAAE;AAC5C,cAAM,WAAW,IAAI,iBAAiB,IAAI;AAC1C,YAAI,CAAC,YAAY,UAAU,UAAU;AACnC,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,gBAAgB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC5G;AACA,cAAM,SAAS,IAAI,iBAAiB;AACpC,cAAM,MAAM,MAAM,MAAM,QAAQ,EAAE,IAAI,EAAE,UAAU,IAAI,iBAAiB,KAAK,EAAS,CAAC;AACtF,YAAI,CAAC,IAAI,GAAI,QAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,YAAY,SAAS,eAAe,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAC/H,cAAM,MAAM,MAAM,IAAI,KAAK;AAC3B,cAAM,QAAQ,eAAe,GAAG,EAAE,MAAM,GAAG,EAAE;AAC7C,YAAI,eAAe;AACnB,YAAI,mBAAmB;AACvB,cAAM,SAA+C,CAAC;AAGtD,cAAM,eAAe,8BAAO,UAAiB;AAC3C,gBAAM,UAAU,MAAM,QAAQ,WAAW,MAAM,IAAI,OAAK,mBAAmB,GAAG,GAAG,CAAC,CAAC;AACnF,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,kBAAM,SAAS,QAAQ,CAAC;AACxB,gBAAI,OAAO,WAAW,aAAa;AACjC,oBAAM,IAAI,OAAO;AACjB,8BAAgB,EAAE;AAClB,kCAAoB,EAAE;AACtB,kBAAI,EAAE,MAAO,QAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,EAAE,MAAM,CAAC;AAAA,YACvE,OAAO;AACL,qBAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,OAAO,QAAQ,WAAW,oBAAoB,CAAC;AAAA,YAChG;AAAA,UACF;AAAA,QACF,GAbqB;AAgBrB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,gBAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC;AAClC,gBAAM,aAAa,KAAK;AAAA,QAC1B;AACA,YAAI,IAAI,OAAO;AACb,gBAAM,OAAO,CAAC,qBAAoB,sCAAqC,uBAAsB,gBAAgB;AAC7G,gBAAM,QAAQ,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,UAAC,CAAC,CAAC,CAAC;AAAA,QACzE;AACA,YAAI,OAAO,QAAQ;AACjB,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,qBAAqB,SAAS,OAAO,GAAG,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QACpM;AACA,eAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,CAAC;AAAA,MAClG,SAAS,KAAU;AACjB,cAAM,UAAU,KAAK,WAAW,OAAO,GAAG;AAC1C,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3F;AAAA,IACF;AAEA,QAAI,IAAI,WAAW,UAAU,aAAa,qBAAqB;AAC7D,UAAI;AACF,cAAM,OAAO,IAAI,QAAQ,IAAI,eAAe,KAAK;AACjD,cAAM,QAAQ,KAAK,QAAQ,eAAe,EAAE;AAC5C,cAAM,WAAW,IAAI,iBAAiB,IAAI;AAC1C,YAAI,CAAC,YAAY,UAAU,UAAU;AACnC,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,gBAAgB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC5G;AACA,cAAM,SAAS,IAAI,qBAAqB;AACxC,cAAM,MAAM,MAAM,MAAM,QAAQ,EAAE,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK,EAAS,CAAC;AACvF,YAAI,CAAC,IAAI,GAAI,QAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,YAAY,SAAS,mBAAmB,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AACnI,cAAM,MAAM,MAAM,IAAI,KAAK;AAC3B,cAAM,QAAQ,mBAAmB,GAAG,EAAE,MAAM,GAAG,EAAE;AACjD,YAAI,eAAe;AACnB,YAAI,mBAAmB;AACvB,cAAM,SAA+C,CAAC;AAGtD,cAAM,eAAe,8BAAO,UAAiB;AAC3C,gBAAM,UAAU,MAAM,QAAQ,WAAW,MAAM,IAAI,OAAK,mBAAmB,GAAG,GAAG,CAAC,CAAC;AACnF,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,kBAAM,SAAS,QAAQ,CAAC;AACxB,gBAAI,OAAO,WAAW,aAAa;AACjC,oBAAM,IAAI,OAAO;AACjB,8BAAgB,EAAE;AAClB,kCAAoB,EAAE;AACtB,kBAAI,EAAE,MAAO,QAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,EAAE,MAAM,CAAC;AAAA,YACvE,OAAO;AACL,qBAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,OAAO,QAAQ,WAAW,oBAAoB,CAAC;AAAA,YAChG;AAAA,UACF;AAAA,QACF,GAbqB;AAgBrB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,gBAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC;AAClC,gBAAM,aAAa,KAAK;AAAA,QAC1B;AACA,YAAI,IAAI,OAAO;AACb,gBAAM,OAAO,CAAC,qBAAoB,sCAAqC,uBAAsB,gBAAgB;AAC7G,gBAAM,QAAQ,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,UAAC,CAAC,CAAC,CAAC;AAAA,QACzE;AACA,YAAI,OAAO,QAAQ;AACjB,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,qBAAqB,SAAS,OAAO,GAAG,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QACpM;AACA,eAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,CAAC;AAAA,MAClG,SAAS,KAAU;AACjB,cAAM,UAAU,KAAK,WAAW,OAAO,GAAG;AAC1C,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3F;AAAA,IACF;AAGA,QAAI,IAAI,WAAW,UAAU,aAAa,gBAAgB;AACxD,UAAI;AACF,cAAM,OAAO,IAAI,QAAQ,IAAI,eAAe,KAAK;AACjD,cAAM,QAAQ,KAAK,QAAQ,eAAe,EAAE;AAC5C,cAAM,WAAW,IAAI,iBAAiB,IAAI;AAC1C,YAAI,CAAC,YAAY,UAAU,UAAU;AACnC,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,gBAAgB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC5G;AACA,cAAM,SAAS,IAAI,gBAAgB;AACnC,cAAM,MAAM,MAAM,MAAM,QAAQ,EAAE,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK,EAAS,CAAC;AACvF,YAAI,CAAC,IAAI,GAAI,QAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,YAAY,SAAS,cAAc,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAC9H,cAAM,MAAM,MAAM,IAAI,KAAK;AAC3B,cAAM,QAAQ,cAAc,GAAG,EAAE,MAAM,GAAG,EAAE;AAC5C,YAAI,eAAe;AACnB,YAAI,mBAAmB;AACvB,cAAM,SAA+C,CAAC;AAGtD,cAAM,eAAe,8BAAO,UAAiB;AAC3C,gBAAM,UAAU,MAAM,QAAQ,WAAW,MAAM,IAAI,OAAK,mBAAmB,GAAG,GAAG,CAAC,CAAC;AACnF,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,kBAAM,SAAS,QAAQ,CAAC;AACxB,gBAAI,OAAO,WAAW,aAAa;AACjC,oBAAM,IAAI,OAAO;AACjB,8BAAgB,EAAE;AAClB,kCAAoB,EAAE;AACtB,kBAAI,EAAE,MAAO,QAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,EAAE,MAAM,CAAC;AAAA,YACvE,OAAO;AACL,qBAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,OAAO,QAAQ,WAAW,oBAAoB,CAAC;AAAA,YAChG;AAAA,UACF;AAAA,QACF,GAbqB;AAgBrB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,gBAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC;AAClC,gBAAM,aAAa,KAAK;AAAA,QAC1B;AACA,YAAI,IAAI,OAAO;AACb,gBAAM,OAAO,CAAC,qBAAoB,sCAAqC,uBAAsB,gBAAgB;AAC7G,gBAAM,QAAQ,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,UAAC,CAAC,CAAC,CAAC;AAAA,QACzE;AACA,YAAI,OAAO,QAAQ;AACjB,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,qBAAqB,SAAS,OAAO,GAAG,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QACpM;AACA,eAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,CAAC;AAAA,MAClG,SAAS,KAAU;AACjB,cAAM,UAAU,KAAK,WAAW,OAAO,GAAG;AAC1C,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3F;AAAA,IACF;AAGA,QAAI,IAAI,WAAW,UAAU,aAAa,oBAAoB;AAC5D,UAAI;AACF,cAAM,OAAO,IAAI,QAAQ,IAAI,eAAe,KAAK;AACjD,cAAM,QAAQ,KAAK,QAAQ,eAAe,EAAE;AAC5C,cAAM,WAAW,IAAI,iBAAiB,IAAI;AAC1C,YAAI,CAAC,YAAY,UAAU,UAAU;AACnC,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,gBAAgB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC5G;AACA,cAAM,SAAS,IAAI,oBAAoB;AACvC,cAAM,MAAM,MAAM,MAAM,QAAQ;AAAA,UAC9B,SAAS;AAAA,YACP,cAAc;AAAA,YACd,UAAU;AAAA,YACV,mBAAmB;AAAA,YACnB,iBAAiB;AAAA,UACnB;AAAA,UACA,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK;AAAA,QAC7C,CAAC;AACD,YAAI,CAAC,IAAI,GAAI,QAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,YAAY,SAAS,kBAAkB,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAClI,cAAM,MAAM,MAAM,IAAI,KAAK;AAC3B,cAAM,QAAQ,iBAAiB,GAAG,EAAE,MAAM,GAAG,EAAE;AAC/C,YAAI,eAAe;AACnB,YAAI,mBAAmB;AACvB,cAAM,SAA+C,CAAC;AAGtD,cAAM,eAAe,8BAAO,UAAiB;AAC3C,gBAAM,UAAU,MAAM,QAAQ,WAAW,MAAM,IAAI,OAAK,mBAAmB,GAAG,GAAG,CAAC,CAAC;AACnF,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,kBAAM,SAAS,QAAQ,CAAC;AACxB,gBAAI,OAAO,WAAW,aAAa;AACjC,oBAAM,IAAI,OAAO;AACjB,8BAAgB,EAAE;AAClB,kCAAoB,EAAE;AACtB,kBAAI,EAAE,MAAO,QAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,EAAE,MAAM,CAAC;AAAA,YACvE,OAAO;AACL,qBAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,OAAO,QAAQ,WAAW,oBAAoB,CAAC;AAAA,YAChG;AAAA,UACF;AAAA,QACF,GAbqB;AAgBrB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,gBAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC;AAClC,gBAAM,aAAa,KAAK;AAAA,QAC1B;AACA,YAAI,IAAI,OAAO;AACb,gBAAM,OAAO,CAAC,qBAAoB,sCAAqC,uBAAsB,gBAAgB;AAC7G,gBAAM,QAAQ,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,UAAC,CAAC,CAAC,CAAC;AAAA,QACzE;AACA,YAAI,OAAO,QAAQ;AACjB,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,qBAAqB,SAAS,OAAO,GAAG,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QACpM;AACA,eAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,CAAC;AAAA,MAClG,SAAS,KAAU;AACjB,cAAM,UAAU,KAAK,WAAW,OAAO,GAAG;AAC1C,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3F;AAAA,IACF;AAGA,QAAI,IAAI,WAAW,UAAU,aAAa,sBAAsB;AAC9D,UAAI;AACF,cAAM,OAAO,IAAI,QAAQ,IAAI,eAAe,KAAK;AACjD,cAAM,QAAQ,KAAK,QAAQ,eAAe,EAAE;AAC5C,cAAM,WAAW,IAAI,iBAAiB,IAAI;AAC1C,YAAI,CAAC,YAAY,UAAU,UAAU;AACnC,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,gBAAgB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QAC5G;AAEA,cAAM,SAAS,IAAI;AACnB,YAAI,CAAC,QAAQ;AACX,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,oCAAoC,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QAChI;AAEA,gBAAQ,IAAI,4CAA4C;AACxD,cAAM,QAAQ,MAAM,qBAAqB,QAAQ,CAAC;AAElD,YAAI,eAAe;AACnB,YAAI,mBAAmB;AACvB,cAAM,SAA+C,CAAC;AAGtD,cAAM,eAAe,8BAAO,UAA6B;AACvD,gBAAM,UAAU,MAAM,QAAQ,WAAW,MAAM,IAAI,OAAK,mBAAmB,GAAG,GAAG,CAAC,CAAC;AACnF,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,kBAAM,SAAS,QAAQ,CAAC;AACxB,gBAAI,OAAO,WAAW,aAAa;AACjC,oBAAM,IAAI,OAAO;AACjB,8BAAgB,EAAE;AAClB,kCAAoB,EAAE;AACtB,kBAAI,EAAE,MAAO,QAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,EAAE,MAAM,CAAC;AAAA,YACvE,OAAO;AACL,qBAAO,KAAK,EAAE,IAAI,MAAM,CAAC,EAAE,aAAa,OAAO,OAAO,QAAQ,WAAW,oBAAoB,CAAC;AAAA,YAChG;AAAA,UACF;AAAA,QACF,GAbqB;AAgBrB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,gBAAM,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC;AAClC,gBAAM,aAAa,KAAK;AAGxB,cAAI,IAAI,IAAI,MAAM,QAAQ;AACxB,kBAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAG,CAAC;AAAA,UACvD;AAAA,QACF;AAGA,YAAI,IAAI,OAAO;AACb,gBAAM,OAAO,CAAC,qBAAoB,sCAAqC,uBAAsB,gBAAgB;AAC7G,gBAAM,QAAQ,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,UAAC,CAAC,CAAC,CAAC;AAAA,QACzE;AAEA,YAAI,OAAO,QAAQ;AACjB,iBAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,qBAAqB,SAAS,OAAO,GAAG,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,QACpM;AACA,eAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,WAAW,MAAM,QAAQ,cAAc,iBAAiB,EAAE,CAAC;AAAA,MAClG,SAAS,KAAU;AACjB,cAAM,UAAU,KAAK,WAAW,OAAO,GAAG;AAC1C,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC3F;AAAA,IACF;AAEF,QAAI,IAAI,WAAW,UAAU,aAAa,iBAAiB;AACvD,YAAM,OAAO,IAAI,QAAQ,IAAI,eAAe,KAAK;AACjD,YAAM,QAAQ,KAAK,QAAQ,eAAe,EAAE;AAC5C,YAAM,WAAW,IAAI,iBAAiB,IAAI;AAC1C,UAAI,CAAC,YAAY,UAAU,UAAU;AACnC,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,gBAAgB,SAAS,gBAAgB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC5G;AACA,UAAI;AACJ,UAAI;AACF,kBAAU,MAAM,IAAI,KAAK;AAAA,MAC3B,QAAQ;AACN,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,eAAe,SAAS,eAAe,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC1G;AAEA,YAAM,UAAU,OAAO,QAAQ,WAAW,EAAE;AAC5C,YAAM,OAAO,OAAO,QAAQ,QAAQ,EAAE;AACtC,UAAI,CAAC,WAAW,CAAC,MAAM;AACrB,eAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,eAAe,SAAS,uBAAuB,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAClH;AAEA,YAAM,QAAQ,KAAK,IAAI;AACvB,YAAM,aAAa,gBAAgB,SAAS,IAAI;AAChD,UAAI,eAAe;AACnB,UAAI,mBAAmB;AACvB,iBAAW,KAAK,YAAY;AAC1B,cAAM,IAAI,MAAM,mBAAmB,GAAG,GAAG;AACzC,wBAAgB,EAAE;AAClB,4BAAoB,EAAE;AAAA,MACxB;AAGA,YAAM,IAAI,GAAG,QAAQ;AAAA,4DACiC,EACzD,MAAK,oBAAI,KAAK,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,GAAG,WAAW,QAAQ,cAAc,kBAAkB,KAAK,IAAI,IAAI,OAAQ,QAAQ,SAAS,KAAK,MAAO,EAC3I,IAAI;AAEX,aAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,WAAW,WAAW,QAAQ,cAAc,iBAAiB,EAAE,CAAC;AAAA,IACnG;AAGA,QAAI,IAAI,WAAW,SAAS,aAAa,WAAW;AAClD,aAAO,KAAK,EAAE,SAAS,MAAM,MAAM,EAAE,QAAQ,MAAM,YAAW,oBAAI,KAAK,GAAE,YAAY,EAAE,EAAE,CAAC;AAAA,IAC5F;AAGF,WAAO,KAAK,EAAE,SAAS,OAAO,OAAO,EAAE,MAAM,aAAa,SAAS,aAAa,QAAQ,IAAI,QAAQ,MAAM,SAAS,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EACvI;AAAA;AAAA,EAGA,MAAM,MAAM,SAAuB,KAAU,KAAuB;AAClE,QAAI;AAEF,YAAM,SAAS,IAAI,cAAc,IAC9B,MAAM,GAAG,EACT,IAAI,CAAC,MAAc,EAAE,KAAK,EAAE,YAAY,CAAC,EACzC,OAAO,OAAO;AACjB,UAAI,MAAM,UAAU,QAAQ,QAAQ,CAAC,MAAM,SAAS,QAAQ,KAAK,YAAY,CAAC,GAAG;AAC/E,gBAAQ,YAAY,qBAAqB;AACzC;AAAA,MACF;AAGJ,YAAM,SAAS,MAAM,IAAI,SAAS,QAAQ,GAAG,EAAE,YAAY;AAC3D,YAAM,SAAS,IAAI,WAAW;AAC9B,YAAM,OAAO,MAAM,OAAO,MAAM,MAAM;AACtC,YAAM,UAAU,KAAK,WAAW,QAAQ,SAAS,IAAI,SAAS,KAAK;AACnE,YAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAM,OAAO,KAAK,QAAQ;AAC1B,YAAM,OAAO,SAAS,iBAAiB,IAAI;AAC3C,YAAM,aAAa,gBAAgB,SAAS,IAAI;AAC5C,YAAM,KAAK,KAAK,IAAI;AACpB,UAAI,eAAe;AACnB,UAAI,mBAAmB;AACvB,iBAAW,KAAK,YAAY;AAC1B,cAAM,IAAI,MAAM,mBAAmB,GAAG,GAAG;AACzC,wBAAgB,EAAE;AAClB,4BAAoB,EAAE;AAAA,MACxB;AAGA,YAAM,IAAI,GAAG,QAAQ;AAAA,4DACiC,EACzD,MAAK,oBAAI,KAAK,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,GAAG,WAAW,QAAQ,cAAc,kBAAkB,KAAK,IAAI,IAAI,IAAI,OAAO,UAAU,EAC3H,IAAI;AAAA,IACT,SAAS,KAAK;AAEZ,UAAI;AACF,cAAM,IAAI,GAAG,QAAQ;AAAA,iEACoC,EAAE,MAAK,oBAAI,KAAK,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,IAAI;AAAA,MAC7G,QAAQ;AAAA,MAAC;AACT,cAAQ,MAAM,4BAA4B,GAAG;AAAA,IAC/C;AAAA,EACF;AAAA;AAAA,EAGA,MAAM,UAAU,OAAuB,KAAU,KAAuB;AACtE,QAAI;AAEF,YAAM,WAAW,IAAI,iBAAiB;AACtC,YAAM,YAAY,IAAI,qBAAqB;AAC3C,YAAM,UAAU,IAAI,gBAAgB;AACpC,YAAM,aAAa,IAAI,oBAAoB;AAC3C,YAAM,CAAC,UAAU,WAAW,SAAS,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,QACnE,MAAM,UAAU,EAAE,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK,EAAS,CAAC;AAAA,QACvE,MAAM,WAAW,EAAE,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK,EAAS,CAAC;AAAA,QACxE,MAAM,SAAS,EAAE,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK,EAAS,CAAC;AAAA,QACtE,MAAM,YAAY;AAAA,UAChB,SAAS;AAAA,YACP,cAAc;AAAA,YACd,UAAU;AAAA,YACV,mBAAmB;AAAA,YACnB,iBAAiB;AAAA,UACnB;AAAA,UACA,IAAI,EAAE,UAAU,KAAK,iBAAiB,KAAK;AAAA,QAC7C,CAAC;AAAA,MACH,CAAC;AACD,UAAI,SAAS,IAAI;AACf,cAAM,MAAM,MAAM,SAAS,KAAK;AAChC,cAAM,QAAQ,eAAe,GAAG;AAChC,cAAM,QAAQ,IAAI,MAAM,IAAI,CAAC,MAAM,mBAAmB,GAAU,GAAG,CAAC,CAAC;AAAA,MACvE;AACA,UAAI,UAAU,IAAI;AAChB,cAAM,MAAM,MAAM,UAAU,KAAK;AACjC,cAAM,QAAQ,mBAAmB,GAAG;AACpC,cAAM,QAAQ,IAAI,MAAM,IAAI,CAAC,MAAM,mBAAmB,GAAU,GAAG,CAAC,CAAC;AAAA,MACvE;AACA,UAAI,QAAQ,IAAI;AACd,cAAM,MAAM,MAAM,QAAQ,KAAK;AAC/B,cAAM,QAAQ,cAAc,GAAG;AAC/B,cAAM,QAAQ,IAAI,MAAM,IAAI,CAAC,MAAM,mBAAmB,GAAU,GAAG,CAAC,CAAC;AAAA,MACvE;AACA,UAAI,WAAW,IAAI;AACjB,cAAM,MAAM,MAAM,WAAW,KAAK;AAClC,cAAM,QAAQ,iBAAiB,GAAG;AAClC,cAAM,QAAQ,IAAI,MAAM,IAAI,CAAC,MAAM,mBAAmB,GAAU,GAAG,CAAC,CAAC;AAAA,MACvE;AAGA,UAAI,IAAI,oBAAoB;AAC1B,YAAI;AACF,gBAAM,aAAa,MAAM,qBAAqB,IAAI,oBAAoB,CAAC;AAEvE,mBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAAG;AAC7C,kBAAM,QAAQ,WAAW,MAAM,GAAG,IAAI,CAAC;AACvC,kBAAM,QAAQ,IAAI,MAAM,IAAI,CAAC,MAAM,mBAAmB,GAAU,GAAG,CAAC,CAAC;AAErE,gBAAI,IAAI,IAAI,WAAW,QAAQ;AAC7B,oBAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAG,CAAC;AAAA,YACvD;AAAA,UACF;AAAA,QACF,SAAS,OAAO;AACd,kBAAQ,MAAM,sDAAsD,KAAK;AAAA,QAC3E;AAAA,MACF;AAEA,UAAI,IAAI,OAAO;AACb,cAAM,OAAO,CAAC,qBAAoB,sCAAqC,uBAAsB,gBAAgB;AAC7G,cAAM,QAAQ,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,MAAO,OAAO,CAAC,EAAE,MAAM,MAAM;AAAA,QAAC,CAAC,CAAC,CAAC;AAAA,MACzE;AAAA,IACF,QAAQ;AAAA,IAAC;AAAA,EACX;AACF;AAEA,SAAS,iBAAiB,MAAsB;AAE9C,QAAM,SAAS,KAAK,QAAQ,mBAAmB,IAAI,EAAE,QAAQ,YAAY,GAAG;AAC5E,QAAM,WAAW,OACd,QAAQ,WAAW,GAAG,EACtB,QAAQ,UAAU,GAAG,EACrB,QAAQ,SAAS,GAAG,EACpB,QAAQ,SAAS,GAAG;AACvB,SAAO,SAAS,QAAQ,kBAAkB,GAAG,EAAE,QAAQ,eAAe,MAAM,EAAE,KAAK;AACrF;AATS;",
  "names": ["result", "XMLParser", "attStr", "XMLParser", "import_fast_xml_parser", "window", "extractAffectedPopulation", "import_fast_xml_parser", "import_fast_xml_parser", "estimateAffectedPopulation", "c", "address", "addresses", "i"]
}
