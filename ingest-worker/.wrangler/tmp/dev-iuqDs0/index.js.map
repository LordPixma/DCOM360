{
  "version": 3,
  "sources": ["wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/fast-xml-parser/src/util.js", "../../../node_modules/fast-xml-parser/src/validator.js", "../../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js", "../../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js", "../../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js", "../../../node_modules/strnum/strnum.js", "../../../node_modules/fast-xml-parser/src/ignoreAttributes.js", "../../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js", "../../../node_modules/fast-xml-parser/src/xmlparser/node2json.js", "../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js", "../../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js", "../../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js", "../../../node_modules/fast-xml-parser/src/fxp.js", "../bundle-5amZjx/middleware-loader.entry.ts", "../bundle-5amZjx/middleware-insertion-facade.js", "../../../src/index.ts", "../../../src/parser.ts", "../../../src/gdacs.ts", "../../../src/volcanodiscovery.ts", "../../../node_modules/postal-mime/src/postal-mime.js", "../../../node_modules/postal-mime/src/mime-node.js", "../../../node_modules/postal-mime/src/decode-strings.js", "../../../node_modules/postal-mime/src/pass-through-decoder.js", "../../../node_modules/postal-mime/src/base64-decoder.js", "../../../node_modules/postal-mime/src/qp-decoder.js", "../../../node_modules/postal-mime/src/text-format.js", "../../../node_modules/postal-mime/src/html-entities.js", "../../../node_modules/postal-mime/src/address-parser.js", "../../../node_modules/postal-mime/src/base64-encoder.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/samuelodekunle/DCOM360/ingest-worker/.wrangler/tmp/dev-iuqDs0",
  "sourcesContent": ["", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n", "'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n", "\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;", "'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;", "const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}\n\nmodule.exports = toNumber;", "function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn", "'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"\u00A2\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"\u00A3\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"\u00A5\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"\u20AC\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"\u00A9\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"\u00AE\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"\u20B9\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n", "'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n", "const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;", "const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n", "'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n", "'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/samuelodekunle/DCOM360/ingest-worker/.wrangler/tmp/bundle-5amZjx/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/samuelodekunle/DCOM360/ingest-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/samuelodekunle/DCOM360/ingest-worker/.wrangler/tmp/bundle-5amZjx/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/samuelodekunle/DCOM360/ingest-worker/.wrangler/tmp/bundle-5amZjx/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/samuelodekunle/DCOM360/ingest-worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/samuelodekunle/DCOM360/ingest-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/samuelodekunle/DCOM360/ingest-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/samuelodekunle/DCOM360/ingest-worker/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { parseEmail, parseEmailMulti, type ParsedEmail } from './parser'\nimport { parseGdacsFeed } from './gdacs'\nimport { parseVolcanoDiscoveryFeed } from './volcanodiscovery'\nimport PostalMime from 'postal-mime'\n\ninterface Env {\n  DB: D1Database\n  CACHE?: KVNamespace\n  INGEST_TOKEN?: string\n  INGEST_SECRET?: string\n  ALLOW_FROM?: string\n  GDACS_RSS_URL?: string\n  VOLCANODISCOVERY_RSS_URL?: string\n}\n\n// Minimal ForwardableEmailMessage type for Email Workers\ntype EmailMessage = {\n  raw: ReadableStream\n  headers: Headers\n  from?: string\n  to?: string\n  setReject?: (reason: string) => void\n  forward?: (rcptTo: string, headers?: Headers) => Promise<void>\n}\n\nfunction json(data: unknown, init: ResponseInit = {}) {\n  return new Response(JSON.stringify(data), { headers: { 'content-type': 'application/json' }, ...init })\n}\n\n// Coerce incoming disaster types to a known set for consistency in DB and API\nfunction normalizeDisasterType(type: string | undefined, title?: string, description?: string): 'earthquake'|'cyclone'|'flood'|'wildfire'|'other' {\n  const v = (type || '').toLowerCase().trim()\n  const text = `${title || ''} ${description || ''}`.toLowerCase()\n  const hay = (v + ' ' + text)\n  if (/earth\\s*quake|\\bquake\\b|m\\s*\\d+(?:\\.\\d+)?\\s*earth/.test(hay)) return 'earthquake'\n  if (/tropical[_\\s-]*cyclone|\\bcyclone\\b|\\btyphoon\\b|\\bhurricane\\b|\\btc[-_\\s]?\\d*/.test(hay)) return 'cyclone'\n  if (/\\bflood|flooding/.test(hay)) return 'flood'\n  if (/wild\\s*fire|forest\\s*fire|\\bwildfire\\b|fire alert/.test(hay)) return 'wildfire'\n  return 'other'\n}\n\nasync function processParsedEmail(parsed: ParsedEmail, env: Env): Promise<{ newDisasters: number; updatedDisasters: number; error?: string }>{\n  try {\n  const normType = normalizeDisasterType(parsed.disaster_type, parsed.title, parsed.description)\n    // Try the modern schema first (with external_id); fallback to legacy schema (id TEXT PK)\n    let existing: { id: any; severity: string } | null = null\n    let useLegacy = false\n    try {\n      existing = await env.DB.prepare('SELECT id, severity FROM disasters WHERE external_id = ?').bind(parsed.external_id).first<{ id: any; severity: string }>()\n    } catch (err: any) {\n      if (String(err?.message || err).toLowerCase().includes('no such column: external_id')) {\n        useLegacy = true\n        existing = await env.DB.prepare('SELECT id, severity FROM disasters WHERE id = ?').bind(parsed.external_id).first<{ id: any; severity: string }>()\n      } else {\n        throw err\n      }\n    }\n\n    let newDisasters = 0\n    let updatedDisasters = 0\n    if (!existing) {\n      if (useLegacy) {\n        // Minimal columns on legacy schema\n        await env.DB.prepare(`INSERT INTO disasters (id, disaster_type, severity, title, country, coordinates_lat, coordinates_lng, event_timestamp, is_active)\n                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1)`).\n          bind(parsed.external_id, normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp).\n          run()\n      } else {\n        await env.DB.prepare(`INSERT INTO disasters (external_id, disaster_type, severity, title, country, coordinates_lat, coordinates_lng, event_timestamp, description)\n                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`)\n          .bind(parsed.external_id, normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp, parsed.description || null)\n          .run()\n      }\n      newDisasters = 1\n    } else {\n      if (useLegacy) {\n        await env.DB.prepare(`UPDATE disasters SET disaster_type = ?, severity = ?, title = ?, country = ?, coordinates_lat = ?, coordinates_lng = ?, event_timestamp = ? WHERE id = ?`)\n          .bind(normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp, parsed.external_id)\n          .run()\n      } else {\n        await env.DB.prepare(`UPDATE disasters SET disaster_type = ?, severity = ?, title = ?, country = ?, coordinates_lat = ?, coordinates_lng = ?, event_timestamp = ?, description = ?, updated_at = CURRENT_TIMESTAMP WHERE external_id = ?`)\n          .bind(normType, parsed.severity, parsed.title, parsed.country || null, parsed.coordinates_lat ?? null, parsed.coordinates_lng ?? null, parsed.event_timestamp, parsed.description || null, parsed.external_id)\n          .run()\n      }\n      if (existing.severity !== parsed.severity) {\n        await env.DB.prepare(`INSERT INTO disaster_history (disaster_id, severity_old, severity_new, change_reason)\n                              VALUES (?, ?, ?, ?)`).\n          bind(existing.id, existing.severity, parsed.severity, 'email_update').\n          run()\n      }\n      updatedDisasters = 1\n    }\n\n    // Invalidate cache keys\n    if (env.CACHE) {\n      const keys = [\n        'disasters:summary',\n        'disasters:current:all:all:all:50:0',\n        'disasters:history:7',\n        'countries:list',\n      ]\n      await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\n    }\n\n    return { newDisasters, updatedDisasters }\n  } catch (e: any) {\n    return { newDisasters: 0, updatedDisasters: 0, error: e?.message || String(e) }\n  }\n}\n\nexport default {\n  async fetch(req: Request, env: Env): Promise<Response> {\n  const url = new URL(req.url)\n  // Normalize path to avoid trailing-slash mismatches\n  const pathname = (url.pathname.replace(/\\/+$/g, '') || '/')\n\n  if (req.method === 'OPTIONS') {\n      return new Response(null, { status: 204, headers: { 'access-control-allow-origin': '*', 'access-control-allow-methods': 'POST,OPTIONS', 'access-control-allow-headers': 'content-type,authorization' } })\n    }\n    // Manual trigger to pull GDACS RSS now\n    if (req.method === 'POST' && pathname === '/ingest/gdacs') {\n      try {\n        const auth = req.headers.get('authorization') || ''\n        const token = auth.replace(/^Bearer\\s+/i, '')\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\n        if (!expected || token !== expected) {\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\n        }\n        const rssUrl = env.GDACS_RSS_URL || 'https://www.gdacs.org/xml/rss.xml'\n        const res = await fetch(rssUrl, { cf: { cacheTtl: 60, cacheEverything: true } as any })\n        if (!res.ok) return json({ success: false, error: { code: 'UPSTREAM', message: `GDACS fetch ${res.status}` } }, { status: 502 })\n        const xml = await res.text()\n        const items = parseGdacsFeed(xml).slice(0, 10)\n        let newDisasters = 0\n        let updatedDisasters = 0\n        const errors: Array<{ id: string; error: string }> = []\n        for (const p of items) {\n          const r = await processParsedEmail(p as any, env)\n          newDisasters += r.newDisasters\n          updatedDisasters += r.updatedDisasters\n          if (r.error) errors.push({ id: (p as any).external_id, error: r.error })\n        }\n        if (env.CACHE) {\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\n        }\n        if (errors.length) {\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\n        }\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\n      } catch (err: any) {\n        const message = err?.message || String(err)\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\n      }\n    }\n\n    // Manual trigger to pull VolcanoDiscovery RSS now\n    if (req.method === 'POST' && pathname === '/ingest/volcano') {\n      try {\n        const auth = req.headers.get('authorization') || ''\n        const token = auth.replace(/^Bearer\\s+/i, '')\n        const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\n        if (!expected || token !== expected) {\n          return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\n        }\n        const rssUrl = env.VOLCANODISCOVERY_RSS_URL || 'https://www.volcanodiscovery.com/volcanoesandearthquakenews.rss'\n        const res = await fetch(rssUrl, { cf: { cacheTtl: 60, cacheEverything: true } as any })\n        if (!res.ok) return json({ success: false, error: { code: 'UPSTREAM', message: `VD fetch ${res.status}` } }, { status: 502 })\n        const xml = await res.text()\n        const items = parseVolcanoDiscoveryFeed(xml).slice(0, 20)\n        let newDisasters = 0\n        let updatedDisasters = 0\n        const errors: Array<{ id: string; error: string }> = []\n        for (const p of items) {\n          const r = await processParsedEmail(p as any, env)\n          newDisasters += r.newDisasters\n          updatedDisasters += r.updatedDisasters\n          if (r.error) errors.push({ id: (p as any).external_id, error: r.error })\n        }\n        if (env.CACHE) {\n          const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\n          await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\n        }\n        if (errors.length) {\n          return json({ success: false, error: { code: 'PARTIAL_FAIL', message: 'Some items failed', details: errors }, data: { processed: items.length, newDisasters, updatedDisasters } }, { status: 207 })\n        }\n        return json({ success: true, data: { processed: items.length, newDisasters, updatedDisasters } })\n      } catch (err: any) {\n        const message = err?.message || String(err)\n        return json({ success: false, error: { code: 'INGEST_ERROR', message } }, { status: 500 })\n      }\n    }\n\n  if (req.method === 'POST' && pathname === '/ingest/email') {\n      const auth = req.headers.get('authorization') || ''\n      const token = auth.replace(/^Bearer\\s+/i, '')\n      const expected = env.INGEST_SECRET ?? env.INGEST_TOKEN\n      if (!expected || token !== expected) {\n        return json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Invalid token' } }, { status: 401 })\n      }\n      let payload: any\n      try {\n        payload = await req.json()\n      } catch {\n        return json({ success: false, error: { code: 'BAD_REQUEST', message: 'Invalid JSON' } }, { status: 400 })\n      }\n\n      const subject = String(payload.subject || '')\n      const body = String(payload.body || '')\n      if (!subject && !body) {\n        return json({ success: false, error: { code: 'BAD_REQUEST', message: 'Missing subject/body' } }, { status: 400 })\n      }\n\n      const start = Date.now()\n      const parsedMany = parseEmailMulti(subject, body)\n      let newDisasters = 0\n      let updatedDisasters = 0\n      for (const p of parsedMany) {\n        const r = await processParsedEmail(p, env)\n        newDisasters += r.newDisasters\n        updatedDisasters += r.updatedDisasters\n      }\n\n      // Log processing\n      await env.DB.prepare(`INSERT INTO processing_logs (email_date, disasters_processed, new_disasters, updated_disasters, status, processing_time_ms, email_size_bytes)\n                            VALUES (?, ?, ?, ?, 'OK', ?, ?)`)\n  .bind(new Date().toISOString().slice(0, 10), parsedMany.length, newDisasters, updatedDisasters, Date.now() - start, (subject.length + body.length))\n        .run()\n\n  return json({ success: true, data: { processed: parsedMany.length, newDisasters, updatedDisasters } })\n    }\n\n  // Slightly more diagnostic 404 to help smoke-test debugging\n  return json({ success: false, error: { code: 'NOT_FOUND', message: 'Not found', method: req.method, path: pathname } }, { status: 404 })\n  },\n\n  // Cloudflare Email Workers handler: runs when emails are routed to this worker\n  async email(message: EmailMessage, env: Env, ctx: ExecutionContext) {\n    try {\n      // Optional allowlist for sender addresses (comma-separated)\n      const allow = (env.ALLOW_FROM || '')\n        .split(',')\n        .map((s) => s.trim().toLowerCase())\n        .filter(Boolean)\n      if (allow.length && message.from && !allow.includes(message.from.toLowerCase())) {\n        message.setReject?.('Address not allowed')\n        return\n      }\n\n  // Decode RFC822 with postal-mime for robust MIME parsing\n  const rawBuf = await new Response(message.raw).arrayBuffer()\n  const parser = new PostalMime()\n  const mail = await parser.parse(rawBuf)\n  const subject = mail.subject || message.headers?.get('Subject') || ''\n  const plain = mail.text || ''\n  const html = mail.html || ''\n  const body = plain || stripHtmlToPlain(html)\n  const parsedMany = parseEmailMulti(subject, body)\n      const t0 = Date.now()\n      let newDisasters = 0\n      let updatedDisasters = 0\n      for (const p of parsedMany) {\n        const r = await processParsedEmail(p, env)\n        newDisasters += r.newDisasters\n        updatedDisasters += r.updatedDisasters\n      }\n\n      // Log processing\n      await env.DB.prepare(`INSERT INTO processing_logs (email_date, disasters_processed, new_disasters, updated_disasters, status, processing_time_ms, email_size_bytes)\n                            VALUES (?, ?, ?, ?, 'OK', ?, ?)`)\n  .bind(new Date().toISOString().slice(0, 10), parsedMany.length, newDisasters, updatedDisasters, Date.now() - t0, rawBuf.byteLength)\n        .run()\n    } catch (err) {\n      // Minimal failure logging path\n      try {\n        await env.DB.prepare(`INSERT INTO processing_logs (email_date, disasters_processed, new_disasters, updated_disasters, status, processing_time_ms, email_size_bytes)\n                              VALUES (?, 0, 0, 0, 'ERROR', 0, 0)`).bind(new Date().toISOString().slice(0, 10)).run()\n      } catch {}\n      console.error('Email processing failed:', err)\n    }\n  }\n  ,\n  // Scheduled cron to pull GDACS periodically\n  async scheduled(event: ScheduledEvent, env: Env, ctx: ExecutionContext) {\n    // Pull both GDACS and VolcanoDiscovery feeds\n    try {\n      const [gdacsUrl, vdUrl] = [\n        env.GDACS_RSS_URL || 'https://www.gdacs.org/xml/rss.xml',\n        env.VOLCANODISCOVERY_RSS_URL || 'https://www.volcanodiscovery.com/volcanoesandearthquakenews.rss',\n      ]\n      const [gdacsRes, vdRes] = await Promise.all([\n        fetch(gdacsUrl, { cf: { cacheTtl: 300, cacheEverything: true } as any }),\n        fetch(vdUrl, { cf: { cacheTtl: 300, cacheEverything: true } as any }),\n      ])\n      if (gdacsRes.ok) {\n        const xml = await gdacsRes.text()\n        const items = parseGdacsFeed(xml)\n        await Promise.all(items.map((p) => processParsedEmail(p as any, env)))\n      }\n      if (vdRes.ok) {\n        const xml = await vdRes.text()\n        const items = parseVolcanoDiscoveryFeed(xml)\n        await Promise.all(items.map((p) => processParsedEmail(p as any, env)))\n      }\n      if (env.CACHE) {\n        const keys = ['disasters:summary','disasters:current:all:all:all:50:0','disasters:history:7','countries:list']\n        await Promise.all(keys.map((k) => env.CACHE!.delete(k).catch(() => {})))\n      }\n    } catch {}\n  }\n}\n\nfunction stripHtmlToPlain(html: string): string {\n  // naive fallback: remove tags, decode basic entities, collapse whitespace\n  const noTags = html.replace(/<\\s*br\\s*\\/?>/gi, '\\n').replace(/<[^>]+>/g, ' ')\n  const entities = noTags\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n  return entities.replace(/[\\t\\x0B\\f\\r]+/g, ' ').replace(/\\n\\s*\\n\\s*/g, '\\n\\n').trim()\n}\n", "export type ParsedEmail = {\n  external_id: string\n  disaster_type: string\n  severity: 'RED' | 'ORANGE' | 'GREEN'\n  title: string\n  country?: string\n  coordinates_lat?: number\n  coordinates_lng?: number\n  event_timestamp: string\n  description?: string\n  metadata?: Record<string, unknown>\n}\n\n// Very lightweight parser that expects simple GDACS-like lines.\n// This can be expanded to robust MIME parsing or HTML when needed.\nfunction normalizeTypeRaw(type: string | undefined, title?: string): string {\n  const v = (type || '').toLowerCase().trim()\n  const t = (title || '').toLowerCase()\n  if (/earth\\s*quake|\\bquake\\b|m\\s*\\d+(?:\\.\\d+)?\\s*earth/.test(v + ' ' + t)) return 'earthquake'\n  if (/tropical[_\\s-]*cyclone|\\bcyclone\\b|\\btyphoon\\b|\\bhurricane\\b|\\btc[-_\\s]?\\d*/.test(v + ' ' + t)) return 'cyclone'\n  if (/\\bflood|flooding/.test(v + ' ' + t)) return 'flood'\n  if (/wild\\s*fire|forest\\s*fire|\\bwildfire\\b|fire alert/.test(v + ' ' + t)) return 'wildfire'\n  return 'other'\n}\n\nexport function parseEmail(subject: string, body: string): ParsedEmail {\n  const text = `${subject}\\n${body}`\n  const get = (re: RegExp) => text.match(re)?.[1]?.trim()\n\n  const id = get(/ID:\\s*(.+)/i) || (globalThis as any).crypto?.randomUUID?.() || `${Date.now()}-${Math.random().toString(36).slice(2)}`\n  const type = normalizeTypeRaw((get(/Type:\\s*(.+)/i) || 'unknown').toLowerCase(), subject)\n  const sevText = (get(/Severity:\\s*(.+)/i) || 'GREEN').toUpperCase()\n  const severity = (sevText.includes('RED') ? 'RED' : sevText.includes('ORANGE') || sevText.includes('YELLOW') ? 'ORANGE' : 'GREEN') as ParsedEmail['severity']\n  const title = get(/Title:\\s*(.+)/i) || subject || `${type} event`\n  const country = get(/Country:\\s*([A-Z]{2})/i)\n  const lat = parseFloat(get(/Lat:\\s*([-+]?\\d+\\.\\d+)/i) || '')\n  const lng = parseFloat(get(/Lng:\\s*([-+]?\\d+\\.\\d+)/i) || '')\n  const ts = get(/Date:\\s*([^\\n]+)/i) || new Date().toISOString()\n  const description = get(/Description:\\s*([\\s\\S]+)/i)\n\n  return {\n    external_id: id,\n    disaster_type: type,\n    severity,\n    title,\n    country: country?.toUpperCase(),\n    coordinates_lat: isFinite(lat) ? lat : undefined,\n    coordinates_lng: isFinite(lng) ? lng : undefined,\n    event_timestamp: new Date(ts).toISOString(),\n    description: description?.slice(0, 2000),\n  }\n}\n\n// Parse GDACS daily newsletter that lists multiple events (earthquakes, tropical cyclones) in sections by severity.\nexport function parseEmailMulti(subject: string, body: string): ParsedEmail[] {\n  const text = `${subject}\\n${body}`\n  const results: ParsedEmail[] = []\n\n  // Quick heuristic to detect newsletter\n  const isNewsletter = /Global Disaster Alert and Coordination System/i.test(text) && /Disaster events in the last 24 hours/i.test(text)\n  if (!isNewsletter) {\n    return [parseEmail(subject, body)]\n  }\n\n  const norm = body.replace(/\\r\\n/g, '\\n')\n  const sevMap = (s: string): ParsedEmail['severity'] => (s.toUpperCase().startsWith('RED') ? 'RED' : s.toUpperCase().startsWith('ORANGE') ? 'ORANGE' : 'GREEN')\n\n  // Earthquakes pattern example:\n  // \"Green earthquake alert (Magnitude 4.5M, Depth:59.47km) in Russian Federation 04/09/2025 06:34 UTC, Few people affected in 100km.\"\n  const eqRe = /\\b(Green|Orange|Red)\\s+earthquake\\s+alert\\s*\\(Magnitude\\s*([\\d.]+)M,\\s*Depth:([\\d.]+)km\\)\\s+in\\s+([^\\n]+?)\\s+(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s+(\\d{1,2}:\\d{2})\\s*UTC/gi\n  let m: RegExpExecArray | null\n  while ((m = eqRe.exec(norm))) {\n    const sev = sevMap(m[1])\n    const mag = m[2]\n    const depthKm = m[3]\n    const countryRaw = m[4].trim().replace(/[.,]$/, '')\n    const dateStr = m[5]\n    const timeStr = m[6]\n    const iso = toIsoFromEuropean(dateStr, timeStr)\n    const countryName = sanitizeCountry(countryRaw)\n    const countryIso = countryName ? resolveCountryIso2(countryName) : null\n\n    const title = `${capitalize(sev.toLowerCase())} earthquake M${mag} ${countryName ? 'in ' + countryName : ''}`.trim()\n    const external_id = `gdacs:earthquake:${countryIso || countryName || 'unknown'}:${iso}:${mag}:${depthKm}`\n\n    results.push({\n      external_id,\n      disaster_type: 'earthquake',\n      severity: sev,\n      title,\n      country: countryIso || undefined,\n      event_timestamp: iso,\n      description: `Magnitude ${mag} at depth ${depthKm}km`,\n      metadata: { magnitude: parseFloat(mag), depth_km: parseFloat(depthKm), original_country_name: countryName || undefined }\n    })\n  }\n\n  // Tropical cyclone pattern header line:\n  // \"Green alert for tropical cyclone PEIPAH-25. Population affected by Category 1 ...\"\n  const tcRe = /\\b(Green|Orange|Red)\\s+alert\\s+for\\s+tropical\\s+cyclone\\s+([A-Z0-9\\-\\.]+)\\./gi\n  while ((m = tcRe.exec(norm))) {\n    const sev = sevMap(m[1])\n    const name = m[2]\n    // Look ahead within next few lines for date range and countries line\n    const tail = norm.slice(tcRe.lastIndex, tcRe.lastIndex + 800)\n    const range = /From\\s+(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s+to\\s+(\\d{1,2}\\/\\d{1,2}\\/\\d{4})/i.exec(tail)\n    const endIso = range ? toIsoFromEuropean(range[2], '00:00') : new Date().toISOString()\n    const countriesMatch = /The cyclone affects these countries:\\s*([^\\.\\n]+)/i.exec(tail)\n    const firstCountry = countriesMatch ? countriesMatch[1].split(',')[0].trim() : undefined\n    const countryName = firstCountry ? sanitizeCountry(firstCountry.replace(/\\(.*?\\)/, '').trim()) : undefined\n    const countryIso = countryName ? resolveCountryIso2(countryName) : undefined\n\n    // Try to extract category and max wind speed (km/h)\n    const catMatch = /Category\\s*([1-5])/i.exec(tail)\n    const windMatches = Array.from(tail.matchAll(/(\\d{2,3})\\s*(?:km\\/?h|kph)/gi))\n    const maxWind = windMatches.length ? Math.max(...windMatches.map((w) => parseInt(w[1], 10))) : undefined\n\n    const title = `${capitalize(sev.toLowerCase())} tropical cyclone ${name}`\n    const external_id = `gdacs:cyclone:${name}:${endIso}`\n    results.push({\n      external_id,\n      disaster_type: 'cyclone',\n      severity: sev,\n      title,\n      country: countryIso || undefined,\n      event_timestamp: endIso,\n      description: `GDACS tropical cyclone ${name}`,\n      metadata: { name, category: catMatch ? parseInt(catMatch[1], 10) : undefined, max_wind_kmh: maxWind, original_country_name: countryName }\n    })\n  }\n\n  // If nothing matched, fall back to single-event parsing\n  return results.length ? results : [parseEmail(subject, body)]\n}\n\nfunction toIsoFromEuropean(dateDDMMYYYY: string, timeHHMM: string): string {\n  // Accepts dd/mm/yyyy or d/m/yyyy\n  const [d, m, y] = dateDDMMYYYY.split('/').map((s) => parseInt(s, 10))\n  const [hh, mm] = timeHHMM.split(':').map((s) => parseInt(s, 10))\n  const pad = (n: number) => n.toString().padStart(2, '0')\n  return `${y}-${pad(m)}-${pad(d)}T${pad(hh)}:${pad(mm)}:00.000Z`\n}\n\nfunction sanitizeCountry(raw: string): string | null {\n  const c = raw.replace(/\\[unknown\\]/i, '').replace(/\\s{2,}/g, ' ').trim()\n  if (!c || /unknown/i.test(raw)) return null\n  return c\n}\n\nfunction capitalize(s: string) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Basic country name to ISO2 normalization. Fallback returns undefined.\nexport function resolveCountryIso2(name: string): string | undefined {\n  const n = name\n    .toLowerCase()\n    .replace(/[^a-z\\s]/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim()\n  const map: Record<string, string> = {\n    'russian federation': 'RU',\n    russia: 'RU',\n    'united states': 'US',\n    'united states of america': 'US',\n    usa: 'US',\n    america: 'US',\n    canada: 'CA',\n    mexico: 'MX',\n    brazil: 'BR',\n    chile: 'CL',\n    peru: 'PE',\n    argentina: 'AR',\n    colombia: 'CO',\n    ecuador: 'EC',\n    bolivia: 'BO',\n    'dominican republic': 'DO',\n    haiti: 'HT',\n    jamaica: 'JM',\n    cuba: 'CU',\n    'puerto rico': 'PR',\n    iceland: 'IS',\n    greenland: 'GL',\n    ireland: 'IE',\n    'united kingdom': 'GB',\n    uk: 'GB',\n    england: 'GB',\n    scotland: 'GB',\n    wales: 'GB',\n    france: 'FR',\n    spain: 'ES',\n    portugal: 'PT',\n    germany: 'DE',\n    italy: 'IT',\n    switzerland: 'CH',\n    austria: 'AT',\n    netherlands: 'NL',\n    belgium: 'BE',\n    luxembourg: 'LU',\n    norway: 'NO',\n    sweden: 'SE',\n    finland: 'FI',\n    denmark: 'DK',\n    estonia: 'EE',\n    latvia: 'LV',\n    lithuania: 'LT',\n    poland: 'PL',\n    czechia: 'CZ',\n    'czech republic': 'CZ',\n    slovakia: 'SK',\n    hungary: 'HU',\n    greece: 'GR',\n    turkey: 'TR',\n    cyprus: 'CY',\n    romania: 'RO',\n    bulgaria: 'BG',\n    serbia: 'RS',\n    croatia: 'HR',\n    slovenia: 'SI',\n    albania: 'AL',\n    macedonia: 'MK',\n    kosovo: 'XK',\n    montenegro: 'ME',\n    bosnia: 'BA',\n    'bosnia and herzegovina': 'BA',\n    ukraine: 'UA',\n    belarus: 'BY',\n    moldova: 'MD',\n    rwanda: 'RW',\n    uganda: 'UG',\n    kenya: 'KE',\n    tanzania: 'TZ',\n    somalia: 'SO',\n    ethiopia: 'ET',\n    sudan: 'SD',\n    'south sudan': 'SS',\n    egypt: 'EG',\n    libya: 'LY',\n    tunisia: 'TN',\n    algeria: 'DZ',\n    morocco: 'MA',\n    'western sahara': 'EH',\n    nigeria: 'NG',\n    niger: 'NE',\n    ghana: 'GH',\n    benin: 'BJ',\n    togo: 'TG',\n    'cote d ivoire': 'CI',\n    'cote divoire': 'CI',\n    \"cote d'ivoire\": 'CI',\n    'ivory coast': 'CI',\n    senegal: 'SN',\n    mali: 'ML',\n    'burkina faso': 'BF',\n    guinea: 'GN',\n    liberia: 'LR',\n    sierra: 'SL',\n    'sierra leone': 'SL',\n    cameroon: 'CM',\n    gabon: 'GA',\n    congo: 'CG',\n    'republic of the congo': 'CG',\n    'democratic republic of the congo': 'CD',\n    drc: 'CD',\n    angola: 'AO',\n    zambia: 'ZM',\n    zimbabwe: 'ZW',\n    botswana: 'BW',\n    namibia: 'NA',\n    mozambique: 'MZ',\n    madagascar: 'MG',\n    'south africa': 'ZA',\n    lesotho: 'LS',\n    swaziland: 'SZ',\n    eswatini: 'SZ',\n    china: 'CN',\n    mongolia: 'MN',\n    japan: 'JP',\n    korea: 'KR',\n    'south korea': 'KR',\n    'north korea': 'KP',\n    taiwan: 'TW',\n    india: 'IN',\n    pakistan: 'PK',\n    bangladesh: 'BD',\n    nepal: 'NP',\n    bhutan: 'BT',\n    sri: 'LK',\n    'sri lanka': 'LK',\n    maldives: 'MV',\n    myanmar: 'MM',\n    'myanmar burma': 'MM',\n    burma: 'MM',\n    thailand: 'TH',\n    laos: 'LA',\n    'lao pdr': 'LA',\n    cambodia: 'KH',\n    vietnam: 'VN',\n    'viet nam': 'VN',\n    malaysia: 'MY',\n    singapore: 'SG',\n    philippines: 'PH',\n    indonesia: 'ID',\n    brunei: 'BN',\n    timor: 'TL',\n    'timor leste': 'TL',\n    australia: 'AU',\n    'papua new guinea': 'PG',\n    new: 'NZ',\n    'new zealand': 'NZ',\n    fiji: 'FJ',\n    vanuatu: 'VU',\n    tonga: 'TO',\n    samoa: 'WS',\n    'solomon islands': 'SB',\n    'marshall islands': 'MH',\n    kiribati: 'KI',\n    micronesia: 'FM',\n    palau: 'PW',\n    philippinessea: 'PH',\n    iran: 'IR',\n    iraq: 'IQ',\n    syria: 'SY',\n    lebanon: 'LB',\n    jordan: 'JO',\n    israel: 'IL',\n    palestine: 'PS',\n    'saudi arabia': 'SA',\n    yemen: 'YE',\n    oman: 'OM',\n    uae: 'AE',\n    'united arab emirates': 'AE',\n    qatar: 'QA',\n    bahrain: 'BH',\n    kuwait: 'KW'\n  }\n  return map[n]\n}\n", "import { XMLParser } from 'fast-xml-parser'\n\nexport type ParsedGdacsItem = {\n  external_id: string\n  disaster_type: string\n  severity: 'GREEN' | 'ORANGE' | 'RED'\n  title: string\n  country?: string\n  coordinates_lat?: number\n  coordinates_lng?: number\n  event_timestamp: string\n  description?: string\n}\n\nfunction mapAlertLevel(level?: string): 'GREEN' | 'ORANGE' | 'RED' {\n  const v = (level || '').toLowerCase()\n  if (v === 'red') return 'RED'\n  if (v === 'orange') return 'ORANGE'\n  return 'GREEN'\n}\n\nfunction inferType(title: string): string {\n  const t = title.toLowerCase()\n  if (t.includes('earthquake')) return 'earthquake'\n  if (t.includes('flood')) return 'flood'\n  if (t.includes('cyclone') || t.includes('tropical cyclone') || t.includes('typhoon') || t.includes('hurricane')) return 'cyclone'\n  if (t.includes('wildfire') || t.includes('fire')) return 'wildfire'\n  return 'other'\n}\n\nexport function parseGdacsFeed(xml: string): ParsedGdacsItem[] {\n  const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '' })\n  const doc = parser.parse(xml)\n  const items = doc?.rss?.channel?.item\n  if (!items) return []\n  const list = Array.isArray(items) ? items : [items]\n  const result: ParsedGdacsItem[] = []\n  for (const it of list) {\n    const eventId = String(it['gdacs:eventid'] || it.guid || it.link || it.title || '')\n    if (!eventId) continue\n    const ext = `gdacs:${eventId}`\n    const title: string = String(it.title || '')\n    const alert = String(it['gdacs:alertlevel'] || '')\n    const severity = mapAlertLevel(alert)\n    const t = inferType(title)\n    const pub = it.pubDate ? new Date(it.pubDate) : new Date()\n    const when = isNaN(pub.getTime()) ? new Date() : pub\n    const country = it['gdacs:country'] ? String(it['gdacs:country']) : undefined\n    const geopt = it['georss:point'] ? String(it['georss:point']) : ''\n    let lat: number | undefined\n    let lng: number | undefined\n    if (geopt) {\n      const [latStr, lngStr] = geopt.trim().split(/\\s+/)\n      lat = Number(latStr)\n      lng = Number(lngStr)\n      if (!isFinite(lat)) lat = undefined\n      if (!isFinite(lng)) lng = undefined\n    }\n    const description: string | undefined = it.description ? String(it.description) : undefined\n\n    result.push({\n      external_id: ext,\n      disaster_type: t,\n      severity,\n      title,\n      country,\n      coordinates_lat: lat,\n      coordinates_lng: lng,\n      event_timestamp: when.toISOString(),\n      description,\n    })\n  }\n  return result\n}\n", "import { XMLParser } from 'fast-xml-parser'\nimport { resolveCountryIso2 } from './parser'\n\nexport type ParsedVDItem = {\n  external_id: string\n  disaster_type: string\n  severity: 'GREEN' | 'ORANGE' | 'RED'\n  title: string\n  country?: string\n  coordinates_lat?: number\n  coordinates_lng?: number\n  event_timestamp: string\n  description?: string\n}\n\n// Map VolcanoDiscovery item to GDACS-like categories where possible.\n// We'll classify:\n// - Earthquake reports => 'earthquake'\n// - Volcano eruption/ash alert => 'other' (GDACS doesn't have 'volcano'); keep 'other' for now.\n// - Tsunami alerts, floods, cyclones are unlikely here, default to 'other'.\nfunction inferTypeFromVD(title: string, description?: string): string {\n  const text = `${title} ${description || ''}`.toLowerCase()\n  if (/earthquake|quake\\b|m\\s*\\d+(?:\\.\\d+)?\\s*/.test(text)) return 'earthquake'\n  if (/eruption|volcano|ash plume|lava|strombolian|vulcanian|plinian/.test(text)) return 'other'\n  return 'other'\n}\n\n// Heuristic severity mapping: use magnitude for earthquakes; otherwise default ORANGE for eruption notices, GREEN for general news.\nfunction inferSeverity(title: string, description?: string): 'GREEN' | 'ORANGE' | 'RED' {\n  const text = `${title} ${description || ''}`.toLowerCase()\n  const mag = /m\\s*(\\d+(?:\\.\\d+)?)/i.exec(text)\n  if (mag) {\n    const m = parseFloat(mag[1])\n    if (m >= 6.5) return 'RED'\n    if (m >= 5.0) return 'ORANGE'\n    return 'GREEN'\n  }\n  if (/eruption|significant ash|strong explosion|major/.test(text)) return 'ORANGE'\n  return 'GREEN'\n}\n\nexport function parseVolcanoDiscoveryFeed(xml: string): ParsedVDItem[] {\n  const parser = new XMLParser({ ignoreAttributes: false, attributeNamePrefix: '' })\n  const doc = parser.parse(xml)\n  const items = doc?.rss?.channel?.item\n  if (!items) return []\n  const list = Array.isArray(items) ? items : [items]\n  const out: ParsedVDItem[] = []\n  for (const it of list) {\n    const guid = String(it.guid?.['#text'] || it.guid || it.link || it.title || '')\n    const title = String(it.title || '')\n    const description: string | undefined = it.description ? String(it.description) : undefined\n    const pubDate = it.pubDate ? new Date(it.pubDate) : new Date()\n    const when = isNaN(pubDate.getTime()) ? new Date() : pubDate\n\n    // Country extraction heuristic: often appears like \"Volcano/Place (Country)\" or in description.\n    let countryIso: string | undefined\n    const countryMatch = /\\(([^)]+)\\)\\s*$/.exec(title) || /\\b([A-Z][a-zA-Z]+(?:\\s+[A-Z][a-zA-Z]+)*)\\b(?:\\s*\\)|\\.|,)?\\s*$/.exec(title)\n    if (countryMatch) {\n      const cName = countryMatch[1].trim()\n      countryIso = resolveCountryIso2(cName)\n    } else if (description) {\n      const m = /\\b(in|at)\\s+([A-Z][a-zA-Z]+(?:\\s+[A-Z][a-zA-Z]+)*)\\b/.exec(description)\n      if (m) countryIso = resolveCountryIso2(m[2])\n    }\n\n    // Lat/Lng sometimes appear in geo tags or text; VolcanoDiscovery RSS usually lacks georss.\n    let lat: number | undefined\n    let lng: number | undefined\n    if (it['geo:lat'] && it['geo:long']) {\n      const la = Number(it['geo:lat'])\n      const lo = Number(it['geo:long'])\n      if (isFinite(la)) lat = la\n      if (isFinite(lo)) lng = lo\n    }\n\n    const type = inferTypeFromVD(title, description)\n    const severity = inferSeverity(title, description)\n    const external_id = `vd:${guid || title.slice(0, 80)}`\n\n    out.push({\n      external_id,\n      disaster_type: type,\n      severity,\n      title,\n      country: countryIso,\n      coordinates_lat: lat,\n      coordinates_lng: lng,\n      event_timestamp: when.toISOString(),\n      description,\n    })\n  }\n  return out\n}\n", "import MimeNode from './mime-node.js';\nimport { textToHtml, htmlToText, formatTextHeader, formatHtmlHeader } from './text-format.js';\nimport addressParser from './address-parser.js';\nimport { decodeWords, textEncoder, blobToArrayBuffer } from './decode-strings.js';\nimport { base64ArrayBuffer } from './base64-encoder.js';\n\nexport { addressParser, decodeWords };\n\nexport default class PostalMime {\n    static parse(buf, options) {\n        const parser = new PostalMime(options);\n        return parser.parse(buf);\n    }\n\n    constructor(options) {\n        this.options = options || {};\n\n        this.root = this.currentNode = new MimeNode({\n            postalMime: this\n        });\n        this.boundaries = [];\n\n        this.textContent = {};\n        this.attachments = [];\n\n        this.attachmentEncoding =\n            (this.options.attachmentEncoding || '')\n                .toString()\n                .replace(/[-_\\s]/g, '')\n                .trim()\n                .toLowerCase() || 'arraybuffer';\n\n        this.started = false;\n    }\n\n    async finalize() {\n        // close all pending nodes\n        await this.root.finalize();\n    }\n\n    async processLine(line, isFinal) {\n        let boundaries = this.boundaries;\n\n        // check if this is a mime boundary\n        if (boundaries.length && line.length > 2 && line[0] === 0x2d && line[1] === 0x2d) {\n            // could be a boundary marker\n            for (let i = boundaries.length - 1; i >= 0; i--) {\n                let boundary = boundaries[i];\n\n                if (line.length !== boundary.value.length + 2 && line.length !== boundary.value.length + 4) {\n                    continue;\n                }\n\n                let isTerminator = line.length === boundary.value.length + 4;\n\n                if (isTerminator && (line[line.length - 2] !== 0x2d || line[line.length - 1] !== 0x2d)) {\n                    continue;\n                }\n\n                let boudaryMatches = true;\n                for (let i = 0; i < boundary.value.length; i++) {\n                    if (line[i + 2] !== boundary.value[i]) {\n                        boudaryMatches = false;\n                        break;\n                    }\n                }\n                if (!boudaryMatches) {\n                    continue;\n                }\n\n                if (isTerminator) {\n                    await boundary.node.finalize();\n\n                    this.currentNode = boundary.node.parentNode || this.root;\n                } else {\n                    // finalize any open child nodes (should be just one though)\n                    await boundary.node.finalizeChildNodes();\n\n                    this.currentNode = new MimeNode({\n                        postalMime: this,\n                        parentNode: boundary.node\n                    });\n                }\n\n                if (isFinal) {\n                    return this.finalize();\n                }\n\n                return;\n            }\n        }\n\n        this.currentNode.feed(line);\n\n        if (isFinal) {\n            return this.finalize();\n        }\n    }\n\n    readLine() {\n        let startPos = this.readPos;\n        let endPos = this.readPos;\n\n        let res = () => {\n            return {\n                bytes: new Uint8Array(this.buf, startPos, endPos - startPos),\n                done: this.readPos >= this.av.length\n            };\n        };\n\n        while (this.readPos < this.av.length) {\n            const c = this.av[this.readPos++];\n\n            if (c !== 0x0d && c !== 0x0a) {\n                endPos = this.readPos;\n            }\n\n            if (c === 0x0a) {\n                return res();\n            }\n        }\n\n        return res();\n    }\n\n    async processNodeTree() {\n        // get text nodes\n\n        let textContent = {};\n\n        let textTypes = new Set();\n        let textMap = (this.textMap = new Map());\n\n        let forceRfc822Attachments = this.forceRfc822Attachments();\n\n        let walk = async (node, alternative, related) => {\n            alternative = alternative || false;\n            related = related || false;\n\n            if (!node.contentType.multipart) {\n                // is it inline message/rfc822\n                if (this.isInlineMessageRfc822(node) && !forceRfc822Attachments) {\n                    const subParser = new PostalMime();\n                    node.subMessage = await subParser.parse(node.content);\n\n                    if (!textMap.has(node)) {\n                        textMap.set(node, {});\n                    }\n\n                    let textEntry = textMap.get(node);\n\n                    // default to text if there is no content\n                    if (node.subMessage.text || !node.subMessage.html) {\n                        textEntry.plain = textEntry.plain || [];\n                        textEntry.plain.push({ type: 'subMessage', value: node.subMessage });\n                        textTypes.add('plain');\n                    }\n\n                    if (node.subMessage.html) {\n                        textEntry.html = textEntry.html || [];\n                        textEntry.html.push({ type: 'subMessage', value: node.subMessage });\n                        textTypes.add('html');\n                    }\n\n                    if (subParser.textMap) {\n                        subParser.textMap.forEach((subTextEntry, subTextNode) => {\n                            textMap.set(subTextNode, subTextEntry);\n                        });\n                    }\n\n                    for (let attachment of node.subMessage.attachments || []) {\n                        this.attachments.push(attachment);\n                    }\n                }\n\n                // is it text?\n                else if (this.isInlineTextNode(node)) {\n                    let textType = node.contentType.parsed.value.substr(node.contentType.parsed.value.indexOf('/') + 1);\n\n                    let selectorNode = alternative || node;\n                    if (!textMap.has(selectorNode)) {\n                        textMap.set(selectorNode, {});\n                    }\n\n                    let textEntry = textMap.get(selectorNode);\n                    textEntry[textType] = textEntry[textType] || [];\n                    textEntry[textType].push({ type: 'text', value: node.getTextContent() });\n                    textTypes.add(textType);\n                }\n\n                // is it an attachment\n                else if (node.content) {\n                    const filename = node.contentDisposition.parsed.params.filename || node.contentType.parsed.params.name || null;\n                    const attachment = {\n                        filename: filename ? decodeWords(filename) : null,\n                        mimeType: node.contentType.parsed.value,\n                        disposition: node.contentDisposition.parsed.value || null\n                    };\n\n                    if (related && node.contentId) {\n                        attachment.related = true;\n                    }\n\n                    if (node.contentDescription) {\n                        attachment.description = node.contentDescription;\n                    }\n\n                    if (node.contentId) {\n                        attachment.contentId = node.contentId;\n                    }\n\n                    switch (node.contentType.parsed.value) {\n                        // Special handling for calendar events\n                        case 'text/calendar':\n                        case 'application/ics': {\n                            if (node.contentType.parsed.params.method) {\n                                attachment.method = node.contentType.parsed.params.method.toString().toUpperCase().trim();\n                            }\n\n                            // Enforce into unicode\n                            const decodedText = node.getTextContent().replace(/\\r?\\n/g, '\\n').replace(/\\n*$/, '\\n');\n                            attachment.content = textEncoder.encode(decodedText);\n                            break;\n                        }\n\n                        // Regular attachments\n                        default:\n                            attachment.content = node.content;\n                    }\n\n                    this.attachments.push(attachment);\n                }\n            } else if (node.contentType.multipart === 'alternative') {\n                alternative = node;\n            } else if (node.contentType.multipart === 'related') {\n                related = node;\n            }\n\n            for (let childNode of node.childNodes) {\n                await walk(childNode, alternative, related);\n            }\n        };\n\n        await walk(this.root, false, []);\n\n        textMap.forEach(mapEntry => {\n            textTypes.forEach(textType => {\n                if (!textContent[textType]) {\n                    textContent[textType] = [];\n                }\n\n                if (mapEntry[textType]) {\n                    mapEntry[textType].forEach(textEntry => {\n                        switch (textEntry.type) {\n                            case 'text':\n                                textContent[textType].push(textEntry.value);\n                                break;\n\n                            case 'subMessage':\n                                {\n                                    switch (textType) {\n                                        case 'html':\n                                            textContent[textType].push(formatHtmlHeader(textEntry.value));\n                                            break;\n                                        case 'plain':\n                                            textContent[textType].push(formatTextHeader(textEntry.value));\n                                            break;\n                                    }\n                                }\n                                break;\n                        }\n                    });\n                } else {\n                    let alternativeType;\n                    switch (textType) {\n                        case 'html':\n                            alternativeType = 'plain';\n                            break;\n                        case 'plain':\n                            alternativeType = 'html';\n                            break;\n                    }\n\n                    (mapEntry[alternativeType] || []).forEach(textEntry => {\n                        switch (textEntry.type) {\n                            case 'text':\n                                switch (textType) {\n                                    case 'html':\n                                        textContent[textType].push(textToHtml(textEntry.value));\n                                        break;\n                                    case 'plain':\n                                        textContent[textType].push(htmlToText(textEntry.value));\n                                        break;\n                                }\n                                break;\n\n                            case 'subMessage':\n                                {\n                                    switch (textType) {\n                                        case 'html':\n                                            textContent[textType].push(formatHtmlHeader(textEntry.value));\n                                            break;\n                                        case 'plain':\n                                            textContent[textType].push(formatTextHeader(textEntry.value));\n                                            break;\n                                    }\n                                }\n                                break;\n                        }\n                    });\n                }\n            });\n        });\n\n        Object.keys(textContent).forEach(textType => {\n            textContent[textType] = textContent[textType].join('\\n');\n        });\n\n        this.textContent = textContent;\n    }\n\n    isInlineTextNode(node) {\n        if (node.contentDisposition.parsed.value === 'attachment') {\n            // no matter the type, this is an attachment\n            return false;\n        }\n\n        switch (node.contentType.parsed.value) {\n            case 'text/html':\n            case 'text/plain':\n                return true;\n\n            case 'text/calendar':\n            case 'text/csv':\n            default:\n                return false;\n        }\n    }\n\n    isInlineMessageRfc822(node) {\n        if (node.contentType.parsed.value !== 'message/rfc822') {\n            return false;\n        }\n        let disposition = node.contentDisposition.parsed.value || (this.options.rfc822Attachments ? 'attachment' : 'inline');\n        return disposition === 'inline';\n    }\n\n    // Check if this is a specially crafted report email where message/rfc822 content should not be inlined\n    forceRfc822Attachments() {\n        if (this.options.forceRfc822Attachments) {\n            return true;\n        }\n\n        let forceRfc822Attachments = false;\n        let walk = node => {\n            if (!node.contentType.multipart) {\n                if (['message/delivery-status', 'message/feedback-report'].includes(node.contentType.parsed.value)) {\n                    forceRfc822Attachments = true;\n                }\n            }\n\n            for (let childNode of node.childNodes) {\n                walk(childNode);\n            }\n        };\n        walk(this.root);\n        return forceRfc822Attachments;\n    }\n\n    async resolveStream(stream) {\n        let chunkLen = 0;\n        let chunks = [];\n        const reader = stream.getReader();\n\n        while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n                break;\n            }\n            chunks.push(value);\n            chunkLen += value.length;\n        }\n\n        const result = new Uint8Array(chunkLen);\n        let chunkPointer = 0;\n        for (let chunk of chunks) {\n            result.set(chunk, chunkPointer);\n            chunkPointer += chunk.length;\n        }\n\n        return result;\n    }\n\n    async parse(buf) {\n        if (this.started) {\n            throw new Error('Can not reuse parser, create a new PostalMime object');\n        }\n        this.started = true;\n\n        // Check if the input is a readable stream and resolve it into an ArrayBuffer\n        if (buf && typeof buf.getReader === 'function') {\n            buf = await this.resolveStream(buf);\n        }\n\n        // Should it throw for an empty value instead of defaulting to an empty ArrayBuffer?\n        buf = buf || new ArrayBuffer(0);\n\n        // Cast string input to Uint8Array\n        if (typeof buf === 'string') {\n            buf = textEncoder.encode(buf);\n        }\n\n        // Cast Blob to ArrayBuffer\n        if (buf instanceof Blob || Object.prototype.toString.call(buf) === '[object Blob]') {\n            buf = await blobToArrayBuffer(buf);\n        }\n\n        // Cast Node.js Buffer object or Uint8Array into ArrayBuffer\n        if (buf.buffer instanceof ArrayBuffer) {\n            buf = new Uint8Array(buf).buffer;\n        }\n\n        this.buf = buf;\n\n        this.av = new Uint8Array(buf);\n        this.readPos = 0;\n\n        while (this.readPos < this.av.length) {\n            const line = this.readLine();\n\n            await this.processLine(line.bytes, line.done);\n        }\n\n        await this.processNodeTree();\n\n        const message = {\n            headers: this.root.headers.map(entry => ({ key: entry.key, value: entry.value })).reverse()\n        };\n\n        for (const key of ['from', 'sender']) {\n            const addressHeader = this.root.headers.find(line => line.key === key);\n            if (addressHeader && addressHeader.value) {\n                const addresses = addressParser(addressHeader.value);\n                if (addresses && addresses.length) {\n                    message[key] = addresses[0];\n                }\n            }\n        }\n\n        for (const key of ['delivered-to', 'return-path']) {\n            const addressHeader = this.root.headers.find(line => line.key === key);\n            if (addressHeader && addressHeader.value) {\n                const addresses = addressParser(addressHeader.value);\n                if (addresses && addresses.length && addresses[0].address) {\n                    const camelKey = key.replace(/\\-(.)/g, (o, c) => c.toUpperCase());\n                    message[camelKey] = addresses[0].address;\n                }\n            }\n        }\n\n        for (const key of ['to', 'cc', 'bcc', 'reply-to']) {\n            const addressHeaders = this.root.headers.filter(line => line.key === key);\n            let addresses = [];\n\n            addressHeaders\n                .filter(entry => entry && entry.value)\n                .map(entry => addressParser(entry.value))\n                .forEach(parsed => (addresses = addresses.concat(parsed || [])));\n\n            if (addresses && addresses.length) {\n                const camelKey = key.replace(/\\-(.)/g, (o, c) => c.toUpperCase());\n                message[camelKey] = addresses;\n            }\n        }\n\n        for (const key of ['subject', 'message-id', 'in-reply-to', 'references']) {\n            const header = this.root.headers.find(line => line.key === key);\n            if (header && header.value) {\n                const camelKey = key.replace(/\\-(.)/g, (o, c) => c.toUpperCase());\n                message[camelKey] = decodeWords(header.value);\n            }\n        }\n\n        let dateHeader = this.root.headers.find(line => line.key === 'date');\n        if (dateHeader) {\n            let date = new Date(dateHeader.value);\n            if (!date || date.toString() === 'Invalid Date') {\n                date = dateHeader.value;\n            } else {\n                // enforce ISO format if seems to be a valid date\n                date = date.toISOString();\n            }\n            message.date = date;\n        }\n\n        if (this.textContent?.html) {\n            message.html = this.textContent.html;\n        }\n\n        if (this.textContent?.plain) {\n            message.text = this.textContent.plain;\n        }\n\n        message.attachments = this.attachments;\n\n        switch (this.attachmentEncoding) {\n            case 'arraybuffer':\n                break;\n\n            case 'base64':\n                for (let attachment of message.attachments || []) {\n                    if (attachment?.content) {\n                        attachment.content = base64ArrayBuffer(attachment.content);\n                        attachment.encoding = 'base64';\n                    }\n                }\n                break;\n\n            case 'utf8':\n                let attachmentDecoder = new TextDecoder('utf8');\n                for (let attachment of message.attachments || []) {\n                    if (attachment?.content) {\n                        attachment.content = attachmentDecoder.decode(attachment.content);\n                        attachment.encoding = 'utf8';\n                    }\n                }\n                break;\n\n            default:\n                throw new Error('Unknwon attachment encoding');\n        }\n\n        return message;\n    }\n}\n", "import { getDecoder, decodeParameterValueContinuations, textEncoder } from './decode-strings.js';\nimport PassThroughDecoder from './pass-through-decoder.js';\nimport Base64Decoder from './base64-decoder.js';\nimport QPDecoder from './qp-decoder.js';\n\nexport default class MimeNode {\n    constructor(opts) {\n        opts = opts || {};\n\n        this.postalMime = opts.postalMime;\n\n        this.root = !!opts.parentNode;\n        this.childNodes = [];\n        if (opts.parentNode) {\n            opts.parentNode.childNodes.push(this);\n        }\n\n        this.state = 'header';\n\n        this.headerLines = [];\n\n        this.contentType = {\n            value: 'text/plain',\n            default: true\n        };\n\n        this.contentTransferEncoding = {\n            value: '8bit'\n        };\n\n        this.contentDisposition = {\n            value: ''\n        };\n\n        this.headers = [];\n\n        this.contentDecoder = false;\n    }\n\n    setupContentDecoder(transferEncoding) {\n        if (/base64/i.test(transferEncoding)) {\n            this.contentDecoder = new Base64Decoder();\n        } else if (/quoted-printable/i.test(transferEncoding)) {\n            this.contentDecoder = new QPDecoder({ decoder: getDecoder(this.contentType.parsed.params.charset) });\n        } else {\n            this.contentDecoder = new PassThroughDecoder();\n        }\n    }\n\n    async finalize() {\n        if (this.state === 'finished') {\n            return;\n        }\n\n        if (this.state === 'header') {\n            this.processHeaders();\n        }\n\n        // remove self from boundary listing\n        let boundaries = this.postalMime.boundaries;\n        for (let i = boundaries.length - 1; i >= 0; i--) {\n            let boundary = boundaries[i];\n            if (boundary.node === this) {\n                boundaries.splice(i, 1);\n                break;\n            }\n        }\n\n        await this.finalizeChildNodes();\n\n        this.content = this.contentDecoder ? await this.contentDecoder.finalize() : null;\n\n        this.state = 'finished';\n    }\n\n    async finalizeChildNodes() {\n        for (let childNode of this.childNodes) {\n            await childNode.finalize();\n        }\n    }\n\n    parseStructuredHeader(str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n\n        let key = false;\n        let value = '';\n        let stage = 'value';\n\n        let quote = false;\n        let escaped = false;\n        let chr;\n\n        for (let i = 0, len = str.length; i < len; i++) {\n            chr = str.charAt(i);\n            switch (stage) {\n                case 'key':\n                    if (chr === '=') {\n                        key = value.trim().toLowerCase();\n                        stage = 'value';\n                        value = '';\n                        break;\n                    }\n                    value += chr;\n                    break;\n                case 'value':\n                    if (escaped) {\n                        value += chr;\n                    } else if (chr === '\\\\') {\n                        escaped = true;\n                        continue;\n                    } else if (quote && chr === quote) {\n                        quote = false;\n                    } else if (!quote && chr === '\"') {\n                        quote = chr;\n                    } else if (!quote && chr === ';') {\n                        if (key === false) {\n                            response.value = value.trim();\n                        } else {\n                            response.params[key] = value.trim();\n                        }\n                        stage = 'key';\n                        value = '';\n                    } else {\n                        value += chr;\n                    }\n                    escaped = false;\n                    break;\n            }\n        }\n\n        // finalize remainder\n        value = value.trim();\n        if (stage === 'value') {\n            if (key === false) {\n                // default value\n                response.value = value;\n            } else {\n                // subkey value\n                response.params[key] = value;\n            }\n        } else if (value) {\n            // treat as key without value, see emptykey:\n            // Header-Key: somevalue; key=value; emptykey\n            response.params[value.toLowerCase()] = '';\n        }\n\n        if (response.value) {\n            response.value = response.value.toLowerCase();\n        }\n\n        // convert Parameter Value Continuations into single strings\n        decodeParameterValueContinuations(response);\n\n        return response;\n    }\n\n    decodeFlowedText(str, delSp) {\n        return (\n            str\n                .split(/\\r?\\n/)\n                // remove soft linebreaks\n                // soft linebreaks are added after space symbols\n                .reduce((previousValue, currentValue) => {\n                    if (/ $/.test(previousValue) && !/(^|\\n)-- $/.test(previousValue)) {\n                        if (delSp) {\n                            // delsp adds space to text to be able to fold it\n                            // these spaces can be removed once the text is unfolded\n                            return previousValue.slice(0, -1) + currentValue;\n                        } else {\n                            return previousValue + currentValue;\n                        }\n                    } else {\n                        return previousValue + '\\n' + currentValue;\n                    }\n                })\n                // remove whitespace stuffing\n                // http://tools.ietf.org/html/rfc3676#section-4.4\n                .replace(/^ /gm, '')\n        );\n    }\n\n    getTextContent() {\n        if (!this.content) {\n            return '';\n        }\n\n        let str = getDecoder(this.contentType.parsed.params.charset).decode(this.content);\n\n        if (/^flowed$/i.test(this.contentType.parsed.params.format)) {\n            str = this.decodeFlowedText(str, /^yes$/i.test(this.contentType.parsed.params.delsp));\n        }\n\n        return str;\n    }\n\n    processHeaders() {\n        for (let i = this.headerLines.length - 1; i >= 0; i--) {\n            let line = this.headerLines[i];\n            if (i && /^\\s/.test(line)) {\n                this.headerLines[i - 1] += '\\n' + line;\n                this.headerLines.splice(i, 1);\n            } else {\n                // remove folding and extra WS\n                line = line.replace(/\\s+/g, ' ');\n                let sep = line.indexOf(':');\n                let key = sep < 0 ? line.trim() : line.substr(0, sep).trim();\n                let value = sep < 0 ? '' : line.substr(sep + 1).trim();\n                this.headers.push({ key: key.toLowerCase(), originalKey: key, value });\n\n                switch (key.toLowerCase()) {\n                    case 'content-type':\n                        if (this.contentType.default) {\n                            this.contentType = { value, parsed: {} };\n                        }\n                        break;\n                    case 'content-transfer-encoding':\n                        this.contentTransferEncoding = { value, parsed: {} };\n                        break;\n                    case 'content-disposition':\n                        this.contentDisposition = { value, parsed: {} };\n                        break;\n                    case 'content-id':\n                        this.contentId = value;\n                        break;\n                    case 'content-description':\n                        this.contentDescription = value;\n                        break;\n                }\n            }\n        }\n\n        this.contentType.parsed = this.parseStructuredHeader(this.contentType.value);\n        this.contentType.multipart = /^multipart\\//i.test(this.contentType.parsed.value)\n            ? this.contentType.parsed.value.substr(this.contentType.parsed.value.indexOf('/') + 1)\n            : false;\n\n        if (this.contentType.multipart && this.contentType.parsed.params.boundary) {\n            // add self to boundary terminator listing\n            this.postalMime.boundaries.push({\n                value: textEncoder.encode(this.contentType.parsed.params.boundary),\n                node: this\n            });\n        }\n\n        this.contentDisposition.parsed = this.parseStructuredHeader(this.contentDisposition.value);\n\n        this.contentTransferEncoding.encoding = this.contentTransferEncoding.value\n            .toLowerCase()\n            .split(/[^\\w-]/)\n            .shift();\n\n        this.setupContentDecoder(this.contentTransferEncoding.encoding);\n    }\n\n    feed(line) {\n        switch (this.state) {\n            case 'header':\n                if (!line.length) {\n                    this.state = 'body';\n                    return this.processHeaders();\n                }\n                this.headerLines.push(getDecoder().decode(line));\n                break;\n            case 'body': {\n                // add line to body\n                this.contentDecoder.update(line);\n            }\n        }\n    }\n}\n", "export const textEncoder = new TextEncoder();\n\nconst base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst base64Lookup = new Uint8Array(256);\nfor (var i = 0; i < base64Chars.length; i++) {\n    base64Lookup[base64Chars.charCodeAt(i)] = i;\n}\n\nexport function decodeBase64(base64) {\n    let bufferLength = Math.ceil(base64.length / 4) * 3;\n    const len = base64.length;\n\n    let p = 0;\n\n    if (base64.length % 4 === 3) {\n        bufferLength--;\n    } else if (base64.length % 4 === 2) {\n        bufferLength -= 2;\n    } else if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    const arrayBuffer = new ArrayBuffer(bufferLength);\n    const bytes = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < len; i += 4) {\n        let encoded1 = base64Lookup[base64.charCodeAt(i)];\n        let encoded2 = base64Lookup[base64.charCodeAt(i + 1)];\n        let encoded3 = base64Lookup[base64.charCodeAt(i + 2)];\n        let encoded4 = base64Lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arrayBuffer;\n}\n\nexport function getDecoder(charset) {\n    charset = charset || 'utf8';\n    let decoder;\n\n    try {\n        decoder = new TextDecoder(charset);\n    } catch (err) {\n        decoder = new TextDecoder('windows-1252');\n    }\n\n    return decoder;\n}\n\n/**\n * Converts a Blob into an ArrayBuffer\n * @param {Blob} blob Blob to convert\n * @returns {ArrayBuffer} Converted value\n */\nexport async function blobToArrayBuffer(blob) {\n    if ('arrayBuffer' in blob) {\n        return await blob.arrayBuffer();\n    }\n\n    const fr = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        fr.onload = function (e) {\n            resolve(e.target.result);\n        };\n\n        fr.onerror = function (e) {\n            reject(fr.error);\n        };\n\n        fr.readAsArrayBuffer(blob);\n    });\n}\n\nexport function getHex(c) {\n    if ((c >= 0x30 /* 0 */ && c <= 0x39) /* 9 */ || (c >= 0x61 /* a */ && c <= 0x66) /* f */ || (c >= 0x41 /* A */ && c <= 0x46) /* F */) {\n        return String.fromCharCode(c);\n    }\n    return false;\n}\n\n/**\n * Decode a complete mime word encoded string\n *\n * @param {String} str Mime word encoded string\n * @return {String} Decoded unicode string\n */\nexport function decodeWord(charset, encoding, str) {\n    // RFC2231 added language tag to the encoding\n    // see: https://tools.ietf.org/html/rfc2231#section-5\n    // this implementation silently ignores this tag\n    let splitPos = charset.indexOf('*');\n    if (splitPos >= 0) {\n        charset = charset.substr(0, splitPos);\n    }\n\n    encoding = encoding.toUpperCase();\n\n    let byteStr;\n\n    if (encoding === 'Q') {\n        str = str\n            // remove spaces between = and hex char, this might indicate invalidly applied line splitting\n            .replace(/=\\s+([0-9a-fA-F])/g, '=$1')\n            // convert all underscores to spaces\n            .replace(/[_\\s]/g, ' ');\n\n        let buf = textEncoder.encode(str);\n        let encodedBytes = [];\n        for (let i = 0, len = buf.length; i < len; i++) {\n            let c = buf[i];\n            if (i <= len - 2 && c === 0x3d /* = */) {\n                let c1 = getHex(buf[i + 1]);\n                let c2 = getHex(buf[i + 2]);\n                if (c1 && c2) {\n                    let c = parseInt(c1 + c2, 16);\n                    encodedBytes.push(c);\n                    i += 2;\n                    continue;\n                }\n            }\n            encodedBytes.push(c);\n        }\n        byteStr = new ArrayBuffer(encodedBytes.length);\n        let dataView = new DataView(byteStr);\n        for (let i = 0, len = encodedBytes.length; i < len; i++) {\n            dataView.setUint8(i, encodedBytes[i]);\n        }\n    } else if (encoding === 'B') {\n        byteStr = decodeBase64(str.replace(/[^a-zA-Z0-9\\+\\/=]+/g, ''));\n    } else {\n        // keep as is, convert ArrayBuffer to unicode string, assume utf8\n        byteStr = textEncoder.encode(str);\n    }\n\n    return getDecoder(charset).decode(byteStr);\n}\n\nexport function decodeWords(str) {\n    let joinString = true;\n    let done = false;\n\n    while (!done) {\n        let result = (str || '')\n            .toString()\n            // find base64 words that can be joined\n            .replace(/(=\\?([^?]+)\\?[Bb]\\?([^?]*)\\?=)\\s*(?==\\?([^?]+)\\?[Bb]\\?[^?]*\\?=)/g, (match, left, chLeft, encodedLeftStr, chRight) => {\n                if (!joinString) {\n                    return match;\n                }\n                // only mark b64 chunks to be joined if charsets match and left side does not end with =\n                if (chLeft === chRight && encodedLeftStr.length % 4 === 0 && !/=$/.test(encodedLeftStr)) {\n                    // set a joiner marker\n                    return left + '__\\x00JOIN\\x00__';\n                }\n\n                return match;\n            })\n            // find QP words that can be joined\n            .replace(/(=\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)\\s*(?==\\?([^?]+)\\?[Qq]\\?[^?]*\\?=)/g, (match, left, chLeft, chRight) => {\n                if (!joinString) {\n                    return match;\n                }\n                // only mark QP chunks to be joined if charsets match\n                if (chLeft === chRight) {\n                    // set a joiner marker\n                    return left + '__\\x00JOIN\\x00__';\n                }\n                return match;\n            })\n            // join base64 encoded words\n            .replace(/(\\?=)?__\\x00JOIN\\x00__(=\\?([^?]+)\\?[QqBb]\\?)?/g, '')\n            // remove spaces between mime encoded words\n            .replace(/(=\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)\\s+(?==\\?[^?]+\\?[QqBb]\\?[^?]*\\?=)/g, '$1')\n            // decode words\n            .replace(/=\\?([\\w_\\-*]+)\\?([QqBb])\\?([^?]*)\\?=/g, (m, charset, encoding, text) => decodeWord(charset, encoding, text));\n\n        if (joinString && result.indexOf('\\ufffd') >= 0) {\n            // text contains \\ufffd (EF BF BD), so unicode conversion failed, retry without joining strings\n            joinString = false;\n        } else {\n            return result;\n        }\n    }\n}\n\nexport function decodeURIComponentWithCharset(encodedStr, charset) {\n    charset = charset || 'utf-8';\n\n    let encodedBytes = [];\n    for (let i = 0; i < encodedStr.length; i++) {\n        let c = encodedStr.charAt(i);\n        if (c === '%' && /^[a-f0-9]{2}/i.test(encodedStr.substr(i + 1, 2))) {\n            // encoded sequence\n            let byte = encodedStr.substr(i + 1, 2);\n            i += 2;\n            encodedBytes.push(parseInt(byte, 16));\n        } else if (c.charCodeAt(0) > 126) {\n            c = textEncoder.encode(c);\n            for (let j = 0; j < c.length; j++) {\n                encodedBytes.push(c[j]);\n            }\n        } else {\n            // \"normal\" char\n            encodedBytes.push(c.charCodeAt(0));\n        }\n    }\n\n    const byteStr = new ArrayBuffer(encodedBytes.length);\n    const dataView = new DataView(byteStr);\n    for (let i = 0, len = encodedBytes.length; i < len; i++) {\n        dataView.setUint8(i, encodedBytes[i]);\n    }\n\n    return getDecoder(charset).decode(byteStr);\n}\n\nexport function decodeParameterValueContinuations(header) {\n    // handle parameter value continuations\n    // https://tools.ietf.org/html/rfc2231#section-3\n\n    // preprocess values\n    let paramKeys = new Map();\n\n    Object.keys(header.params).forEach(key => {\n        let match = key.match(/\\*((\\d+)\\*?)?$/);\n        if (!match) {\n            // nothing to do here, does not seem like a continuation param\n            return;\n        }\n\n        let actualKey = key.substr(0, match.index).toLowerCase();\n        let nr = Number(match[2]) || 0;\n\n        let paramVal;\n        if (!paramKeys.has(actualKey)) {\n            paramVal = {\n                charset: false,\n                values: []\n            };\n            paramKeys.set(actualKey, paramVal);\n        } else {\n            paramVal = paramKeys.get(actualKey);\n        }\n\n        let value = header.params[key];\n        if (nr === 0 && match[0].charAt(match[0].length - 1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n            paramVal.charset = match[1] || 'utf-8';\n            value = match[2];\n        }\n\n        paramVal.values.push({ nr, value });\n\n        // remove the old reference\n        delete header.params[key];\n    });\n\n    paramKeys.forEach((paramVal, key) => {\n        header.params[key] = decodeURIComponentWithCharset(\n            paramVal.values\n                .sort((a, b) => a.nr - b.nr)\n                .map(a => a.value)\n                .join(''),\n            paramVal.charset\n        );\n    });\n}\n", "import { blobToArrayBuffer } from './decode-strings.js';\n\nexport default class PassThroughDecoder {\n    constructor() {\n        this.chunks = [];\n    }\n\n    update(line) {\n        this.chunks.push(line);\n        this.chunks.push('\\n');\n    }\n\n    finalize() {\n        // convert an array of arraybuffers into a blob and then back into a single arraybuffer\n        return blobToArrayBuffer(new Blob(this.chunks, { type: 'application/octet-stream' }));\n    }\n}\n", "import { decodeBase64, blobToArrayBuffer } from './decode-strings.js';\n\nexport default class Base64Decoder {\n    constructor(opts) {\n        opts = opts || {};\n\n        this.decoder = opts.decoder || new TextDecoder();\n\n        this.maxChunkSize = 100 * 1024;\n\n        this.chunks = [];\n\n        this.remainder = '';\n    }\n\n    update(buffer) {\n        let str = this.decoder.decode(buffer);\n\n        if (/[^a-zA-Z0-9+\\/]/.test(str)) {\n            str = str.replace(/[^a-zA-Z0-9+\\/]+/g, '');\n        }\n\n        this.remainder += str;\n\n        if (this.remainder.length >= this.maxChunkSize) {\n            let allowedBytes = Math.floor(this.remainder.length / 4) * 4;\n            let base64Str;\n\n            if (allowedBytes === this.remainder.length) {\n                base64Str = this.remainder;\n                this.remainder = '';\n            } else {\n                base64Str = this.remainder.substr(0, allowedBytes);\n                this.remainder = this.remainder.substr(allowedBytes);\n            }\n\n            if (base64Str.length) {\n                this.chunks.push(decodeBase64(base64Str));\n            }\n        }\n    }\n\n    finalize() {\n        if (this.remainder && !/^=+$/.test(this.remainder)) {\n            this.chunks.push(decodeBase64(this.remainder));\n        }\n\n        return blobToArrayBuffer(new Blob(this.chunks, { type: 'application/octet-stream' }));\n    }\n}\n", "import { blobToArrayBuffer } from './decode-strings.js';\n\nexport default class QPDecoder {\n    constructor(opts) {\n        opts = opts || {};\n\n        this.decoder = opts.decoder || new TextDecoder();\n\n        this.maxChunkSize = 100 * 1024;\n\n        this.remainder = '';\n\n        this.chunks = [];\n    }\n\n    decodeQPBytes(encodedBytes) {\n        let buf = new ArrayBuffer(encodedBytes.length);\n        let dataView = new DataView(buf);\n        for (let i = 0, len = encodedBytes.length; i < len; i++) {\n            dataView.setUint8(i, parseInt(encodedBytes[i], 16));\n        }\n        return buf;\n    }\n\n    decodeChunks(str) {\n        // unwrap newlines\n        str = str.replace(/=\\r?\\n/g, '');\n\n        let list = str.split(/(?==)/);\n        let encodedBytes = [];\n        for (let part of list) {\n            if (part.charAt(0) !== '=') {\n                if (encodedBytes.length) {\n                    this.chunks.push(this.decodeQPBytes(encodedBytes));\n                    encodedBytes = [];\n                }\n                this.chunks.push(part);\n                continue;\n            }\n\n            if (part.length === 3) {\n                encodedBytes.push(part.substr(1));\n                continue;\n            }\n\n            if (part.length > 3) {\n                encodedBytes.push(part.substr(1, 2));\n                this.chunks.push(this.decodeQPBytes(encodedBytes));\n                encodedBytes = [];\n\n                part = part.substr(3);\n                this.chunks.push(part);\n            }\n        }\n        if (encodedBytes.length) {\n            this.chunks.push(this.decodeQPBytes(encodedBytes));\n            encodedBytes = [];\n        }\n    }\n\n    update(buffer) {\n        // expect full lines, so add line terminator as well\n        let str = this.decoder.decode(buffer) + '\\n';\n\n        str = this.remainder + str;\n\n        if (str.length < this.maxChunkSize) {\n            this.remainder = str;\n            return;\n        }\n\n        this.remainder = '';\n\n        let partialEnding = str.match(/=[a-fA-F0-9]?$/);\n        if (partialEnding) {\n            if (partialEnding.index === 0) {\n                this.remainder = str;\n                return;\n            }\n            this.remainder = str.substr(partialEnding.index);\n            str = str.substr(0, partialEnding.index);\n        }\n\n        this.decodeChunks(str);\n    }\n\n    finalize() {\n        if (this.remainder.length) {\n            this.decodeChunks(this.remainder);\n            this.remainder = '';\n        }\n\n        // convert an array of arraybuffers into a blob and then back into a single arraybuffer\n        return blobToArrayBuffer(new Blob(this.chunks, { type: 'application/octet-stream' }));\n    }\n}\n", "import htmlEntities from './html-entities.js';\n\nexport function decodeHTMLEntities(str) {\n    return str.replace(/&(#\\d+|#x[a-f0-9]+|[a-z]+\\d*);?/gi, (match, entity) => {\n        if (typeof htmlEntities[match] === 'string') {\n            return htmlEntities[match];\n        }\n\n        if (entity.charAt(0) !== '#' || match.charAt(match.length - 1) !== ';') {\n            // keep as is, invalid or unknown sequence\n            return match;\n        }\n\n        let codePoint;\n        if (entity.charAt(1) === 'x') {\n            // hex\n            codePoint = parseInt(entity.substr(2), 16);\n        } else {\n            // dec\n            codePoint = parseInt(entity.substr(1), 10);\n        }\n\n        var output = '';\n\n        if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n            // Invalid range, return a replacement character instead\n            return '\\uFFFD';\n        }\n\n        if (codePoint > 0xffff) {\n            codePoint -= 0x10000;\n            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n            codePoint = 0xdc00 | (codePoint & 0x3ff);\n        }\n\n        output += String.fromCharCode(codePoint);\n\n        return output;\n    });\n}\n\nexport function escapeHtml(str) {\n    return str.trim().replace(/[<>\"'?&]/g, c => {\n        let hex = c.charCodeAt(0).toString(16);\n        if (hex.length < 2) {\n            hex = '0' + hex;\n        }\n        return '&#x' + hex.toUpperCase() + ';';\n    });\n}\n\nexport function textToHtml(str) {\n    let html = escapeHtml(str).replace(/\\n/g, '<br />');\n    return '<div>' + html + '</div>';\n}\n\nexport function htmlToText(str) {\n    str = str\n        // we can't process tags on multiple lines so remove newlines first\n        .replace(/\\r?\\n/g, '\\u0001')\n        .replace(/<\\!\\-\\-.*?\\-\\->/gi, ' ')\n\n        .replace(/<br\\b[^>]*>/gi, '\\n')\n        .replace(/<\\/?(p|div|table|tr|td|th)\\b[^>]*>/gi, '\\n\\n')\n        .replace(/<script\\b[^>]*>.*?<\\/script\\b[^>]*>/gi, ' ')\n        .replace(/^.*<body\\b[^>]*>/i, '')\n        .replace(/^.*<\\/head\\b[^>]*>/i, '')\n        .replace(/^.*<\\!doctype\\b[^>]*>/i, '')\n        .replace(/<\\/body\\b[^>]*>.*$/i, '')\n        .replace(/<\\/html\\b[^>]*>.*$/i, '')\n\n        .replace(/<a\\b[^>]*href\\s*=\\s*[\"']?([^\\s\"']+)[^>]*>/gi, ' ($1) ')\n\n        .replace(/<\\/?(span|em|i|strong|b|u|a)\\b[^>]*>/gi, '')\n\n        .replace(/<li\\b[^>]*>[\\n\\u0001\\s]*/gi, '* ')\n\n        .replace(/<hr\\b[^>]*>/g, '\\n-------------\\n')\n\n        .replace(/<[^>]*>/g, ' ')\n\n        // convert linebreak placeholders back to newlines\n        .replace(/\\u0001/g, '\\n')\n\n        .replace(/[ \\t]+/g, ' ')\n\n        .replace(/^\\s+$/gm, '')\n\n        .replace(/\\n\\n+/g, '\\n\\n')\n        .replace(/^\\n+/, '\\n')\n        .replace(/\\n+$/, '\\n');\n\n    str = decodeHTMLEntities(str);\n\n    return str;\n}\n\nfunction formatTextAddress(address) {\n    return []\n        .concat(address.name || [])\n        .concat(address.name ? `<${address.address}>` : address.address)\n        .join(' ');\n}\n\nfunction formatTextAddresses(addresses) {\n    let parts = [];\n\n    let processAddress = (address, partCounter) => {\n        if (partCounter) {\n            parts.push(', ');\n        }\n\n        if (address.group) {\n            let groupStart = `${address.name}:`;\n            let groupEnd = `;`;\n\n            parts.push(groupStart);\n            address.group.forEach(processAddress);\n            parts.push(groupEnd);\n        } else {\n            parts.push(formatTextAddress(address));\n        }\n    };\n\n    addresses.forEach(processAddress);\n\n    return parts.join('');\n}\n\nfunction formatHtmlAddress(address) {\n    return `<a href=\"mailto:${escapeHtml(address.address)}\" class=\"postal-email-address\">${escapeHtml(address.name || `<${address.address}>`)}</a>`;\n}\n\nfunction formatHtmlAddresses(addresses) {\n    let parts = [];\n\n    let processAddress = (address, partCounter) => {\n        if (partCounter) {\n            parts.push('<span class=\"postal-email-address-separator\">, </span>');\n        }\n\n        if (address.group) {\n            let groupStart = `<span class=\"postal-email-address-group\">${escapeHtml(address.name)}:</span>`;\n            let groupEnd = `<span class=\"postal-email-address-group\">;</span>`;\n\n            parts.push(groupStart);\n            address.group.forEach(processAddress);\n            parts.push(groupEnd);\n        } else {\n            parts.push(formatHtmlAddress(address));\n        }\n    };\n\n    addresses.forEach(processAddress);\n\n    return parts.join(' ');\n}\n\nfunction foldLines(str, lineLength, afterSpace) {\n    str = (str || '').toString();\n    lineLength = lineLength || 76;\n\n    let pos = 0,\n        len = str.length,\n        result = '',\n        line,\n        match;\n\n    while (pos < len) {\n        line = str.substr(pos, lineLength);\n        if (line.length < lineLength) {\n            result += line;\n            break;\n        }\n        if ((match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/))) {\n            line = match[0];\n            result += line;\n            pos += line.length;\n            continue;\n        } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {\n            line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));\n        } else if ((match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/))) {\n            line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));\n        }\n\n        result += line;\n        pos += line.length;\n        if (pos < len) {\n            result += '\\r\\n';\n        }\n    }\n\n    return result;\n}\n\nexport function formatTextHeader(message) {\n    let rows = [];\n\n    if (message.from) {\n        rows.push({ key: 'From', val: formatTextAddress(message.from) });\n    }\n\n    if (message.subject) {\n        rows.push({ key: 'Subject', val: message.subject });\n    }\n\n    if (message.date) {\n        let dateOptions = {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            hour12: false\n        };\n\n        let dateStr = typeof Intl === 'undefined' ? message.date : new Intl.DateTimeFormat('default', dateOptions).format(new Date(message.date));\n\n        rows.push({ key: 'Date', val: dateStr });\n    }\n\n    if (message.to && message.to.length) {\n        rows.push({ key: 'To', val: formatTextAddresses(message.to) });\n    }\n\n    if (message.cc && message.cc.length) {\n        rows.push({ key: 'Cc', val: formatTextAddresses(message.cc) });\n    }\n\n    if (message.bcc && message.bcc.length) {\n        rows.push({ key: 'Bcc', val: formatTextAddresses(message.bcc) });\n    }\n\n    // Align keys and values by adding space between these two\n    // Also make sure that the separator line is as long as the longest line\n    // Should end up with something like this:\n    /*\n    -----------------------------\n    From:    xx xx <xxx@xxx.com>\n    Subject: Example Subject\n    Date:    16/02/2021, 02:57:06\n    To:      not@found.com\n    -----------------------------\n    */\n\n    let maxKeyLength = rows\n        .map(r => r.key.length)\n        .reduce((acc, cur) => {\n            return cur > acc ? cur : acc;\n        }, 0);\n\n    rows = rows.flatMap(row => {\n        let sepLen = maxKeyLength - row.key.length;\n        let prefix = `${row.key}: ${' '.repeat(sepLen)}`;\n        let emptyPrefix = `${' '.repeat(row.key.length + 1)} ${' '.repeat(sepLen)}`;\n\n        let foldedLines = foldLines(row.val, 80, true)\n            .split(/\\r?\\n/)\n            .map(line => line.trim());\n\n        return foldedLines.map((line, i) => `${i ? emptyPrefix : prefix}${line}`);\n    });\n\n    let maxLineLength = rows\n        .map(r => r.length)\n        .reduce((acc, cur) => {\n            return cur > acc ? cur : acc;\n        }, 0);\n\n    let lineMarker = '-'.repeat(maxLineLength);\n\n    let template = `\n${lineMarker}\n${rows.join('\\n')}\n${lineMarker}\n`;\n\n    return template;\n}\n\nexport function formatHtmlHeader(message) {\n    let rows = [];\n\n    if (message.from) {\n        rows.push(`<div class=\"postal-email-header-key\">From</div><div class=\"postal-email-header-value\">${formatHtmlAddress(message.from)}</div>`);\n    }\n\n    if (message.subject) {\n        rows.push(\n            `<div class=\"postal-email-header-key\">Subject</div><div class=\"postal-email-header-value postal-email-header-subject\">${escapeHtml(\n                message.subject\n            )}</div>`\n        );\n    }\n\n    if (message.date) {\n        let dateOptions = {\n            year: 'numeric',\n            month: 'numeric',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n            hour12: false\n        };\n\n        let dateStr = typeof Intl === 'undefined' ? message.date : new Intl.DateTimeFormat('default', dateOptions).format(new Date(message.date));\n\n        rows.push(\n            `<div class=\"postal-email-header-key\">Date</div><div class=\"postal-email-header-value postal-email-header-date\" data-date=\"${escapeHtml(\n                message.date\n            )}\">${escapeHtml(dateStr)}</div>`\n        );\n    }\n\n    if (message.to && message.to.length) {\n        rows.push(`<div class=\"postal-email-header-key\">To</div><div class=\"postal-email-header-value\">${formatHtmlAddresses(message.to)}</div>`);\n    }\n\n    if (message.cc && message.cc.length) {\n        rows.push(`<div class=\"postal-email-header-key\">Cc</div><div class=\"postal-email-header-value\">${formatHtmlAddresses(message.cc)}</div>`);\n    }\n\n    if (message.bcc && message.bcc.length) {\n        rows.push(`<div class=\"postal-email-header-key\">Bcc</div><div class=\"postal-email-header-value\">${formatHtmlAddresses(message.bcc)}</div>`);\n    }\n\n    let template = `<div class=\"postal-email-header\">${rows.length ? '<div class=\"postal-email-header-row\">' : ''}${rows.join(\n        '</div>\\n<div class=\"postal-email-header-row\">'\n    )}${rows.length ? '</div>' : ''}</div>`;\n\n    return template;\n}\n", "// Entity map from https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references\nexport const htmlEntities = {\n    '&AElig': '\\u00C6',\n    '&AElig;': '\\u00C6',\n    '&AMP': '\\u0026',\n    '&AMP;': '\\u0026',\n    '&Aacute': '\\u00C1',\n    '&Aacute;': '\\u00C1',\n    '&Abreve;': '\\u0102',\n    '&Acirc': '\\u00C2',\n    '&Acirc;': '\\u00C2',\n    '&Acy;': '\\u0410',\n    '&Afr;': '\\uD835\\uDD04',\n    '&Agrave': '\\u00C0',\n    '&Agrave;': '\\u00C0',\n    '&Alpha;': '\\u0391',\n    '&Amacr;': '\\u0100',\n    '&And;': '\\u2A53',\n    '&Aogon;': '\\u0104',\n    '&Aopf;': '\\uD835\\uDD38',\n    '&ApplyFunction;': '\\u2061',\n    '&Aring': '\\u00C5',\n    '&Aring;': '\\u00C5',\n    '&Ascr;': '\\uD835\\uDC9C',\n    '&Assign;': '\\u2254',\n    '&Atilde': '\\u00C3',\n    '&Atilde;': '\\u00C3',\n    '&Auml': '\\u00C4',\n    '&Auml;': '\\u00C4',\n    '&Backslash;': '\\u2216',\n    '&Barv;': '\\u2AE7',\n    '&Barwed;': '\\u2306',\n    '&Bcy;': '\\u0411',\n    '&Because;': '\\u2235',\n    '&Bernoullis;': '\\u212C',\n    '&Beta;': '\\u0392',\n    '&Bfr;': '\\uD835\\uDD05',\n    '&Bopf;': '\\uD835\\uDD39',\n    '&Breve;': '\\u02D8',\n    '&Bscr;': '\\u212C',\n    '&Bumpeq;': '\\u224E',\n    '&CHcy;': '\\u0427',\n    '&COPY': '\\u00A9',\n    '&COPY;': '\\u00A9',\n    '&Cacute;': '\\u0106',\n    '&Cap;': '\\u22D2',\n    '&CapitalDifferentialD;': '\\u2145',\n    '&Cayleys;': '\\u212D',\n    '&Ccaron;': '\\u010C',\n    '&Ccedil': '\\u00C7',\n    '&Ccedil;': '\\u00C7',\n    '&Ccirc;': '\\u0108',\n    '&Cconint;': '\\u2230',\n    '&Cdot;': '\\u010A',\n    '&Cedilla;': '\\u00B8',\n    '&CenterDot;': '\\u00B7',\n    '&Cfr;': '\\u212D',\n    '&Chi;': '\\u03A7',\n    '&CircleDot;': '\\u2299',\n    '&CircleMinus;': '\\u2296',\n    '&CirclePlus;': '\\u2295',\n    '&CircleTimes;': '\\u2297',\n    '&ClockwiseContourIntegral;': '\\u2232',\n    '&CloseCurlyDoubleQuote;': '\\u201D',\n    '&CloseCurlyQuote;': '\\u2019',\n    '&Colon;': '\\u2237',\n    '&Colone;': '\\u2A74',\n    '&Congruent;': '\\u2261',\n    '&Conint;': '\\u222F',\n    '&ContourIntegral;': '\\u222E',\n    '&Copf;': '\\u2102',\n    '&Coproduct;': '\\u2210',\n    '&CounterClockwiseContourIntegral;': '\\u2233',\n    '&Cross;': '\\u2A2F',\n    '&Cscr;': '\\uD835\\uDC9E',\n    '&Cup;': '\\u22D3',\n    '&CupCap;': '\\u224D',\n    '&DD;': '\\u2145',\n    '&DDotrahd;': '\\u2911',\n    '&DJcy;': '\\u0402',\n    '&DScy;': '\\u0405',\n    '&DZcy;': '\\u040F',\n    '&Dagger;': '\\u2021',\n    '&Darr;': '\\u21A1',\n    '&Dashv;': '\\u2AE4',\n    '&Dcaron;': '\\u010E',\n    '&Dcy;': '\\u0414',\n    '&Del;': '\\u2207',\n    '&Delta;': '\\u0394',\n    '&Dfr;': '\\uD835\\uDD07',\n    '&DiacriticalAcute;': '\\u00B4',\n    '&DiacriticalDot;': '\\u02D9',\n    '&DiacriticalDoubleAcute;': '\\u02DD',\n    '&DiacriticalGrave;': '\\u0060',\n    '&DiacriticalTilde;': '\\u02DC',\n    '&Diamond;': '\\u22C4',\n    '&DifferentialD;': '\\u2146',\n    '&Dopf;': '\\uD835\\uDD3B',\n    '&Dot;': '\\u00A8',\n    '&DotDot;': '\\u20DC',\n    '&DotEqual;': '\\u2250',\n    '&DoubleContourIntegral;': '\\u222F',\n    '&DoubleDot;': '\\u00A8',\n    '&DoubleDownArrow;': '\\u21D3',\n    '&DoubleLeftArrow;': '\\u21D0',\n    '&DoubleLeftRightArrow;': '\\u21D4',\n    '&DoubleLeftTee;': '\\u2AE4',\n    '&DoubleLongLeftArrow;': '\\u27F8',\n    '&DoubleLongLeftRightArrow;': '\\u27FA',\n    '&DoubleLongRightArrow;': '\\u27F9',\n    '&DoubleRightArrow;': '\\u21D2',\n    '&DoubleRightTee;': '\\u22A8',\n    '&DoubleUpArrow;': '\\u21D1',\n    '&DoubleUpDownArrow;': '\\u21D5',\n    '&DoubleVerticalBar;': '\\u2225',\n    '&DownArrow;': '\\u2193',\n    '&DownArrowBar;': '\\u2913',\n    '&DownArrowUpArrow;': '\\u21F5',\n    '&DownBreve;': '\\u0311',\n    '&DownLeftRightVector;': '\\u2950',\n    '&DownLeftTeeVector;': '\\u295E',\n    '&DownLeftVector;': '\\u21BD',\n    '&DownLeftVectorBar;': '\\u2956',\n    '&DownRightTeeVector;': '\\u295F',\n    '&DownRightVector;': '\\u21C1',\n    '&DownRightVectorBar;': '\\u2957',\n    '&DownTee;': '\\u22A4',\n    '&DownTeeArrow;': '\\u21A7',\n    '&Downarrow;': '\\u21D3',\n    '&Dscr;': '\\uD835\\uDC9F',\n    '&Dstrok;': '\\u0110',\n    '&ENG;': '\\u014A',\n    '&ETH': '\\u00D0',\n    '&ETH;': '\\u00D0',\n    '&Eacute': '\\u00C9',\n    '&Eacute;': '\\u00C9',\n    '&Ecaron;': '\\u011A',\n    '&Ecirc': '\\u00CA',\n    '&Ecirc;': '\\u00CA',\n    '&Ecy;': '\\u042D',\n    '&Edot;': '\\u0116',\n    '&Efr;': '\\uD835\\uDD08',\n    '&Egrave': '\\u00C8',\n    '&Egrave;': '\\u00C8',\n    '&Element;': '\\u2208',\n    '&Emacr;': '\\u0112',\n    '&EmptySmallSquare;': '\\u25FB',\n    '&EmptyVerySmallSquare;': '\\u25AB',\n    '&Eogon;': '\\u0118',\n    '&Eopf;': '\\uD835\\uDD3C',\n    '&Epsilon;': '\\u0395',\n    '&Equal;': '\\u2A75',\n    '&EqualTilde;': '\\u2242',\n    '&Equilibrium;': '\\u21CC',\n    '&Escr;': '\\u2130',\n    '&Esim;': '\\u2A73',\n    '&Eta;': '\\u0397',\n    '&Euml': '\\u00CB',\n    '&Euml;': '\\u00CB',\n    '&Exists;': '\\u2203',\n    '&ExponentialE;': '\\u2147',\n    '&Fcy;': '\\u0424',\n    '&Ffr;': '\\uD835\\uDD09',\n    '&FilledSmallSquare;': '\\u25FC',\n    '&FilledVerySmallSquare;': '\\u25AA',\n    '&Fopf;': '\\uD835\\uDD3D',\n    '&ForAll;': '\\u2200',\n    '&Fouriertrf;': '\\u2131',\n    '&Fscr;': '\\u2131',\n    '&GJcy;': '\\u0403',\n    '&GT': '\\u003E',\n    '&GT;': '\\u003E',\n    '&Gamma;': '\\u0393',\n    '&Gammad;': '\\u03DC',\n    '&Gbreve;': '\\u011E',\n    '&Gcedil;': '\\u0122',\n    '&Gcirc;': '\\u011C',\n    '&Gcy;': '\\u0413',\n    '&Gdot;': '\\u0120',\n    '&Gfr;': '\\uD835\\uDD0A',\n    '&Gg;': '\\u22D9',\n    '&Gopf;': '\\uD835\\uDD3E',\n    '&GreaterEqual;': '\\u2265',\n    '&GreaterEqualLess;': '\\u22DB',\n    '&GreaterFullEqual;': '\\u2267',\n    '&GreaterGreater;': '\\u2AA2',\n    '&GreaterLess;': '\\u2277',\n    '&GreaterSlantEqual;': '\\u2A7E',\n    '&GreaterTilde;': '\\u2273',\n    '&Gscr;': '\\uD835\\uDCA2',\n    '&Gt;': '\\u226B',\n    '&HARDcy;': '\\u042A',\n    '&Hacek;': '\\u02C7',\n    '&Hat;': '\\u005E',\n    '&Hcirc;': '\\u0124',\n    '&Hfr;': '\\u210C',\n    '&HilbertSpace;': '\\u210B',\n    '&Hopf;': '\\u210D',\n    '&HorizontalLine;': '\\u2500',\n    '&Hscr;': '\\u210B',\n    '&Hstrok;': '\\u0126',\n    '&HumpDownHump;': '\\u224E',\n    '&HumpEqual;': '\\u224F',\n    '&IEcy;': '\\u0415',\n    '&IJlig;': '\\u0132',\n    '&IOcy;': '\\u0401',\n    '&Iacute': '\\u00CD',\n    '&Iacute;': '\\u00CD',\n    '&Icirc': '\\u00CE',\n    '&Icirc;': '\\u00CE',\n    '&Icy;': '\\u0418',\n    '&Idot;': '\\u0130',\n    '&Ifr;': '\\u2111',\n    '&Igrave': '\\u00CC',\n    '&Igrave;': '\\u00CC',\n    '&Im;': '\\u2111',\n    '&Imacr;': '\\u012A',\n    '&ImaginaryI;': '\\u2148',\n    '&Implies;': '\\u21D2',\n    '&Int;': '\\u222C',\n    '&Integral;': '\\u222B',\n    '&Intersection;': '\\u22C2',\n    '&InvisibleComma;': '\\u2063',\n    '&InvisibleTimes;': '\\u2062',\n    '&Iogon;': '\\u012E',\n    '&Iopf;': '\\uD835\\uDD40',\n    '&Iota;': '\\u0399',\n    '&Iscr;': '\\u2110',\n    '&Itilde;': '\\u0128',\n    '&Iukcy;': '\\u0406',\n    '&Iuml': '\\u00CF',\n    '&Iuml;': '\\u00CF',\n    '&Jcirc;': '\\u0134',\n    '&Jcy;': '\\u0419',\n    '&Jfr;': '\\uD835\\uDD0D',\n    '&Jopf;': '\\uD835\\uDD41',\n    '&Jscr;': '\\uD835\\uDCA5',\n    '&Jsercy;': '\\u0408',\n    '&Jukcy;': '\\u0404',\n    '&KHcy;': '\\u0425',\n    '&KJcy;': '\\u040C',\n    '&Kappa;': '\\u039A',\n    '&Kcedil;': '\\u0136',\n    '&Kcy;': '\\u041A',\n    '&Kfr;': '\\uD835\\uDD0E',\n    '&Kopf;': '\\uD835\\uDD42',\n    '&Kscr;': '\\uD835\\uDCA6',\n    '&LJcy;': '\\u0409',\n    '&LT': '\\u003C',\n    '&LT;': '\\u003C',\n    '&Lacute;': '\\u0139',\n    '&Lambda;': '\\u039B',\n    '&Lang;': '\\u27EA',\n    '&Laplacetrf;': '\\u2112',\n    '&Larr;': '\\u219E',\n    '&Lcaron;': '\\u013D',\n    '&Lcedil;': '\\u013B',\n    '&Lcy;': '\\u041B',\n    '&LeftAngleBracket;': '\\u27E8',\n    '&LeftArrow;': '\\u2190',\n    '&LeftArrowBar;': '\\u21E4',\n    '&LeftArrowRightArrow;': '\\u21C6',\n    '&LeftCeiling;': '\\u2308',\n    '&LeftDoubleBracket;': '\\u27E6',\n    '&LeftDownTeeVector;': '\\u2961',\n    '&LeftDownVector;': '\\u21C3',\n    '&LeftDownVectorBar;': '\\u2959',\n    '&LeftFloor;': '\\u230A',\n    '&LeftRightArrow;': '\\u2194',\n    '&LeftRightVector;': '\\u294E',\n    '&LeftTee;': '\\u22A3',\n    '&LeftTeeArrow;': '\\u21A4',\n    '&LeftTeeVector;': '\\u295A',\n    '&LeftTriangle;': '\\u22B2',\n    '&LeftTriangleBar;': '\\u29CF',\n    '&LeftTriangleEqual;': '\\u22B4',\n    '&LeftUpDownVector;': '\\u2951',\n    '&LeftUpTeeVector;': '\\u2960',\n    '&LeftUpVector;': '\\u21BF',\n    '&LeftUpVectorBar;': '\\u2958',\n    '&LeftVector;': '\\u21BC',\n    '&LeftVectorBar;': '\\u2952',\n    '&Leftarrow;': '\\u21D0',\n    '&Leftrightarrow;': '\\u21D4',\n    '&LessEqualGreater;': '\\u22DA',\n    '&LessFullEqual;': '\\u2266',\n    '&LessGreater;': '\\u2276',\n    '&LessLess;': '\\u2AA1',\n    '&LessSlantEqual;': '\\u2A7D',\n    '&LessTilde;': '\\u2272',\n    '&Lfr;': '\\uD835\\uDD0F',\n    '&Ll;': '\\u22D8',\n    '&Lleftarrow;': '\\u21DA',\n    '&Lmidot;': '\\u013F',\n    '&LongLeftArrow;': '\\u27F5',\n    '&LongLeftRightArrow;': '\\u27F7',\n    '&LongRightArrow;': '\\u27F6',\n    '&Longleftarrow;': '\\u27F8',\n    '&Longleftrightarrow;': '\\u27FA',\n    '&Longrightarrow;': '\\u27F9',\n    '&Lopf;': '\\uD835\\uDD43',\n    '&LowerLeftArrow;': '\\u2199',\n    '&LowerRightArrow;': '\\u2198',\n    '&Lscr;': '\\u2112',\n    '&Lsh;': '\\u21B0',\n    '&Lstrok;': '\\u0141',\n    '&Lt;': '\\u226A',\n    '&Map;': '\\u2905',\n    '&Mcy;': '\\u041C',\n    '&MediumSpace;': '\\u205F',\n    '&Mellintrf;': '\\u2133',\n    '&Mfr;': '\\uD835\\uDD10',\n    '&MinusPlus;': '\\u2213',\n    '&Mopf;': '\\uD835\\uDD44',\n    '&Mscr;': '\\u2133',\n    '&Mu;': '\\u039C',\n    '&NJcy;': '\\u040A',\n    '&Nacute;': '\\u0143',\n    '&Ncaron;': '\\u0147',\n    '&Ncedil;': '\\u0145',\n    '&Ncy;': '\\u041D',\n    '&NegativeMediumSpace;': '\\u200B',\n    '&NegativeThickSpace;': '\\u200B',\n    '&NegativeThinSpace;': '\\u200B',\n    '&NegativeVeryThinSpace;': '\\u200B',\n    '&NestedGreaterGreater;': '\\u226B',\n    '&NestedLessLess;': '\\u226A',\n    '&NewLine;': '\\u000A',\n    '&Nfr;': '\\uD835\\uDD11',\n    '&NoBreak;': '\\u2060',\n    '&NonBreakingSpace;': '\\u00A0',\n    '&Nopf;': '\\u2115',\n    '&Not;': '\\u2AEC',\n    '&NotCongruent;': '\\u2262',\n    '&NotCupCap;': '\\u226D',\n    '&NotDoubleVerticalBar;': '\\u2226',\n    '&NotElement;': '\\u2209',\n    '&NotEqual;': '\\u2260',\n    '&NotEqualTilde;': '\\u2242\\u0338',\n    '&NotExists;': '\\u2204',\n    '&NotGreater;': '\\u226F',\n    '&NotGreaterEqual;': '\\u2271',\n    '&NotGreaterFullEqual;': '\\u2267\\u0338',\n    '&NotGreaterGreater;': '\\u226B\\u0338',\n    '&NotGreaterLess;': '\\u2279',\n    '&NotGreaterSlantEqual;': '\\u2A7E\\u0338',\n    '&NotGreaterTilde;': '\\u2275',\n    '&NotHumpDownHump;': '\\u224E\\u0338',\n    '&NotHumpEqual;': '\\u224F\\u0338',\n    '&NotLeftTriangle;': '\\u22EA',\n    '&NotLeftTriangleBar;': '\\u29CF\\u0338',\n    '&NotLeftTriangleEqual;': '\\u22EC',\n    '&NotLess;': '\\u226E',\n    '&NotLessEqual;': '\\u2270',\n    '&NotLessGreater;': '\\u2278',\n    '&NotLessLess;': '\\u226A\\u0338',\n    '&NotLessSlantEqual;': '\\u2A7D\\u0338',\n    '&NotLessTilde;': '\\u2274',\n    '&NotNestedGreaterGreater;': '\\u2AA2\\u0338',\n    '&NotNestedLessLess;': '\\u2AA1\\u0338',\n    '&NotPrecedes;': '\\u2280',\n    '&NotPrecedesEqual;': '\\u2AAF\\u0338',\n    '&NotPrecedesSlantEqual;': '\\u22E0',\n    '&NotReverseElement;': '\\u220C',\n    '&NotRightTriangle;': '\\u22EB',\n    '&NotRightTriangleBar;': '\\u29D0\\u0338',\n    '&NotRightTriangleEqual;': '\\u22ED',\n    '&NotSquareSubset;': '\\u228F\\u0338',\n    '&NotSquareSubsetEqual;': '\\u22E2',\n    '&NotSquareSuperset;': '\\u2290\\u0338',\n    '&NotSquareSupersetEqual;': '\\u22E3',\n    '&NotSubset;': '\\u2282\\u20D2',\n    '&NotSubsetEqual;': '\\u2288',\n    '&NotSucceeds;': '\\u2281',\n    '&NotSucceedsEqual;': '\\u2AB0\\u0338',\n    '&NotSucceedsSlantEqual;': '\\u22E1',\n    '&NotSucceedsTilde;': '\\u227F\\u0338',\n    '&NotSuperset;': '\\u2283\\u20D2',\n    '&NotSupersetEqual;': '\\u2289',\n    '&NotTilde;': '\\u2241',\n    '&NotTildeEqual;': '\\u2244',\n    '&NotTildeFullEqual;': '\\u2247',\n    '&NotTildeTilde;': '\\u2249',\n    '&NotVerticalBar;': '\\u2224',\n    '&Nscr;': '\\uD835\\uDCA9',\n    '&Ntilde': '\\u00D1',\n    '&Ntilde;': '\\u00D1',\n    '&Nu;': '\\u039D',\n    '&OElig;': '\\u0152',\n    '&Oacute': '\\u00D3',\n    '&Oacute;': '\\u00D3',\n    '&Ocirc': '\\u00D4',\n    '&Ocirc;': '\\u00D4',\n    '&Ocy;': '\\u041E',\n    '&Odblac;': '\\u0150',\n    '&Ofr;': '\\uD835\\uDD12',\n    '&Ograve': '\\u00D2',\n    '&Ograve;': '\\u00D2',\n    '&Omacr;': '\\u014C',\n    '&Omega;': '\\u03A9',\n    '&Omicron;': '\\u039F',\n    '&Oopf;': '\\uD835\\uDD46',\n    '&OpenCurlyDoubleQuote;': '\\u201C',\n    '&OpenCurlyQuote;': '\\u2018',\n    '&Or;': '\\u2A54',\n    '&Oscr;': '\\uD835\\uDCAA',\n    '&Oslash': '\\u00D8',\n    '&Oslash;': '\\u00D8',\n    '&Otilde': '\\u00D5',\n    '&Otilde;': '\\u00D5',\n    '&Otimes;': '\\u2A37',\n    '&Ouml': '\\u00D6',\n    '&Ouml;': '\\u00D6',\n    '&OverBar;': '\\u203E',\n    '&OverBrace;': '\\u23DE',\n    '&OverBracket;': '\\u23B4',\n    '&OverParenthesis;': '\\u23DC',\n    '&PartialD;': '\\u2202',\n    '&Pcy;': '\\u041F',\n    '&Pfr;': '\\uD835\\uDD13',\n    '&Phi;': '\\u03A6',\n    '&Pi;': '\\u03A0',\n    '&PlusMinus;': '\\u00B1',\n    '&Poincareplane;': '\\u210C',\n    '&Popf;': '\\u2119',\n    '&Pr;': '\\u2ABB',\n    '&Precedes;': '\\u227A',\n    '&PrecedesEqual;': '\\u2AAF',\n    '&PrecedesSlantEqual;': '\\u227C',\n    '&PrecedesTilde;': '\\u227E',\n    '&Prime;': '\\u2033',\n    '&Product;': '\\u220F',\n    '&Proportion;': '\\u2237',\n    '&Proportional;': '\\u221D',\n    '&Pscr;': '\\uD835\\uDCAB',\n    '&Psi;': '\\u03A8',\n    '&QUOT': '\\u0022',\n    '&QUOT;': '\\u0022',\n    '&Qfr;': '\\uD835\\uDD14',\n    '&Qopf;': '\\u211A',\n    '&Qscr;': '\\uD835\\uDCAC',\n    '&RBarr;': '\\u2910',\n    '&REG': '\\u00AE',\n    '&REG;': '\\u00AE',\n    '&Racute;': '\\u0154',\n    '&Rang;': '\\u27EB',\n    '&Rarr;': '\\u21A0',\n    '&Rarrtl;': '\\u2916',\n    '&Rcaron;': '\\u0158',\n    '&Rcedil;': '\\u0156',\n    '&Rcy;': '\\u0420',\n    '&Re;': '\\u211C',\n    '&ReverseElement;': '\\u220B',\n    '&ReverseEquilibrium;': '\\u21CB',\n    '&ReverseUpEquilibrium;': '\\u296F',\n    '&Rfr;': '\\u211C',\n    '&Rho;': '\\u03A1',\n    '&RightAngleBracket;': '\\u27E9',\n    '&RightArrow;': '\\u2192',\n    '&RightArrowBar;': '\\u21E5',\n    '&RightArrowLeftArrow;': '\\u21C4',\n    '&RightCeiling;': '\\u2309',\n    '&RightDoubleBracket;': '\\u27E7',\n    '&RightDownTeeVector;': '\\u295D',\n    '&RightDownVector;': '\\u21C2',\n    '&RightDownVectorBar;': '\\u2955',\n    '&RightFloor;': '\\u230B',\n    '&RightTee;': '\\u22A2',\n    '&RightTeeArrow;': '\\u21A6',\n    '&RightTeeVector;': '\\u295B',\n    '&RightTriangle;': '\\u22B3',\n    '&RightTriangleBar;': '\\u29D0',\n    '&RightTriangleEqual;': '\\u22B5',\n    '&RightUpDownVector;': '\\u294F',\n    '&RightUpTeeVector;': '\\u295C',\n    '&RightUpVector;': '\\u21BE',\n    '&RightUpVectorBar;': '\\u2954',\n    '&RightVector;': '\\u21C0',\n    '&RightVectorBar;': '\\u2953',\n    '&Rightarrow;': '\\u21D2',\n    '&Ropf;': '\\u211D',\n    '&RoundImplies;': '\\u2970',\n    '&Rrightarrow;': '\\u21DB',\n    '&Rscr;': '\\u211B',\n    '&Rsh;': '\\u21B1',\n    '&RuleDelayed;': '\\u29F4',\n    '&SHCHcy;': '\\u0429',\n    '&SHcy;': '\\u0428',\n    '&SOFTcy;': '\\u042C',\n    '&Sacute;': '\\u015A',\n    '&Sc;': '\\u2ABC',\n    '&Scaron;': '\\u0160',\n    '&Scedil;': '\\u015E',\n    '&Scirc;': '\\u015C',\n    '&Scy;': '\\u0421',\n    '&Sfr;': '\\uD835\\uDD16',\n    '&ShortDownArrow;': '\\u2193',\n    '&ShortLeftArrow;': '\\u2190',\n    '&ShortRightArrow;': '\\u2192',\n    '&ShortUpArrow;': '\\u2191',\n    '&Sigma;': '\\u03A3',\n    '&SmallCircle;': '\\u2218',\n    '&Sopf;': '\\uD835\\uDD4A',\n    '&Sqrt;': '\\u221A',\n    '&Square;': '\\u25A1',\n    '&SquareIntersection;': '\\u2293',\n    '&SquareSubset;': '\\u228F',\n    '&SquareSubsetEqual;': '\\u2291',\n    '&SquareSuperset;': '\\u2290',\n    '&SquareSupersetEqual;': '\\u2292',\n    '&SquareUnion;': '\\u2294',\n    '&Sscr;': '\\uD835\\uDCAE',\n    '&Star;': '\\u22C6',\n    '&Sub;': '\\u22D0',\n    '&Subset;': '\\u22D0',\n    '&SubsetEqual;': '\\u2286',\n    '&Succeeds;': '\\u227B',\n    '&SucceedsEqual;': '\\u2AB0',\n    '&SucceedsSlantEqual;': '\\u227D',\n    '&SucceedsTilde;': '\\u227F',\n    '&SuchThat;': '\\u220B',\n    '&Sum;': '\\u2211',\n    '&Sup;': '\\u22D1',\n    '&Superset;': '\\u2283',\n    '&SupersetEqual;': '\\u2287',\n    '&Supset;': '\\u22D1',\n    '&THORN': '\\u00DE',\n    '&THORN;': '\\u00DE',\n    '&TRADE;': '\\u2122',\n    '&TSHcy;': '\\u040B',\n    '&TScy;': '\\u0426',\n    '&Tab;': '\\u0009',\n    '&Tau;': '\\u03A4',\n    '&Tcaron;': '\\u0164',\n    '&Tcedil;': '\\u0162',\n    '&Tcy;': '\\u0422',\n    '&Tfr;': '\\uD835\\uDD17',\n    '&Therefore;': '\\u2234',\n    '&Theta;': '\\u0398',\n    '&ThickSpace;': '\\u205F\\u200A',\n    '&ThinSpace;': '\\u2009',\n    '&Tilde;': '\\u223C',\n    '&TildeEqual;': '\\u2243',\n    '&TildeFullEqual;': '\\u2245',\n    '&TildeTilde;': '\\u2248',\n    '&Topf;': '\\uD835\\uDD4B',\n    '&TripleDot;': '\\u20DB',\n    '&Tscr;': '\\uD835\\uDCAF',\n    '&Tstrok;': '\\u0166',\n    '&Uacute': '\\u00DA',\n    '&Uacute;': '\\u00DA',\n    '&Uarr;': '\\u219F',\n    '&Uarrocir;': '\\u2949',\n    '&Ubrcy;': '\\u040E',\n    '&Ubreve;': '\\u016C',\n    '&Ucirc': '\\u00DB',\n    '&Ucirc;': '\\u00DB',\n    '&Ucy;': '\\u0423',\n    '&Udblac;': '\\u0170',\n    '&Ufr;': '\\uD835\\uDD18',\n    '&Ugrave': '\\u00D9',\n    '&Ugrave;': '\\u00D9',\n    '&Umacr;': '\\u016A',\n    '&UnderBar;': '\\u005F',\n    '&UnderBrace;': '\\u23DF',\n    '&UnderBracket;': '\\u23B5',\n    '&UnderParenthesis;': '\\u23DD',\n    '&Union;': '\\u22C3',\n    '&UnionPlus;': '\\u228E',\n    '&Uogon;': '\\u0172',\n    '&Uopf;': '\\uD835\\uDD4C',\n    '&UpArrow;': '\\u2191',\n    '&UpArrowBar;': '\\u2912',\n    '&UpArrowDownArrow;': '\\u21C5',\n    '&UpDownArrow;': '\\u2195',\n    '&UpEquilibrium;': '\\u296E',\n    '&UpTee;': '\\u22A5',\n    '&UpTeeArrow;': '\\u21A5',\n    '&Uparrow;': '\\u21D1',\n    '&Updownarrow;': '\\u21D5',\n    '&UpperLeftArrow;': '\\u2196',\n    '&UpperRightArrow;': '\\u2197',\n    '&Upsi;': '\\u03D2',\n    '&Upsilon;': '\\u03A5',\n    '&Uring;': '\\u016E',\n    '&Uscr;': '\\uD835\\uDCB0',\n    '&Utilde;': '\\u0168',\n    '&Uuml': '\\u00DC',\n    '&Uuml;': '\\u00DC',\n    '&VDash;': '\\u22AB',\n    '&Vbar;': '\\u2AEB',\n    '&Vcy;': '\\u0412',\n    '&Vdash;': '\\u22A9',\n    '&Vdashl;': '\\u2AE6',\n    '&Vee;': '\\u22C1',\n    '&Verbar;': '\\u2016',\n    '&Vert;': '\\u2016',\n    '&VerticalBar;': '\\u2223',\n    '&VerticalLine;': '\\u007C',\n    '&VerticalSeparator;': '\\u2758',\n    '&VerticalTilde;': '\\u2240',\n    '&VeryThinSpace;': '\\u200A',\n    '&Vfr;': '\\uD835\\uDD19',\n    '&Vopf;': '\\uD835\\uDD4D',\n    '&Vscr;': '\\uD835\\uDCB1',\n    '&Vvdash;': '\\u22AA',\n    '&Wcirc;': '\\u0174',\n    '&Wedge;': '\\u22C0',\n    '&Wfr;': '\\uD835\\uDD1A',\n    '&Wopf;': '\\uD835\\uDD4E',\n    '&Wscr;': '\\uD835\\uDCB2',\n    '&Xfr;': '\\uD835\\uDD1B',\n    '&Xi;': '\\u039E',\n    '&Xopf;': '\\uD835\\uDD4F',\n    '&Xscr;': '\\uD835\\uDCB3',\n    '&YAcy;': '\\u042F',\n    '&YIcy;': '\\u0407',\n    '&YUcy;': '\\u042E',\n    '&Yacute': '\\u00DD',\n    '&Yacute;': '\\u00DD',\n    '&Ycirc;': '\\u0176',\n    '&Ycy;': '\\u042B',\n    '&Yfr;': '\\uD835\\uDD1C',\n    '&Yopf;': '\\uD835\\uDD50',\n    '&Yscr;': '\\uD835\\uDCB4',\n    '&Yuml;': '\\u0178',\n    '&ZHcy;': '\\u0416',\n    '&Zacute;': '\\u0179',\n    '&Zcaron;': '\\u017D',\n    '&Zcy;': '\\u0417',\n    '&Zdot;': '\\u017B',\n    '&ZeroWidthSpace;': '\\u200B',\n    '&Zeta;': '\\u0396',\n    '&Zfr;': '\\u2128',\n    '&Zopf;': '\\u2124',\n    '&Zscr;': '\\uD835\\uDCB5',\n    '&aacute': '\\u00E1',\n    '&aacute;': '\\u00E1',\n    '&abreve;': '\\u0103',\n    '&ac;': '\\u223E',\n    '&acE;': '\\u223E\\u0333',\n    '&acd;': '\\u223F',\n    '&acirc': '\\u00E2',\n    '&acirc;': '\\u00E2',\n    '&acute': '\\u00B4',\n    '&acute;': '\\u00B4',\n    '&acy;': '\\u0430',\n    '&aelig': '\\u00E6',\n    '&aelig;': '\\u00E6',\n    '&af;': '\\u2061',\n    '&afr;': '\\uD835\\uDD1E',\n    '&agrave': '\\u00E0',\n    '&agrave;': '\\u00E0',\n    '&alefsym;': '\\u2135',\n    '&aleph;': '\\u2135',\n    '&alpha;': '\\u03B1',\n    '&amacr;': '\\u0101',\n    '&amalg;': '\\u2A3F',\n    '&amp': '\\u0026',\n    '&amp;': '\\u0026',\n    '&and;': '\\u2227',\n    '&andand;': '\\u2A55',\n    '&andd;': '\\u2A5C',\n    '&andslope;': '\\u2A58',\n    '&andv;': '\\u2A5A',\n    '&ang;': '\\u2220',\n    '&ange;': '\\u29A4',\n    '&angle;': '\\u2220',\n    '&angmsd;': '\\u2221',\n    '&angmsdaa;': '\\u29A8',\n    '&angmsdab;': '\\u29A9',\n    '&angmsdac;': '\\u29AA',\n    '&angmsdad;': '\\u29AB',\n    '&angmsdae;': '\\u29AC',\n    '&angmsdaf;': '\\u29AD',\n    '&angmsdag;': '\\u29AE',\n    '&angmsdah;': '\\u29AF',\n    '&angrt;': '\\u221F',\n    '&angrtvb;': '\\u22BE',\n    '&angrtvbd;': '\\u299D',\n    '&angsph;': '\\u2222',\n    '&angst;': '\\u00C5',\n    '&angzarr;': '\\u237C',\n    '&aogon;': '\\u0105',\n    '&aopf;': '\\uD835\\uDD52',\n    '&ap;': '\\u2248',\n    '&apE;': '\\u2A70',\n    '&apacir;': '\\u2A6F',\n    '&ape;': '\\u224A',\n    '&apid;': '\\u224B',\n    '&apos;': '\\u0027',\n    '&approx;': '\\u2248',\n    '&approxeq;': '\\u224A',\n    '&aring': '\\u00E5',\n    '&aring;': '\\u00E5',\n    '&ascr;': '\\uD835\\uDCB6',\n    '&ast;': '\\u002A',\n    '&asymp;': '\\u2248',\n    '&asympeq;': '\\u224D',\n    '&atilde': '\\u00E3',\n    '&atilde;': '\\u00E3',\n    '&auml': '\\u00E4',\n    '&auml;': '\\u00E4',\n    '&awconint;': '\\u2233',\n    '&awint;': '\\u2A11',\n    '&bNot;': '\\u2AED',\n    '&backcong;': '\\u224C',\n    '&backepsilon;': '\\u03F6',\n    '&backprime;': '\\u2035',\n    '&backsim;': '\\u223D',\n    '&backsimeq;': '\\u22CD',\n    '&barvee;': '\\u22BD',\n    '&barwed;': '\\u2305',\n    '&barwedge;': '\\u2305',\n    '&bbrk;': '\\u23B5',\n    '&bbrktbrk;': '\\u23B6',\n    '&bcong;': '\\u224C',\n    '&bcy;': '\\u0431',\n    '&bdquo;': '\\u201E',\n    '&becaus;': '\\u2235',\n    '&because;': '\\u2235',\n    '&bemptyv;': '\\u29B0',\n    '&bepsi;': '\\u03F6',\n    '&bernou;': '\\u212C',\n    '&beta;': '\\u03B2',\n    '&beth;': '\\u2136',\n    '&between;': '\\u226C',\n    '&bfr;': '\\uD835\\uDD1F',\n    '&bigcap;': '\\u22C2',\n    '&bigcirc;': '\\u25EF',\n    '&bigcup;': '\\u22C3',\n    '&bigodot;': '\\u2A00',\n    '&bigoplus;': '\\u2A01',\n    '&bigotimes;': '\\u2A02',\n    '&bigsqcup;': '\\u2A06',\n    '&bigstar;': '\\u2605',\n    '&bigtriangledown;': '\\u25BD',\n    '&bigtriangleup;': '\\u25B3',\n    '&biguplus;': '\\u2A04',\n    '&bigvee;': '\\u22C1',\n    '&bigwedge;': '\\u22C0',\n    '&bkarow;': '\\u290D',\n    '&blacklozenge;': '\\u29EB',\n    '&blacksquare;': '\\u25AA',\n    '&blacktriangle;': '\\u25B4',\n    '&blacktriangledown;': '\\u25BE',\n    '&blacktriangleleft;': '\\u25C2',\n    '&blacktriangleright;': '\\u25B8',\n    '&blank;': '\\u2423',\n    '&blk12;': '\\u2592',\n    '&blk14;': '\\u2591',\n    '&blk34;': '\\u2593',\n    '&block;': '\\u2588',\n    '&bne;': '\\u003D\\u20E5',\n    '&bnequiv;': '\\u2261\\u20E5',\n    '&bnot;': '\\u2310',\n    '&bopf;': '\\uD835\\uDD53',\n    '&bot;': '\\u22A5',\n    '&bottom;': '\\u22A5',\n    '&bowtie;': '\\u22C8',\n    '&boxDL;': '\\u2557',\n    '&boxDR;': '\\u2554',\n    '&boxDl;': '\\u2556',\n    '&boxDr;': '\\u2553',\n    '&boxH;': '\\u2550',\n    '&boxHD;': '\\u2566',\n    '&boxHU;': '\\u2569',\n    '&boxHd;': '\\u2564',\n    '&boxHu;': '\\u2567',\n    '&boxUL;': '\\u255D',\n    '&boxUR;': '\\u255A',\n    '&boxUl;': '\\u255C',\n    '&boxUr;': '\\u2559',\n    '&boxV;': '\\u2551',\n    '&boxVH;': '\\u256C',\n    '&boxVL;': '\\u2563',\n    '&boxVR;': '\\u2560',\n    '&boxVh;': '\\u256B',\n    '&boxVl;': '\\u2562',\n    '&boxVr;': '\\u255F',\n    '&boxbox;': '\\u29C9',\n    '&boxdL;': '\\u2555',\n    '&boxdR;': '\\u2552',\n    '&boxdl;': '\\u2510',\n    '&boxdr;': '\\u250C',\n    '&boxh;': '\\u2500',\n    '&boxhD;': '\\u2565',\n    '&boxhU;': '\\u2568',\n    '&boxhd;': '\\u252C',\n    '&boxhu;': '\\u2534',\n    '&boxminus;': '\\u229F',\n    '&boxplus;': '\\u229E',\n    '&boxtimes;': '\\u22A0',\n    '&boxuL;': '\\u255B',\n    '&boxuR;': '\\u2558',\n    '&boxul;': '\\u2518',\n    '&boxur;': '\\u2514',\n    '&boxv;': '\\u2502',\n    '&boxvH;': '\\u256A',\n    '&boxvL;': '\\u2561',\n    '&boxvR;': '\\u255E',\n    '&boxvh;': '\\u253C',\n    '&boxvl;': '\\u2524',\n    '&boxvr;': '\\u251C',\n    '&bprime;': '\\u2035',\n    '&breve;': '\\u02D8',\n    '&brvbar': '\\u00A6',\n    '&brvbar;': '\\u00A6',\n    '&bscr;': '\\uD835\\uDCB7',\n    '&bsemi;': '\\u204F',\n    '&bsim;': '\\u223D',\n    '&bsime;': '\\u22CD',\n    '&bsol;': '\\u005C',\n    '&bsolb;': '\\u29C5',\n    '&bsolhsub;': '\\u27C8',\n    '&bull;': '\\u2022',\n    '&bullet;': '\\u2022',\n    '&bump;': '\\u224E',\n    '&bumpE;': '\\u2AAE',\n    '&bumpe;': '\\u224F',\n    '&bumpeq;': '\\u224F',\n    '&cacute;': '\\u0107',\n    '&cap;': '\\u2229',\n    '&capand;': '\\u2A44',\n    '&capbrcup;': '\\u2A49',\n    '&capcap;': '\\u2A4B',\n    '&capcup;': '\\u2A47',\n    '&capdot;': '\\u2A40',\n    '&caps;': '\\u2229\\uFE00',\n    '&caret;': '\\u2041',\n    '&caron;': '\\u02C7',\n    '&ccaps;': '\\u2A4D',\n    '&ccaron;': '\\u010D',\n    '&ccedil': '\\u00E7',\n    '&ccedil;': '\\u00E7',\n    '&ccirc;': '\\u0109',\n    '&ccups;': '\\u2A4C',\n    '&ccupssm;': '\\u2A50',\n    '&cdot;': '\\u010B',\n    '&cedil': '\\u00B8',\n    '&cedil;': '\\u00B8',\n    '&cemptyv;': '\\u29B2',\n    '&cent': '\\u00A2',\n    '&cent;': '\\u00A2',\n    '&centerdot;': '\\u00B7',\n    '&cfr;': '\\uD835\\uDD20',\n    '&chcy;': '\\u0447',\n    '&check;': '\\u2713',\n    '&checkmark;': '\\u2713',\n    '&chi;': '\\u03C7',\n    '&cir;': '\\u25CB',\n    '&cirE;': '\\u29C3',\n    '&circ;': '\\u02C6',\n    '&circeq;': '\\u2257',\n    '&circlearrowleft;': '\\u21BA',\n    '&circlearrowright;': '\\u21BB',\n    '&circledR;': '\\u00AE',\n    '&circledS;': '\\u24C8',\n    '&circledast;': '\\u229B',\n    '&circledcirc;': '\\u229A',\n    '&circleddash;': '\\u229D',\n    '&cire;': '\\u2257',\n    '&cirfnint;': '\\u2A10',\n    '&cirmid;': '\\u2AEF',\n    '&cirscir;': '\\u29C2',\n    '&clubs;': '\\u2663',\n    '&clubsuit;': '\\u2663',\n    '&colon;': '\\u003A',\n    '&colone;': '\\u2254',\n    '&coloneq;': '\\u2254',\n    '&comma;': '\\u002C',\n    '&commat;': '\\u0040',\n    '&comp;': '\\u2201',\n    '&compfn;': '\\u2218',\n    '&complement;': '\\u2201',\n    '&complexes;': '\\u2102',\n    '&cong;': '\\u2245',\n    '&congdot;': '\\u2A6D',\n    '&conint;': '\\u222E',\n    '&copf;': '\\uD835\\uDD54',\n    '&coprod;': '\\u2210',\n    '&copy': '\\u00A9',\n    '&copy;': '\\u00A9',\n    '&copysr;': '\\u2117',\n    '&crarr;': '\\u21B5',\n    '&cross;': '\\u2717',\n    '&cscr;': '\\uD835\\uDCB8',\n    '&csub;': '\\u2ACF',\n    '&csube;': '\\u2AD1',\n    '&csup;': '\\u2AD0',\n    '&csupe;': '\\u2AD2',\n    '&ctdot;': '\\u22EF',\n    '&cudarrl;': '\\u2938',\n    '&cudarrr;': '\\u2935',\n    '&cuepr;': '\\u22DE',\n    '&cuesc;': '\\u22DF',\n    '&cularr;': '\\u21B6',\n    '&cularrp;': '\\u293D',\n    '&cup;': '\\u222A',\n    '&cupbrcap;': '\\u2A48',\n    '&cupcap;': '\\u2A46',\n    '&cupcup;': '\\u2A4A',\n    '&cupdot;': '\\u228D',\n    '&cupor;': '\\u2A45',\n    '&cups;': '\\u222A\\uFE00',\n    '&curarr;': '\\u21B7',\n    '&curarrm;': '\\u293C',\n    '&curlyeqprec;': '\\u22DE',\n    '&curlyeqsucc;': '\\u22DF',\n    '&curlyvee;': '\\u22CE',\n    '&curlywedge;': '\\u22CF',\n    '&curren': '\\u00A4',\n    '&curren;': '\\u00A4',\n    '&curvearrowleft;': '\\u21B6',\n    '&curvearrowright;': '\\u21B7',\n    '&cuvee;': '\\u22CE',\n    '&cuwed;': '\\u22CF',\n    '&cwconint;': '\\u2232',\n    '&cwint;': '\\u2231',\n    '&cylcty;': '\\u232D',\n    '&dArr;': '\\u21D3',\n    '&dHar;': '\\u2965',\n    '&dagger;': '\\u2020',\n    '&daleth;': '\\u2138',\n    '&darr;': '\\u2193',\n    '&dash;': '\\u2010',\n    '&dashv;': '\\u22A3',\n    '&dbkarow;': '\\u290F',\n    '&dblac;': '\\u02DD',\n    '&dcaron;': '\\u010F',\n    '&dcy;': '\\u0434',\n    '&dd;': '\\u2146',\n    '&ddagger;': '\\u2021',\n    '&ddarr;': '\\u21CA',\n    '&ddotseq;': '\\u2A77',\n    '&deg': '\\u00B0',\n    '&deg;': '\\u00B0',\n    '&delta;': '\\u03B4',\n    '&demptyv;': '\\u29B1',\n    '&dfisht;': '\\u297F',\n    '&dfr;': '\\uD835\\uDD21',\n    '&dharl;': '\\u21C3',\n    '&dharr;': '\\u21C2',\n    '&diam;': '\\u22C4',\n    '&diamond;': '\\u22C4',\n    '&diamondsuit;': '\\u2666',\n    '&diams;': '\\u2666',\n    '&die;': '\\u00A8',\n    '&digamma;': '\\u03DD',\n    '&disin;': '\\u22F2',\n    '&div;': '\\u00F7',\n    '&divide': '\\u00F7',\n    '&divide;': '\\u00F7',\n    '&divideontimes;': '\\u22C7',\n    '&divonx;': '\\u22C7',\n    '&djcy;': '\\u0452',\n    '&dlcorn;': '\\u231E',\n    '&dlcrop;': '\\u230D',\n    '&dollar;': '\\u0024',\n    '&dopf;': '\\uD835\\uDD55',\n    '&dot;': '\\u02D9',\n    '&doteq;': '\\u2250',\n    '&doteqdot;': '\\u2251',\n    '&dotminus;': '\\u2238',\n    '&dotplus;': '\\u2214',\n    '&dotsquare;': '\\u22A1',\n    '&doublebarwedge;': '\\u2306',\n    '&downarrow;': '\\u2193',\n    '&downdownarrows;': '\\u21CA',\n    '&downharpoonleft;': '\\u21C3',\n    '&downharpoonright;': '\\u21C2',\n    '&drbkarow;': '\\u2910',\n    '&drcorn;': '\\u231F',\n    '&drcrop;': '\\u230C',\n    '&dscr;': '\\uD835\\uDCB9',\n    '&dscy;': '\\u0455',\n    '&dsol;': '\\u29F6',\n    '&dstrok;': '\\u0111',\n    '&dtdot;': '\\u22F1',\n    '&dtri;': '\\u25BF',\n    '&dtrif;': '\\u25BE',\n    '&duarr;': '\\u21F5',\n    '&duhar;': '\\u296F',\n    '&dwangle;': '\\u29A6',\n    '&dzcy;': '\\u045F',\n    '&dzigrarr;': '\\u27FF',\n    '&eDDot;': '\\u2A77',\n    '&eDot;': '\\u2251',\n    '&eacute': '\\u00E9',\n    '&eacute;': '\\u00E9',\n    '&easter;': '\\u2A6E',\n    '&ecaron;': '\\u011B',\n    '&ecir;': '\\u2256',\n    '&ecirc': '\\u00EA',\n    '&ecirc;': '\\u00EA',\n    '&ecolon;': '\\u2255',\n    '&ecy;': '\\u044D',\n    '&edot;': '\\u0117',\n    '&ee;': '\\u2147',\n    '&efDot;': '\\u2252',\n    '&efr;': '\\uD835\\uDD22',\n    '&eg;': '\\u2A9A',\n    '&egrave': '\\u00E8',\n    '&egrave;': '\\u00E8',\n    '&egs;': '\\u2A96',\n    '&egsdot;': '\\u2A98',\n    '&el;': '\\u2A99',\n    '&elinters;': '\\u23E7',\n    '&ell;': '\\u2113',\n    '&els;': '\\u2A95',\n    '&elsdot;': '\\u2A97',\n    '&emacr;': '\\u0113',\n    '&empty;': '\\u2205',\n    '&emptyset;': '\\u2205',\n    '&emptyv;': '\\u2205',\n    '&emsp13;': '\\u2004',\n    '&emsp14;': '\\u2005',\n    '&emsp;': '\\u2003',\n    '&eng;': '\\u014B',\n    '&ensp;': '\\u2002',\n    '&eogon;': '\\u0119',\n    '&eopf;': '\\uD835\\uDD56',\n    '&epar;': '\\u22D5',\n    '&eparsl;': '\\u29E3',\n    '&eplus;': '\\u2A71',\n    '&epsi;': '\\u03B5',\n    '&epsilon;': '\\u03B5',\n    '&epsiv;': '\\u03F5',\n    '&eqcirc;': '\\u2256',\n    '&eqcolon;': '\\u2255',\n    '&eqsim;': '\\u2242',\n    '&eqslantgtr;': '\\u2A96',\n    '&eqslantless;': '\\u2A95',\n    '&equals;': '\\u003D',\n    '&equest;': '\\u225F',\n    '&equiv;': '\\u2261',\n    '&equivDD;': '\\u2A78',\n    '&eqvparsl;': '\\u29E5',\n    '&erDot;': '\\u2253',\n    '&erarr;': '\\u2971',\n    '&escr;': '\\u212F',\n    '&esdot;': '\\u2250',\n    '&esim;': '\\u2242',\n    '&eta;': '\\u03B7',\n    '&eth': '\\u00F0',\n    '&eth;': '\\u00F0',\n    '&euml': '\\u00EB',\n    '&euml;': '\\u00EB',\n    '&euro;': '\\u20AC',\n    '&excl;': '\\u0021',\n    '&exist;': '\\u2203',\n    '&expectation;': '\\u2130',\n    '&exponentiale;': '\\u2147',\n    '&fallingdotseq;': '\\u2252',\n    '&fcy;': '\\u0444',\n    '&female;': '\\u2640',\n    '&ffilig;': '\\uFB03',\n    '&fflig;': '\\uFB00',\n    '&ffllig;': '\\uFB04',\n    '&ffr;': '\\uD835\\uDD23',\n    '&filig;': '\\uFB01',\n    '&fjlig;': '\\u0066\\u006A',\n    '&flat;': '\\u266D',\n    '&fllig;': '\\uFB02',\n    '&fltns;': '\\u25B1',\n    '&fnof;': '\\u0192',\n    '&fopf;': '\\uD835\\uDD57',\n    '&forall;': '\\u2200',\n    '&fork;': '\\u22D4',\n    '&forkv;': '\\u2AD9',\n    '&fpartint;': '\\u2A0D',\n    '&frac12': '\\u00BD',\n    '&frac12;': '\\u00BD',\n    '&frac13;': '\\u2153',\n    '&frac14': '\\u00BC',\n    '&frac14;': '\\u00BC',\n    '&frac15;': '\\u2155',\n    '&frac16;': '\\u2159',\n    '&frac18;': '\\u215B',\n    '&frac23;': '\\u2154',\n    '&frac25;': '\\u2156',\n    '&frac34': '\\u00BE',\n    '&frac34;': '\\u00BE',\n    '&frac35;': '\\u2157',\n    '&frac38;': '\\u215C',\n    '&frac45;': '\\u2158',\n    '&frac56;': '\\u215A',\n    '&frac58;': '\\u215D',\n    '&frac78;': '\\u215E',\n    '&frasl;': '\\u2044',\n    '&frown;': '\\u2322',\n    '&fscr;': '\\uD835\\uDCBB',\n    '&gE;': '\\u2267',\n    '&gEl;': '\\u2A8C',\n    '&gacute;': '\\u01F5',\n    '&gamma;': '\\u03B3',\n    '&gammad;': '\\u03DD',\n    '&gap;': '\\u2A86',\n    '&gbreve;': '\\u011F',\n    '&gcirc;': '\\u011D',\n    '&gcy;': '\\u0433',\n    '&gdot;': '\\u0121',\n    '&ge;': '\\u2265',\n    '&gel;': '\\u22DB',\n    '&geq;': '\\u2265',\n    '&geqq;': '\\u2267',\n    '&geqslant;': '\\u2A7E',\n    '&ges;': '\\u2A7E',\n    '&gescc;': '\\u2AA9',\n    '&gesdot;': '\\u2A80',\n    '&gesdoto;': '\\u2A82',\n    '&gesdotol;': '\\u2A84',\n    '&gesl;': '\\u22DB\\uFE00',\n    '&gesles;': '\\u2A94',\n    '&gfr;': '\\uD835\\uDD24',\n    '&gg;': '\\u226B',\n    '&ggg;': '\\u22D9',\n    '&gimel;': '\\u2137',\n    '&gjcy;': '\\u0453',\n    '&gl;': '\\u2277',\n    '&glE;': '\\u2A92',\n    '&gla;': '\\u2AA5',\n    '&glj;': '\\u2AA4',\n    '&gnE;': '\\u2269',\n    '&gnap;': '\\u2A8A',\n    '&gnapprox;': '\\u2A8A',\n    '&gne;': '\\u2A88',\n    '&gneq;': '\\u2A88',\n    '&gneqq;': '\\u2269',\n    '&gnsim;': '\\u22E7',\n    '&gopf;': '\\uD835\\uDD58',\n    '&grave;': '\\u0060',\n    '&gscr;': '\\u210A',\n    '&gsim;': '\\u2273',\n    '&gsime;': '\\u2A8E',\n    '&gsiml;': '\\u2A90',\n    '&gt': '\\u003E',\n    '&gt;': '\\u003E',\n    '&gtcc;': '\\u2AA7',\n    '&gtcir;': '\\u2A7A',\n    '&gtdot;': '\\u22D7',\n    '&gtlPar;': '\\u2995',\n    '&gtquest;': '\\u2A7C',\n    '&gtrapprox;': '\\u2A86',\n    '&gtrarr;': '\\u2978',\n    '&gtrdot;': '\\u22D7',\n    '&gtreqless;': '\\u22DB',\n    '&gtreqqless;': '\\u2A8C',\n    '&gtrless;': '\\u2277',\n    '&gtrsim;': '\\u2273',\n    '&gvertneqq;': '\\u2269\\uFE00',\n    '&gvnE;': '\\u2269\\uFE00',\n    '&hArr;': '\\u21D4',\n    '&hairsp;': '\\u200A',\n    '&half;': '\\u00BD',\n    '&hamilt;': '\\u210B',\n    '&hardcy;': '\\u044A',\n    '&harr;': '\\u2194',\n    '&harrcir;': '\\u2948',\n    '&harrw;': '\\u21AD',\n    '&hbar;': '\\u210F',\n    '&hcirc;': '\\u0125',\n    '&hearts;': '\\u2665',\n    '&heartsuit;': '\\u2665',\n    '&hellip;': '\\u2026',\n    '&hercon;': '\\u22B9',\n    '&hfr;': '\\uD835\\uDD25',\n    '&hksearow;': '\\u2925',\n    '&hkswarow;': '\\u2926',\n    '&hoarr;': '\\u21FF',\n    '&homtht;': '\\u223B',\n    '&hookleftarrow;': '\\u21A9',\n    '&hookrightarrow;': '\\u21AA',\n    '&hopf;': '\\uD835\\uDD59',\n    '&horbar;': '\\u2015',\n    '&hscr;': '\\uD835\\uDCBD',\n    '&hslash;': '\\u210F',\n    '&hstrok;': '\\u0127',\n    '&hybull;': '\\u2043',\n    '&hyphen;': '\\u2010',\n    '&iacute': '\\u00ED',\n    '&iacute;': '\\u00ED',\n    '&ic;': '\\u2063',\n    '&icirc': '\\u00EE',\n    '&icirc;': '\\u00EE',\n    '&icy;': '\\u0438',\n    '&iecy;': '\\u0435',\n    '&iexcl': '\\u00A1',\n    '&iexcl;': '\\u00A1',\n    '&iff;': '\\u21D4',\n    '&ifr;': '\\uD835\\uDD26',\n    '&igrave': '\\u00EC',\n    '&igrave;': '\\u00EC',\n    '&ii;': '\\u2148',\n    '&iiiint;': '\\u2A0C',\n    '&iiint;': '\\u222D',\n    '&iinfin;': '\\u29DC',\n    '&iiota;': '\\u2129',\n    '&ijlig;': '\\u0133',\n    '&imacr;': '\\u012B',\n    '&image;': '\\u2111',\n    '&imagline;': '\\u2110',\n    '&imagpart;': '\\u2111',\n    '&imath;': '\\u0131',\n    '&imof;': '\\u22B7',\n    '&imped;': '\\u01B5',\n    '&in;': '\\u2208',\n    '&incare;': '\\u2105',\n    '&infin;': '\\u221E',\n    '&infintie;': '\\u29DD',\n    '&inodot;': '\\u0131',\n    '&int;': '\\u222B',\n    '&intcal;': '\\u22BA',\n    '&integers;': '\\u2124',\n    '&intercal;': '\\u22BA',\n    '&intlarhk;': '\\u2A17',\n    '&intprod;': '\\u2A3C',\n    '&iocy;': '\\u0451',\n    '&iogon;': '\\u012F',\n    '&iopf;': '\\uD835\\uDD5A',\n    '&iota;': '\\u03B9',\n    '&iprod;': '\\u2A3C',\n    '&iquest': '\\u00BF',\n    '&iquest;': '\\u00BF',\n    '&iscr;': '\\uD835\\uDCBE',\n    '&isin;': '\\u2208',\n    '&isinE;': '\\u22F9',\n    '&isindot;': '\\u22F5',\n    '&isins;': '\\u22F4',\n    '&isinsv;': '\\u22F3',\n    '&isinv;': '\\u2208',\n    '&it;': '\\u2062',\n    '&itilde;': '\\u0129',\n    '&iukcy;': '\\u0456',\n    '&iuml': '\\u00EF',\n    '&iuml;': '\\u00EF',\n    '&jcirc;': '\\u0135',\n    '&jcy;': '\\u0439',\n    '&jfr;': '\\uD835\\uDD27',\n    '&jmath;': '\\u0237',\n    '&jopf;': '\\uD835\\uDD5B',\n    '&jscr;': '\\uD835\\uDCBF',\n    '&jsercy;': '\\u0458',\n    '&jukcy;': '\\u0454',\n    '&kappa;': '\\u03BA',\n    '&kappav;': '\\u03F0',\n    '&kcedil;': '\\u0137',\n    '&kcy;': '\\u043A',\n    '&kfr;': '\\uD835\\uDD28',\n    '&kgreen;': '\\u0138',\n    '&khcy;': '\\u0445',\n    '&kjcy;': '\\u045C',\n    '&kopf;': '\\uD835\\uDD5C',\n    '&kscr;': '\\uD835\\uDCC0',\n    '&lAarr;': '\\u21DA',\n    '&lArr;': '\\u21D0',\n    '&lAtail;': '\\u291B',\n    '&lBarr;': '\\u290E',\n    '&lE;': '\\u2266',\n    '&lEg;': '\\u2A8B',\n    '&lHar;': '\\u2962',\n    '&lacute;': '\\u013A',\n    '&laemptyv;': '\\u29B4',\n    '&lagran;': '\\u2112',\n    '&lambda;': '\\u03BB',\n    '&lang;': '\\u27E8',\n    '&langd;': '\\u2991',\n    '&langle;': '\\u27E8',\n    '&lap;': '\\u2A85',\n    '&laquo': '\\u00AB',\n    '&laquo;': '\\u00AB',\n    '&larr;': '\\u2190',\n    '&larrb;': '\\u21E4',\n    '&larrbfs;': '\\u291F',\n    '&larrfs;': '\\u291D',\n    '&larrhk;': '\\u21A9',\n    '&larrlp;': '\\u21AB',\n    '&larrpl;': '\\u2939',\n    '&larrsim;': '\\u2973',\n    '&larrtl;': '\\u21A2',\n    '&lat;': '\\u2AAB',\n    '&latail;': '\\u2919',\n    '&late;': '\\u2AAD',\n    '&lates;': '\\u2AAD\\uFE00',\n    '&lbarr;': '\\u290C',\n    '&lbbrk;': '\\u2772',\n    '&lbrace;': '\\u007B',\n    '&lbrack;': '\\u005B',\n    '&lbrke;': '\\u298B',\n    '&lbrksld;': '\\u298F',\n    '&lbrkslu;': '\\u298D',\n    '&lcaron;': '\\u013E',\n    '&lcedil;': '\\u013C',\n    '&lceil;': '\\u2308',\n    '&lcub;': '\\u007B',\n    '&lcy;': '\\u043B',\n    '&ldca;': '\\u2936',\n    '&ldquo;': '\\u201C',\n    '&ldquor;': '\\u201E',\n    '&ldrdhar;': '\\u2967',\n    '&ldrushar;': '\\u294B',\n    '&ldsh;': '\\u21B2',\n    '&le;': '\\u2264',\n    '&leftarrow;': '\\u2190',\n    '&leftarrowtail;': '\\u21A2',\n    '&leftharpoondown;': '\\u21BD',\n    '&leftharpoonup;': '\\u21BC',\n    '&leftleftarrows;': '\\u21C7',\n    '&leftrightarrow;': '\\u2194',\n    '&leftrightarrows;': '\\u21C6',\n    '&leftrightharpoons;': '\\u21CB',\n    '&leftrightsquigarrow;': '\\u21AD',\n    '&leftthreetimes;': '\\u22CB',\n    '&leg;': '\\u22DA',\n    '&leq;': '\\u2264',\n    '&leqq;': '\\u2266',\n    '&leqslant;': '\\u2A7D',\n    '&les;': '\\u2A7D',\n    '&lescc;': '\\u2AA8',\n    '&lesdot;': '\\u2A7F',\n    '&lesdoto;': '\\u2A81',\n    '&lesdotor;': '\\u2A83',\n    '&lesg;': '\\u22DA\\uFE00',\n    '&lesges;': '\\u2A93',\n    '&lessapprox;': '\\u2A85',\n    '&lessdot;': '\\u22D6',\n    '&lesseqgtr;': '\\u22DA',\n    '&lesseqqgtr;': '\\u2A8B',\n    '&lessgtr;': '\\u2276',\n    '&lesssim;': '\\u2272',\n    '&lfisht;': '\\u297C',\n    '&lfloor;': '\\u230A',\n    '&lfr;': '\\uD835\\uDD29',\n    '&lg;': '\\u2276',\n    '&lgE;': '\\u2A91',\n    '&lhard;': '\\u21BD',\n    '&lharu;': '\\u21BC',\n    '&lharul;': '\\u296A',\n    '&lhblk;': '\\u2584',\n    '&ljcy;': '\\u0459',\n    '&ll;': '\\u226A',\n    '&llarr;': '\\u21C7',\n    '&llcorner;': '\\u231E',\n    '&llhard;': '\\u296B',\n    '&lltri;': '\\u25FA',\n    '&lmidot;': '\\u0140',\n    '&lmoust;': '\\u23B0',\n    '&lmoustache;': '\\u23B0',\n    '&lnE;': '\\u2268',\n    '&lnap;': '\\u2A89',\n    '&lnapprox;': '\\u2A89',\n    '&lne;': '\\u2A87',\n    '&lneq;': '\\u2A87',\n    '&lneqq;': '\\u2268',\n    '&lnsim;': '\\u22E6',\n    '&loang;': '\\u27EC',\n    '&loarr;': '\\u21FD',\n    '&lobrk;': '\\u27E6',\n    '&longleftarrow;': '\\u27F5',\n    '&longleftrightarrow;': '\\u27F7',\n    '&longmapsto;': '\\u27FC',\n    '&longrightarrow;': '\\u27F6',\n    '&looparrowleft;': '\\u21AB',\n    '&looparrowright;': '\\u21AC',\n    '&lopar;': '\\u2985',\n    '&lopf;': '\\uD835\\uDD5D',\n    '&loplus;': '\\u2A2D',\n    '&lotimes;': '\\u2A34',\n    '&lowast;': '\\u2217',\n    '&lowbar;': '\\u005F',\n    '&loz;': '\\u25CA',\n    '&lozenge;': '\\u25CA',\n    '&lozf;': '\\u29EB',\n    '&lpar;': '\\u0028',\n    '&lparlt;': '\\u2993',\n    '&lrarr;': '\\u21C6',\n    '&lrcorner;': '\\u231F',\n    '&lrhar;': '\\u21CB',\n    '&lrhard;': '\\u296D',\n    '&lrm;': '\\u200E',\n    '&lrtri;': '\\u22BF',\n    '&lsaquo;': '\\u2039',\n    '&lscr;': '\\uD835\\uDCC1',\n    '&lsh;': '\\u21B0',\n    '&lsim;': '\\u2272',\n    '&lsime;': '\\u2A8D',\n    '&lsimg;': '\\u2A8F',\n    '&lsqb;': '\\u005B',\n    '&lsquo;': '\\u2018',\n    '&lsquor;': '\\u201A',\n    '&lstrok;': '\\u0142',\n    '&lt': '\\u003C',\n    '&lt;': '\\u003C',\n    '&ltcc;': '\\u2AA6',\n    '&ltcir;': '\\u2A79',\n    '&ltdot;': '\\u22D6',\n    '&lthree;': '\\u22CB',\n    '&ltimes;': '\\u22C9',\n    '&ltlarr;': '\\u2976',\n    '&ltquest;': '\\u2A7B',\n    '&ltrPar;': '\\u2996',\n    '&ltri;': '\\u25C3',\n    '&ltrie;': '\\u22B4',\n    '&ltrif;': '\\u25C2',\n    '&lurdshar;': '\\u294A',\n    '&luruhar;': '\\u2966',\n    '&lvertneqq;': '\\u2268\\uFE00',\n    '&lvnE;': '\\u2268\\uFE00',\n    '&mDDot;': '\\u223A',\n    '&macr': '\\u00AF',\n    '&macr;': '\\u00AF',\n    '&male;': '\\u2642',\n    '&malt;': '\\u2720',\n    '&maltese;': '\\u2720',\n    '&map;': '\\u21A6',\n    '&mapsto;': '\\u21A6',\n    '&mapstodown;': '\\u21A7',\n    '&mapstoleft;': '\\u21A4',\n    '&mapstoup;': '\\u21A5',\n    '&marker;': '\\u25AE',\n    '&mcomma;': '\\u2A29',\n    '&mcy;': '\\u043C',\n    '&mdash;': '\\u2014',\n    '&measuredangle;': '\\u2221',\n    '&mfr;': '\\uD835\\uDD2A',\n    '&mho;': '\\u2127',\n    '&micro': '\\u00B5',\n    '&micro;': '\\u00B5',\n    '&mid;': '\\u2223',\n    '&midast;': '\\u002A',\n    '&midcir;': '\\u2AF0',\n    '&middot': '\\u00B7',\n    '&middot;': '\\u00B7',\n    '&minus;': '\\u2212',\n    '&minusb;': '\\u229F',\n    '&minusd;': '\\u2238',\n    '&minusdu;': '\\u2A2A',\n    '&mlcp;': '\\u2ADB',\n    '&mldr;': '\\u2026',\n    '&mnplus;': '\\u2213',\n    '&models;': '\\u22A7',\n    '&mopf;': '\\uD835\\uDD5E',\n    '&mp;': '\\u2213',\n    '&mscr;': '\\uD835\\uDCC2',\n    '&mstpos;': '\\u223E',\n    '&mu;': '\\u03BC',\n    '&multimap;': '\\u22B8',\n    '&mumap;': '\\u22B8',\n    '&nGg;': '\\u22D9\\u0338',\n    '&nGt;': '\\u226B\\u20D2',\n    '&nGtv;': '\\u226B\\u0338',\n    '&nLeftarrow;': '\\u21CD',\n    '&nLeftrightarrow;': '\\u21CE',\n    '&nLl;': '\\u22D8\\u0338',\n    '&nLt;': '\\u226A\\u20D2',\n    '&nLtv;': '\\u226A\\u0338',\n    '&nRightarrow;': '\\u21CF',\n    '&nVDash;': '\\u22AF',\n    '&nVdash;': '\\u22AE',\n    '&nabla;': '\\u2207',\n    '&nacute;': '\\u0144',\n    '&nang;': '\\u2220\\u20D2',\n    '&nap;': '\\u2249',\n    '&napE;': '\\u2A70\\u0338',\n    '&napid;': '\\u224B\\u0338',\n    '&napos;': '\\u0149',\n    '&napprox;': '\\u2249',\n    '&natur;': '\\u266E',\n    '&natural;': '\\u266E',\n    '&naturals;': '\\u2115',\n    '&nbsp': '\\u00A0',\n    '&nbsp;': '\\u00A0',\n    '&nbump;': '\\u224E\\u0338',\n    '&nbumpe;': '\\u224F\\u0338',\n    '&ncap;': '\\u2A43',\n    '&ncaron;': '\\u0148',\n    '&ncedil;': '\\u0146',\n    '&ncong;': '\\u2247',\n    '&ncongdot;': '\\u2A6D\\u0338',\n    '&ncup;': '\\u2A42',\n    '&ncy;': '\\u043D',\n    '&ndash;': '\\u2013',\n    '&ne;': '\\u2260',\n    '&neArr;': '\\u21D7',\n    '&nearhk;': '\\u2924',\n    '&nearr;': '\\u2197',\n    '&nearrow;': '\\u2197',\n    '&nedot;': '\\u2250\\u0338',\n    '&nequiv;': '\\u2262',\n    '&nesear;': '\\u2928',\n    '&nesim;': '\\u2242\\u0338',\n    '&nexist;': '\\u2204',\n    '&nexists;': '\\u2204',\n    '&nfr;': '\\uD835\\uDD2B',\n    '&ngE;': '\\u2267\\u0338',\n    '&nge;': '\\u2271',\n    '&ngeq;': '\\u2271',\n    '&ngeqq;': '\\u2267\\u0338',\n    '&ngeqslant;': '\\u2A7E\\u0338',\n    '&nges;': '\\u2A7E\\u0338',\n    '&ngsim;': '\\u2275',\n    '&ngt;': '\\u226F',\n    '&ngtr;': '\\u226F',\n    '&nhArr;': '\\u21CE',\n    '&nharr;': '\\u21AE',\n    '&nhpar;': '\\u2AF2',\n    '&ni;': '\\u220B',\n    '&nis;': '\\u22FC',\n    '&nisd;': '\\u22FA',\n    '&niv;': '\\u220B',\n    '&njcy;': '\\u045A',\n    '&nlArr;': '\\u21CD',\n    '&nlE;': '\\u2266\\u0338',\n    '&nlarr;': '\\u219A',\n    '&nldr;': '\\u2025',\n    '&nle;': '\\u2270',\n    '&nleftarrow;': '\\u219A',\n    '&nleftrightarrow;': '\\u21AE',\n    '&nleq;': '\\u2270',\n    '&nleqq;': '\\u2266\\u0338',\n    '&nleqslant;': '\\u2A7D\\u0338',\n    '&nles;': '\\u2A7D\\u0338',\n    '&nless;': '\\u226E',\n    '&nlsim;': '\\u2274',\n    '&nlt;': '\\u226E',\n    '&nltri;': '\\u22EA',\n    '&nltrie;': '\\u22EC',\n    '&nmid;': '\\u2224',\n    '&nopf;': '\\uD835\\uDD5F',\n    '&not': '\\u00AC',\n    '&not;': '\\u00AC',\n    '&notin;': '\\u2209',\n    '&notinE;': '\\u22F9\\u0338',\n    '&notindot;': '\\u22F5\\u0338',\n    '&notinva;': '\\u2209',\n    '&notinvb;': '\\u22F7',\n    '&notinvc;': '\\u22F6',\n    '&notni;': '\\u220C',\n    '&notniva;': '\\u220C',\n    '&notnivb;': '\\u22FE',\n    '&notnivc;': '\\u22FD',\n    '&npar;': '\\u2226',\n    '&nparallel;': '\\u2226',\n    '&nparsl;': '\\u2AFD\\u20E5',\n    '&npart;': '\\u2202\\u0338',\n    '&npolint;': '\\u2A14',\n    '&npr;': '\\u2280',\n    '&nprcue;': '\\u22E0',\n    '&npre;': '\\u2AAF\\u0338',\n    '&nprec;': '\\u2280',\n    '&npreceq;': '\\u2AAF\\u0338',\n    '&nrArr;': '\\u21CF',\n    '&nrarr;': '\\u219B',\n    '&nrarrc;': '\\u2933\\u0338',\n    '&nrarrw;': '\\u219D\\u0338',\n    '&nrightarrow;': '\\u219B',\n    '&nrtri;': '\\u22EB',\n    '&nrtrie;': '\\u22ED',\n    '&nsc;': '\\u2281',\n    '&nsccue;': '\\u22E1',\n    '&nsce;': '\\u2AB0\\u0338',\n    '&nscr;': '\\uD835\\uDCC3',\n    '&nshortmid;': '\\u2224',\n    '&nshortparallel;': '\\u2226',\n    '&nsim;': '\\u2241',\n    '&nsime;': '\\u2244',\n    '&nsimeq;': '\\u2244',\n    '&nsmid;': '\\u2224',\n    '&nspar;': '\\u2226',\n    '&nsqsube;': '\\u22E2',\n    '&nsqsupe;': '\\u22E3',\n    '&nsub;': '\\u2284',\n    '&nsubE;': '\\u2AC5\\u0338',\n    '&nsube;': '\\u2288',\n    '&nsubset;': '\\u2282\\u20D2',\n    '&nsubseteq;': '\\u2288',\n    '&nsubseteqq;': '\\u2AC5\\u0338',\n    '&nsucc;': '\\u2281',\n    '&nsucceq;': '\\u2AB0\\u0338',\n    '&nsup;': '\\u2285',\n    '&nsupE;': '\\u2AC6\\u0338',\n    '&nsupe;': '\\u2289',\n    '&nsupset;': '\\u2283\\u20D2',\n    '&nsupseteq;': '\\u2289',\n    '&nsupseteqq;': '\\u2AC6\\u0338',\n    '&ntgl;': '\\u2279',\n    '&ntilde': '\\u00F1',\n    '&ntilde;': '\\u00F1',\n    '&ntlg;': '\\u2278',\n    '&ntriangleleft;': '\\u22EA',\n    '&ntrianglelefteq;': '\\u22EC',\n    '&ntriangleright;': '\\u22EB',\n    '&ntrianglerighteq;': '\\u22ED',\n    '&nu;': '\\u03BD',\n    '&num;': '\\u0023',\n    '&numero;': '\\u2116',\n    '&numsp;': '\\u2007',\n    '&nvDash;': '\\u22AD',\n    '&nvHarr;': '\\u2904',\n    '&nvap;': '\\u224D\\u20D2',\n    '&nvdash;': '\\u22AC',\n    '&nvge;': '\\u2265\\u20D2',\n    '&nvgt;': '\\u003E\\u20D2',\n    '&nvinfin;': '\\u29DE',\n    '&nvlArr;': '\\u2902',\n    '&nvle;': '\\u2264\\u20D2',\n    '&nvlt;': '\\u003C\\u20D2',\n    '&nvltrie;': '\\u22B4\\u20D2',\n    '&nvrArr;': '\\u2903',\n    '&nvrtrie;': '\\u22B5\\u20D2',\n    '&nvsim;': '\\u223C\\u20D2',\n    '&nwArr;': '\\u21D6',\n    '&nwarhk;': '\\u2923',\n    '&nwarr;': '\\u2196',\n    '&nwarrow;': '\\u2196',\n    '&nwnear;': '\\u2927',\n    '&oS;': '\\u24C8',\n    '&oacute': '\\u00F3',\n    '&oacute;': '\\u00F3',\n    '&oast;': '\\u229B',\n    '&ocir;': '\\u229A',\n    '&ocirc': '\\u00F4',\n    '&ocirc;': '\\u00F4',\n    '&ocy;': '\\u043E',\n    '&odash;': '\\u229D',\n    '&odblac;': '\\u0151',\n    '&odiv;': '\\u2A38',\n    '&odot;': '\\u2299',\n    '&odsold;': '\\u29BC',\n    '&oelig;': '\\u0153',\n    '&ofcir;': '\\u29BF',\n    '&ofr;': '\\uD835\\uDD2C',\n    '&ogon;': '\\u02DB',\n    '&ograve': '\\u00F2',\n    '&ograve;': '\\u00F2',\n    '&ogt;': '\\u29C1',\n    '&ohbar;': '\\u29B5',\n    '&ohm;': '\\u03A9',\n    '&oint;': '\\u222E',\n    '&olarr;': '\\u21BA',\n    '&olcir;': '\\u29BE',\n    '&olcross;': '\\u29BB',\n    '&oline;': '\\u203E',\n    '&olt;': '\\u29C0',\n    '&omacr;': '\\u014D',\n    '&omega;': '\\u03C9',\n    '&omicron;': '\\u03BF',\n    '&omid;': '\\u29B6',\n    '&ominus;': '\\u2296',\n    '&oopf;': '\\uD835\\uDD60',\n    '&opar;': '\\u29B7',\n    '&operp;': '\\u29B9',\n    '&oplus;': '\\u2295',\n    '&or;': '\\u2228',\n    '&orarr;': '\\u21BB',\n    '&ord;': '\\u2A5D',\n    '&order;': '\\u2134',\n    '&orderof;': '\\u2134',\n    '&ordf': '\\u00AA',\n    '&ordf;': '\\u00AA',\n    '&ordm': '\\u00BA',\n    '&ordm;': '\\u00BA',\n    '&origof;': '\\u22B6',\n    '&oror;': '\\u2A56',\n    '&orslope;': '\\u2A57',\n    '&orv;': '\\u2A5B',\n    '&oscr;': '\\u2134',\n    '&oslash': '\\u00F8',\n    '&oslash;': '\\u00F8',\n    '&osol;': '\\u2298',\n    '&otilde': '\\u00F5',\n    '&otilde;': '\\u00F5',\n    '&otimes;': '\\u2297',\n    '&otimesas;': '\\u2A36',\n    '&ouml': '\\u00F6',\n    '&ouml;': '\\u00F6',\n    '&ovbar;': '\\u233D',\n    '&par;': '\\u2225',\n    '&para': '\\u00B6',\n    '&para;': '\\u00B6',\n    '&parallel;': '\\u2225',\n    '&parsim;': '\\u2AF3',\n    '&parsl;': '\\u2AFD',\n    '&part;': '\\u2202',\n    '&pcy;': '\\u043F',\n    '&percnt;': '\\u0025',\n    '&period;': '\\u002E',\n    '&permil;': '\\u2030',\n    '&perp;': '\\u22A5',\n    '&pertenk;': '\\u2031',\n    '&pfr;': '\\uD835\\uDD2D',\n    '&phi;': '\\u03C6',\n    '&phiv;': '\\u03D5',\n    '&phmmat;': '\\u2133',\n    '&phone;': '\\u260E',\n    '&pi;': '\\u03C0',\n    '&pitchfork;': '\\u22D4',\n    '&piv;': '\\u03D6',\n    '&planck;': '\\u210F',\n    '&planckh;': '\\u210E',\n    '&plankv;': '\\u210F',\n    '&plus;': '\\u002B',\n    '&plusacir;': '\\u2A23',\n    '&plusb;': '\\u229E',\n    '&pluscir;': '\\u2A22',\n    '&plusdo;': '\\u2214',\n    '&plusdu;': '\\u2A25',\n    '&pluse;': '\\u2A72',\n    '&plusmn': '\\u00B1',\n    '&plusmn;': '\\u00B1',\n    '&plussim;': '\\u2A26',\n    '&plustwo;': '\\u2A27',\n    '&pm;': '\\u00B1',\n    '&pointint;': '\\u2A15',\n    '&popf;': '\\uD835\\uDD61',\n    '&pound': '\\u00A3',\n    '&pound;': '\\u00A3',\n    '&pr;': '\\u227A',\n    '&prE;': '\\u2AB3',\n    '&prap;': '\\u2AB7',\n    '&prcue;': '\\u227C',\n    '&pre;': '\\u2AAF',\n    '&prec;': '\\u227A',\n    '&precapprox;': '\\u2AB7',\n    '&preccurlyeq;': '\\u227C',\n    '&preceq;': '\\u2AAF',\n    '&precnapprox;': '\\u2AB9',\n    '&precneqq;': '\\u2AB5',\n    '&precnsim;': '\\u22E8',\n    '&precsim;': '\\u227E',\n    '&prime;': '\\u2032',\n    '&primes;': '\\u2119',\n    '&prnE;': '\\u2AB5',\n    '&prnap;': '\\u2AB9',\n    '&prnsim;': '\\u22E8',\n    '&prod;': '\\u220F',\n    '&profalar;': '\\u232E',\n    '&profline;': '\\u2312',\n    '&profsurf;': '\\u2313',\n    '&prop;': '\\u221D',\n    '&propto;': '\\u221D',\n    '&prsim;': '\\u227E',\n    '&prurel;': '\\u22B0',\n    '&pscr;': '\\uD835\\uDCC5',\n    '&psi;': '\\u03C8',\n    '&puncsp;': '\\u2008',\n    '&qfr;': '\\uD835\\uDD2E',\n    '&qint;': '\\u2A0C',\n    '&qopf;': '\\uD835\\uDD62',\n    '&qprime;': '\\u2057',\n    '&qscr;': '\\uD835\\uDCC6',\n    '&quaternions;': '\\u210D',\n    '&quatint;': '\\u2A16',\n    '&quest;': '\\u003F',\n    '&questeq;': '\\u225F',\n    '&quot': '\\u0022',\n    '&quot;': '\\u0022',\n    '&rAarr;': '\\u21DB',\n    '&rArr;': '\\u21D2',\n    '&rAtail;': '\\u291C',\n    '&rBarr;': '\\u290F',\n    '&rHar;': '\\u2964',\n    '&race;': '\\u223D\\u0331',\n    '&racute;': '\\u0155',\n    '&radic;': '\\u221A',\n    '&raemptyv;': '\\u29B3',\n    '&rang;': '\\u27E9',\n    '&rangd;': '\\u2992',\n    '&range;': '\\u29A5',\n    '&rangle;': '\\u27E9',\n    '&raquo': '\\u00BB',\n    '&raquo;': '\\u00BB',\n    '&rarr;': '\\u2192',\n    '&rarrap;': '\\u2975',\n    '&rarrb;': '\\u21E5',\n    '&rarrbfs;': '\\u2920',\n    '&rarrc;': '\\u2933',\n    '&rarrfs;': '\\u291E',\n    '&rarrhk;': '\\u21AA',\n    '&rarrlp;': '\\u21AC',\n    '&rarrpl;': '\\u2945',\n    '&rarrsim;': '\\u2974',\n    '&rarrtl;': '\\u21A3',\n    '&rarrw;': '\\u219D',\n    '&ratail;': '\\u291A',\n    '&ratio;': '\\u2236',\n    '&rationals;': '\\u211A',\n    '&rbarr;': '\\u290D',\n    '&rbbrk;': '\\u2773',\n    '&rbrace;': '\\u007D',\n    '&rbrack;': '\\u005D',\n    '&rbrke;': '\\u298C',\n    '&rbrksld;': '\\u298E',\n    '&rbrkslu;': '\\u2990',\n    '&rcaron;': '\\u0159',\n    '&rcedil;': '\\u0157',\n    '&rceil;': '\\u2309',\n    '&rcub;': '\\u007D',\n    '&rcy;': '\\u0440',\n    '&rdca;': '\\u2937',\n    '&rdldhar;': '\\u2969',\n    '&rdquo;': '\\u201D',\n    '&rdquor;': '\\u201D',\n    '&rdsh;': '\\u21B3',\n    '&real;': '\\u211C',\n    '&realine;': '\\u211B',\n    '&realpart;': '\\u211C',\n    '&reals;': '\\u211D',\n    '&rect;': '\\u25AD',\n    '&reg': '\\u00AE',\n    '&reg;': '\\u00AE',\n    '&rfisht;': '\\u297D',\n    '&rfloor;': '\\u230B',\n    '&rfr;': '\\uD835\\uDD2F',\n    '&rhard;': '\\u21C1',\n    '&rharu;': '\\u21C0',\n    '&rharul;': '\\u296C',\n    '&rho;': '\\u03C1',\n    '&rhov;': '\\u03F1',\n    '&rightarrow;': '\\u2192',\n    '&rightarrowtail;': '\\u21A3',\n    '&rightharpoondown;': '\\u21C1',\n    '&rightharpoonup;': '\\u21C0',\n    '&rightleftarrows;': '\\u21C4',\n    '&rightleftharpoons;': '\\u21CC',\n    '&rightrightarrows;': '\\u21C9',\n    '&rightsquigarrow;': '\\u219D',\n    '&rightthreetimes;': '\\u22CC',\n    '&ring;': '\\u02DA',\n    '&risingdotseq;': '\\u2253',\n    '&rlarr;': '\\u21C4',\n    '&rlhar;': '\\u21CC',\n    '&rlm;': '\\u200F',\n    '&rmoust;': '\\u23B1',\n    '&rmoustache;': '\\u23B1',\n    '&rnmid;': '\\u2AEE',\n    '&roang;': '\\u27ED',\n    '&roarr;': '\\u21FE',\n    '&robrk;': '\\u27E7',\n    '&ropar;': '\\u2986',\n    '&ropf;': '\\uD835\\uDD63',\n    '&roplus;': '\\u2A2E',\n    '&rotimes;': '\\u2A35',\n    '&rpar;': '\\u0029',\n    '&rpargt;': '\\u2994',\n    '&rppolint;': '\\u2A12',\n    '&rrarr;': '\\u21C9',\n    '&rsaquo;': '\\u203A',\n    '&rscr;': '\\uD835\\uDCC7',\n    '&rsh;': '\\u21B1',\n    '&rsqb;': '\\u005D',\n    '&rsquo;': '\\u2019',\n    '&rsquor;': '\\u2019',\n    '&rthree;': '\\u22CC',\n    '&rtimes;': '\\u22CA',\n    '&rtri;': '\\u25B9',\n    '&rtrie;': '\\u22B5',\n    '&rtrif;': '\\u25B8',\n    '&rtriltri;': '\\u29CE',\n    '&ruluhar;': '\\u2968',\n    '&rx;': '\\u211E',\n    '&sacute;': '\\u015B',\n    '&sbquo;': '\\u201A',\n    '&sc;': '\\u227B',\n    '&scE;': '\\u2AB4',\n    '&scap;': '\\u2AB8',\n    '&scaron;': '\\u0161',\n    '&sccue;': '\\u227D',\n    '&sce;': '\\u2AB0',\n    '&scedil;': '\\u015F',\n    '&scirc;': '\\u015D',\n    '&scnE;': '\\u2AB6',\n    '&scnap;': '\\u2ABA',\n    '&scnsim;': '\\u22E9',\n    '&scpolint;': '\\u2A13',\n    '&scsim;': '\\u227F',\n    '&scy;': '\\u0441',\n    '&sdot;': '\\u22C5',\n    '&sdotb;': '\\u22A1',\n    '&sdote;': '\\u2A66',\n    '&seArr;': '\\u21D8',\n    '&searhk;': '\\u2925',\n    '&searr;': '\\u2198',\n    '&searrow;': '\\u2198',\n    '&sect': '\\u00A7',\n    '&sect;': '\\u00A7',\n    '&semi;': '\\u003B',\n    '&seswar;': '\\u2929',\n    '&setminus;': '\\u2216',\n    '&setmn;': '\\u2216',\n    '&sext;': '\\u2736',\n    '&sfr;': '\\uD835\\uDD30',\n    '&sfrown;': '\\u2322',\n    '&sharp;': '\\u266F',\n    '&shchcy;': '\\u0449',\n    '&shcy;': '\\u0448',\n    '&shortmid;': '\\u2223',\n    '&shortparallel;': '\\u2225',\n    '&shy': '\\u00AD',\n    '&shy;': '\\u00AD',\n    '&sigma;': '\\u03C3',\n    '&sigmaf;': '\\u03C2',\n    '&sigmav;': '\\u03C2',\n    '&sim;': '\\u223C',\n    '&simdot;': '\\u2A6A',\n    '&sime;': '\\u2243',\n    '&simeq;': '\\u2243',\n    '&simg;': '\\u2A9E',\n    '&simgE;': '\\u2AA0',\n    '&siml;': '\\u2A9D',\n    '&simlE;': '\\u2A9F',\n    '&simne;': '\\u2246',\n    '&simplus;': '\\u2A24',\n    '&simrarr;': '\\u2972',\n    '&slarr;': '\\u2190',\n    '&smallsetminus;': '\\u2216',\n    '&smashp;': '\\u2A33',\n    '&smeparsl;': '\\u29E4',\n    '&smid;': '\\u2223',\n    '&smile;': '\\u2323',\n    '&smt;': '\\u2AAA',\n    '&smte;': '\\u2AAC',\n    '&smtes;': '\\u2AAC\\uFE00',\n    '&softcy;': '\\u044C',\n    '&sol;': '\\u002F',\n    '&solb;': '\\u29C4',\n    '&solbar;': '\\u233F',\n    '&sopf;': '\\uD835\\uDD64',\n    '&spades;': '\\u2660',\n    '&spadesuit;': '\\u2660',\n    '&spar;': '\\u2225',\n    '&sqcap;': '\\u2293',\n    '&sqcaps;': '\\u2293\\uFE00',\n    '&sqcup;': '\\u2294',\n    '&sqcups;': '\\u2294\\uFE00',\n    '&sqsub;': '\\u228F',\n    '&sqsube;': '\\u2291',\n    '&sqsubset;': '\\u228F',\n    '&sqsubseteq;': '\\u2291',\n    '&sqsup;': '\\u2290',\n    '&sqsupe;': '\\u2292',\n    '&sqsupset;': '\\u2290',\n    '&sqsupseteq;': '\\u2292',\n    '&squ;': '\\u25A1',\n    '&square;': '\\u25A1',\n    '&squarf;': '\\u25AA',\n    '&squf;': '\\u25AA',\n    '&srarr;': '\\u2192',\n    '&sscr;': '\\uD835\\uDCC8',\n    '&ssetmn;': '\\u2216',\n    '&ssmile;': '\\u2323',\n    '&sstarf;': '\\u22C6',\n    '&star;': '\\u2606',\n    '&starf;': '\\u2605',\n    '&straightepsilon;': '\\u03F5',\n    '&straightphi;': '\\u03D5',\n    '&strns;': '\\u00AF',\n    '&sub;': '\\u2282',\n    '&subE;': '\\u2AC5',\n    '&subdot;': '\\u2ABD',\n    '&sube;': '\\u2286',\n    '&subedot;': '\\u2AC3',\n    '&submult;': '\\u2AC1',\n    '&subnE;': '\\u2ACB',\n    '&subne;': '\\u228A',\n    '&subplus;': '\\u2ABF',\n    '&subrarr;': '\\u2979',\n    '&subset;': '\\u2282',\n    '&subseteq;': '\\u2286',\n    '&subseteqq;': '\\u2AC5',\n    '&subsetneq;': '\\u228A',\n    '&subsetneqq;': '\\u2ACB',\n    '&subsim;': '\\u2AC7',\n    '&subsub;': '\\u2AD5',\n    '&subsup;': '\\u2AD3',\n    '&succ;': '\\u227B',\n    '&succapprox;': '\\u2AB8',\n    '&succcurlyeq;': '\\u227D',\n    '&succeq;': '\\u2AB0',\n    '&succnapprox;': '\\u2ABA',\n    '&succneqq;': '\\u2AB6',\n    '&succnsim;': '\\u22E9',\n    '&succsim;': '\\u227F',\n    '&sum;': '\\u2211',\n    '&sung;': '\\u266A',\n    '&sup1': '\\u00B9',\n    '&sup1;': '\\u00B9',\n    '&sup2': '\\u00B2',\n    '&sup2;': '\\u00B2',\n    '&sup3': '\\u00B3',\n    '&sup3;': '\\u00B3',\n    '&sup;': '\\u2283',\n    '&supE;': '\\u2AC6',\n    '&supdot;': '\\u2ABE',\n    '&supdsub;': '\\u2AD8',\n    '&supe;': '\\u2287',\n    '&supedot;': '\\u2AC4',\n    '&suphsol;': '\\u27C9',\n    '&suphsub;': '\\u2AD7',\n    '&suplarr;': '\\u297B',\n    '&supmult;': '\\u2AC2',\n    '&supnE;': '\\u2ACC',\n    '&supne;': '\\u228B',\n    '&supplus;': '\\u2AC0',\n    '&supset;': '\\u2283',\n    '&supseteq;': '\\u2287',\n    '&supseteqq;': '\\u2AC6',\n    '&supsetneq;': '\\u228B',\n    '&supsetneqq;': '\\u2ACC',\n    '&supsim;': '\\u2AC8',\n    '&supsub;': '\\u2AD4',\n    '&supsup;': '\\u2AD6',\n    '&swArr;': '\\u21D9',\n    '&swarhk;': '\\u2926',\n    '&swarr;': '\\u2199',\n    '&swarrow;': '\\u2199',\n    '&swnwar;': '\\u292A',\n    '&szlig': '\\u00DF',\n    '&szlig;': '\\u00DF',\n    '&target;': '\\u2316',\n    '&tau;': '\\u03C4',\n    '&tbrk;': '\\u23B4',\n    '&tcaron;': '\\u0165',\n    '&tcedil;': '\\u0163',\n    '&tcy;': '\\u0442',\n    '&tdot;': '\\u20DB',\n    '&telrec;': '\\u2315',\n    '&tfr;': '\\uD835\\uDD31',\n    '&there4;': '\\u2234',\n    '&therefore;': '\\u2234',\n    '&theta;': '\\u03B8',\n    '&thetasym;': '\\u03D1',\n    '&thetav;': '\\u03D1',\n    '&thickapprox;': '\\u2248',\n    '&thicksim;': '\\u223C',\n    '&thinsp;': '\\u2009',\n    '&thkap;': '\\u2248',\n    '&thksim;': '\\u223C',\n    '&thorn': '\\u00FE',\n    '&thorn;': '\\u00FE',\n    '&tilde;': '\\u02DC',\n    '&times': '\\u00D7',\n    '&times;': '\\u00D7',\n    '&timesb;': '\\u22A0',\n    '&timesbar;': '\\u2A31',\n    '&timesd;': '\\u2A30',\n    '&tint;': '\\u222D',\n    '&toea;': '\\u2928',\n    '&top;': '\\u22A4',\n    '&topbot;': '\\u2336',\n    '&topcir;': '\\u2AF1',\n    '&topf;': '\\uD835\\uDD65',\n    '&topfork;': '\\u2ADA',\n    '&tosa;': '\\u2929',\n    '&tprime;': '\\u2034',\n    '&trade;': '\\u2122',\n    '&triangle;': '\\u25B5',\n    '&triangledown;': '\\u25BF',\n    '&triangleleft;': '\\u25C3',\n    '&trianglelefteq;': '\\u22B4',\n    '&triangleq;': '\\u225C',\n    '&triangleright;': '\\u25B9',\n    '&trianglerighteq;': '\\u22B5',\n    '&tridot;': '\\u25EC',\n    '&trie;': '\\u225C',\n    '&triminus;': '\\u2A3A',\n    '&triplus;': '\\u2A39',\n    '&trisb;': '\\u29CD',\n    '&tritime;': '\\u2A3B',\n    '&trpezium;': '\\u23E2',\n    '&tscr;': '\\uD835\\uDCC9',\n    '&tscy;': '\\u0446',\n    '&tshcy;': '\\u045B',\n    '&tstrok;': '\\u0167',\n    '&twixt;': '\\u226C',\n    '&twoheadleftarrow;': '\\u219E',\n    '&twoheadrightarrow;': '\\u21A0',\n    '&uArr;': '\\u21D1',\n    '&uHar;': '\\u2963',\n    '&uacute': '\\u00FA',\n    '&uacute;': '\\u00FA',\n    '&uarr;': '\\u2191',\n    '&ubrcy;': '\\u045E',\n    '&ubreve;': '\\u016D',\n    '&ucirc': '\\u00FB',\n    '&ucirc;': '\\u00FB',\n    '&ucy;': '\\u0443',\n    '&udarr;': '\\u21C5',\n    '&udblac;': '\\u0171',\n    '&udhar;': '\\u296E',\n    '&ufisht;': '\\u297E',\n    '&ufr;': '\\uD835\\uDD32',\n    '&ugrave': '\\u00F9',\n    '&ugrave;': '\\u00F9',\n    '&uharl;': '\\u21BF',\n    '&uharr;': '\\u21BE',\n    '&uhblk;': '\\u2580',\n    '&ulcorn;': '\\u231C',\n    '&ulcorner;': '\\u231C',\n    '&ulcrop;': '\\u230F',\n    '&ultri;': '\\u25F8',\n    '&umacr;': '\\u016B',\n    '&uml': '\\u00A8',\n    '&uml;': '\\u00A8',\n    '&uogon;': '\\u0173',\n    '&uopf;': '\\uD835\\uDD66',\n    '&uparrow;': '\\u2191',\n    '&updownarrow;': '\\u2195',\n    '&upharpoonleft;': '\\u21BF',\n    '&upharpoonright;': '\\u21BE',\n    '&uplus;': '\\u228E',\n    '&upsi;': '\\u03C5',\n    '&upsih;': '\\u03D2',\n    '&upsilon;': '\\u03C5',\n    '&upuparrows;': '\\u21C8',\n    '&urcorn;': '\\u231D',\n    '&urcorner;': '\\u231D',\n    '&urcrop;': '\\u230E',\n    '&uring;': '\\u016F',\n    '&urtri;': '\\u25F9',\n    '&uscr;': '\\uD835\\uDCCA',\n    '&utdot;': '\\u22F0',\n    '&utilde;': '\\u0169',\n    '&utri;': '\\u25B5',\n    '&utrif;': '\\u25B4',\n    '&uuarr;': '\\u21C8',\n    '&uuml': '\\u00FC',\n    '&uuml;': '\\u00FC',\n    '&uwangle;': '\\u29A7',\n    '&vArr;': '\\u21D5',\n    '&vBar;': '\\u2AE8',\n    '&vBarv;': '\\u2AE9',\n    '&vDash;': '\\u22A8',\n    '&vangrt;': '\\u299C',\n    '&varepsilon;': '\\u03F5',\n    '&varkappa;': '\\u03F0',\n    '&varnothing;': '\\u2205',\n    '&varphi;': '\\u03D5',\n    '&varpi;': '\\u03D6',\n    '&varpropto;': '\\u221D',\n    '&varr;': '\\u2195',\n    '&varrho;': '\\u03F1',\n    '&varsigma;': '\\u03C2',\n    '&varsubsetneq;': '\\u228A\\uFE00',\n    '&varsubsetneqq;': '\\u2ACB\\uFE00',\n    '&varsupsetneq;': '\\u228B\\uFE00',\n    '&varsupsetneqq;': '\\u2ACC\\uFE00',\n    '&vartheta;': '\\u03D1',\n    '&vartriangleleft;': '\\u22B2',\n    '&vartriangleright;': '\\u22B3',\n    '&vcy;': '\\u0432',\n    '&vdash;': '\\u22A2',\n    '&vee;': '\\u2228',\n    '&veebar;': '\\u22BB',\n    '&veeeq;': '\\u225A',\n    '&vellip;': '\\u22EE',\n    '&verbar;': '\\u007C',\n    '&vert;': '\\u007C',\n    '&vfr;': '\\uD835\\uDD33',\n    '&vltri;': '\\u22B2',\n    '&vnsub;': '\\u2282\\u20D2',\n    '&vnsup;': '\\u2283\\u20D2',\n    '&vopf;': '\\uD835\\uDD67',\n    '&vprop;': '\\u221D',\n    '&vrtri;': '\\u22B3',\n    '&vscr;': '\\uD835\\uDCCB',\n    '&vsubnE;': '\\u2ACB\\uFE00',\n    '&vsubne;': '\\u228A\\uFE00',\n    '&vsupnE;': '\\u2ACC\\uFE00',\n    '&vsupne;': '\\u228B\\uFE00',\n    '&vzigzag;': '\\u299A',\n    '&wcirc;': '\\u0175',\n    '&wedbar;': '\\u2A5F',\n    '&wedge;': '\\u2227',\n    '&wedgeq;': '\\u2259',\n    '&weierp;': '\\u2118',\n    '&wfr;': '\\uD835\\uDD34',\n    '&wopf;': '\\uD835\\uDD68',\n    '&wp;': '\\u2118',\n    '&wr;': '\\u2240',\n    '&wreath;': '\\u2240',\n    '&wscr;': '\\uD835\\uDCCC',\n    '&xcap;': '\\u22C2',\n    '&xcirc;': '\\u25EF',\n    '&xcup;': '\\u22C3',\n    '&xdtri;': '\\u25BD',\n    '&xfr;': '\\uD835\\uDD35',\n    '&xhArr;': '\\u27FA',\n    '&xharr;': '\\u27F7',\n    '&xi;': '\\u03BE',\n    '&xlArr;': '\\u27F8',\n    '&xlarr;': '\\u27F5',\n    '&xmap;': '\\u27FC',\n    '&xnis;': '\\u22FB',\n    '&xodot;': '\\u2A00',\n    '&xopf;': '\\uD835\\uDD69',\n    '&xoplus;': '\\u2A01',\n    '&xotime;': '\\u2A02',\n    '&xrArr;': '\\u27F9',\n    '&xrarr;': '\\u27F6',\n    '&xscr;': '\\uD835\\uDCCD',\n    '&xsqcup;': '\\u2A06',\n    '&xuplus;': '\\u2A04',\n    '&xutri;': '\\u25B3',\n    '&xvee;': '\\u22C1',\n    '&xwedge;': '\\u22C0',\n    '&yacute': '\\u00FD',\n    '&yacute;': '\\u00FD',\n    '&yacy;': '\\u044F',\n    '&ycirc;': '\\u0177',\n    '&ycy;': '\\u044B',\n    '&yen': '\\u00A5',\n    '&yen;': '\\u00A5',\n    '&yfr;': '\\uD835\\uDD36',\n    '&yicy;': '\\u0457',\n    '&yopf;': '\\uD835\\uDD6A',\n    '&yscr;': '\\uD835\\uDCCE',\n    '&yucy;': '\\u044E',\n    '&yuml': '\\u00FF',\n    '&yuml;': '\\u00FF',\n    '&zacute;': '\\u017A',\n    '&zcaron;': '\\u017E',\n    '&zcy;': '\\u0437',\n    '&zdot;': '\\u017C',\n    '&zeetrf;': '\\u2128',\n    '&zeta;': '\\u03B6',\n    '&zfr;': '\\uD835\\uDD37',\n    '&zhcy;': '\\u0436',\n    '&zigrarr;': '\\u21DD',\n    '&zopf;': '\\uD835\\uDD6B',\n    '&zscr;': '\\uD835\\uDCCF',\n    '&zwj;': '\\u200D',\n    '&zwnj;': '\\u200C'\n};\n\nexport default htmlEntities;\n", "import { decodeWords } from './decode-strings.js';\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */\nfunction _handleAddress(tokens) {\n    let token;\n    let isGroup = false;\n    let state = 'text';\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n\n    // Filter out <addresses>, (comments) and regular text\n    for (i = 0, len = tokens.length; i < len; i++) {\n        token = tokens[i];\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n            }\n        } else if (token.value) {\n            if (state === 'address') {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, '');\n            }\n            data[state].push(token.value);\n        }\n    }\n\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(' ');\n        addresses.push({\n            name: decodeWords(data.text || (address && address.name)),\n            group: data.group.length ? addressParser(data.group.join(',')) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for (i = data.text.length - 1; i >= 0; i--) {\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n\n            let _regexHandler = function (address) {\n                if (!data.address.length) {\n                    data.address = [address.trim()];\n                    return ' ';\n                } else {\n                    return address;\n                }\n            };\n\n            // still no address\n            if (!data.address.length) {\n                for (i = data.text.length - 1; i >= 0; i--) {\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n\n        // Join values with spaces\n        data.text = data.text.join(' ');\n        data.address = data.address.join(' ');\n\n        if (!data.address && /^=\\?[^=]+?=$/.test(data.text.trim())) {\n            // try to extract words from text content\n            const parsedSubAddresses = addressParser(decodeWords(data.text));\n            if (parsedSubAddresses && parsedSubAddresses.length) {\n                return parsedSubAddresses;\n            }\n        }\n\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || '',\n                name: decodeWords(data.text || data.address || '')\n            };\n\n            if (address.address === address.name) {\n                if ((address.address || '').match(/@/)) {\n                    address.name = '';\n                } else {\n                    address.address = '';\n                }\n            }\n\n            addresses.push(address);\n        }\n    }\n\n    return addresses;\n}\n\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */\nclass Tokenizer {\n    constructor(str) {\n        this.str = (str || '').toString();\n        this.operatorCurrent = '';\n        this.operatorExpecting = '';\n        this.node = null;\n        this.escaped = false;\n\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */\n        this.operators = {\n            '\"': '\"',\n            '(': ')',\n            '<': '>',\n            ',': '',\n            ':': ';',\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            ';': ''\n        };\n    }\n\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */\n    tokenize() {\n        let chr,\n            list = [];\n        for (let i = 0, len = this.str.length; i < len; i++) {\n            chr = this.str.charAt(i);\n            this.checkChar(chr);\n        }\n\n        this.list.forEach(node => {\n            node.value = (node.value || '').toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n\n        return list;\n    }\n\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */\n    checkChar(chr) {\n        if (this.escaped) {\n            // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = '';\n            this.escaped = false;\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: 'operator',\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if (['\"', \"'\"].includes(this.operatorExpecting) && chr === '\\\\') {\n            this.escaped = true;\n            return;\n        }\n\n        if (!this.node) {\n            this.node = {\n                type: 'text',\n                value: ''\n            };\n            this.list.push(this.node);\n        }\n\n        if (chr === '\\n') {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = ' ';\n        }\n\n        if (chr.charCodeAt(0) >= 0x21 || [' ', '\\t'].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n\n        this.escaped = false;\n    }\n}\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */\nfunction addressParser(str, options) {\n    options = options || {};\n\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n\n    tokens.forEach(token => {\n        if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n\n    if (address.length) {\n        addresses.push(address);\n    }\n\n    addresses.forEach(address => {\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = list => {\n            list.forEach(address => {\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n\n    return parsedAddresses;\n}\n\n// expose to the world\nexport default addressParser;\n", "// Code from: https://gist.githubusercontent.com/jonleighton/958841/raw/fb05a8632efb75d85d43deb593df04367ce48371/base64ArrayBuffer.js\n\n// Converts an ArrayBuffer directly to base64, without any intermediate 'convert to string then\n// use window.btoa' step. According to my tests, this appears to be a faster approach:\n// http://jsperf.com/encoding-xhr-image-data/5\n\n/*\nMIT LICENSE\n\nCopyright 2011 Jon Leighton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport function base64ArrayBuffer(arrayBuffer) {\n    var base64 = '';\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    var bytes = new Uint8Array(arrayBuffer);\n    var byteLength = bytes.byteLength;\n    var byteRemainder = byteLength % 3;\n    var mainLength = byteLength - byteRemainder;\n\n    var a, b, c, d;\n    var chunk;\n\n    // Main loop deals with bytes in chunks of 3\n    for (var i = 0; i < mainLength; i = i + 3) {\n        // Combine the three bytes into a single integer\n        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n        d = chunk & 63; // 63       = 2^6 - 1\n\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    }\n\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n        chunk = bytes[mainLength];\n\n        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n        base64 += encodings[a] + encodings[b] + '==';\n    } else if (byteRemainder == 2) {\n        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n        base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n    }\n\n    return base64;\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["result", "XMLParser", "attStr", "XMLParser", "import_fast_xml_parser", "c", "address", "addresses", "i"]
}
