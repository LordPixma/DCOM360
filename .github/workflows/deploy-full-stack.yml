name: Full Stack Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Choose deployment target'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - frontend-only
        - backend-only
        - migrations-only

env:
  NODE_VERSION: '20'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      worker-changed: ${{ steps.changes.outputs.worker }}
      ingest-worker-changed: ${{ steps.changes.outputs.ingest-worker }}
      migrations-changed: ${{ steps.changes.outputs.migrations }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Detect changes
        id: changes
        run: |
          # Check which directories have changes
          if git diff --name-only HEAD^ HEAD | grep -q "^frontend/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD^ HEAD | grep -q "^worker/"; then
            echo "worker=true" >> $GITHUB_OUTPUT
          else
            echo "worker=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD^ HEAD | grep -q "^ingest-worker/"; then
            echo "ingest-worker=true" >> $GITHUB_OUTPUT
          else
            echo "ingest-worker=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD^ HEAD | grep -q "^worker/migrations/"; then
            echo "migrations=true" >> $GITHUB_OUTPUT
          else
            echo "migrations=false" >> $GITHUB_OUTPUT
          fi

  deploy-migrations:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.migrations-changed == 'true' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'migrations-only'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Apply database migrations
        run: |
          cd worker
          npx wrangler d1 migrations apply dcom360-db --env production --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-worker:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-migrations]
    if: always() && (needs.detect-changes.outputs.worker-changed == 'true' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'backend-only')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: worker/package-lock.json
          
      - name: Install dependencies
        run: |
          cd worker
          npm ci
          
      - name: Type check
        run: |
          cd worker
          npm run typecheck
          
      - name: Deploy main worker
        run: |
          cd worker
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-ingest-worker:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-migrations]
    if: always() && (needs.detect-changes.outputs.ingest-worker-changed == 'true' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'backend-only')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ingest-worker/package-lock.json
          
      - name: Install dependencies
        run: |
          cd ingest-worker
          npm ci
          
      - name: Type check
        run: |
          cd ingest-worker
          npm run typecheck
          
      - name: Deploy ingest worker
        run: |
          cd ingest-worker
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-worker]
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'frontend-only')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run tests
        run: |
          cd frontend
          npm run test
          
      - name: Build project
        run: |
          cd frontend
          npm run build
          
      - name: Deploy to Cloudflare Pages
        run: |
          cd frontend
          npx wrangler pages deploy dist --project-name flare360-frontend
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
  notification:
    runs-on: ubuntu-latest
    needs: [deploy-migrations, deploy-worker, deploy-ingest-worker, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üöÄ Deployment Summary:"
          echo "üìä Database: ${{ needs.deploy-migrations.result }}"
          echo "üîß Main Worker: ${{ needs.deploy-worker.result }}"
          echo "üì• Ingest Worker: ${{ needs.deploy-ingest-worker.result }}"
          echo "üåê Frontend: ${{ needs.deploy-frontend.result }}"
          echo ""
          echo "üåç Production URLs:"
          echo "‚Ä¢ Frontend: https://flare360-frontend.pages.dev"
          echo "‚Ä¢ Custom Domain: https://alerts.flare360.org"
          echo "‚Ä¢ API: https://flare360-worker-production.samuel-1e5.workers.dev"