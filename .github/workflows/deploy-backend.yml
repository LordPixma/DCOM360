name: Deploy Backend Workers

on:
  push:
    branches: [ main ]
    paths: 
      - 'worker/**'
      - 'ingest-worker/**'
      - '.github/workflows/deploy-backend.yml'

jobs:
  deploy-worker:
    runs-on: ubuntu-latest
    name: Deploy Main Worker
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: worker/package-lock.json
          
      - name: Install dependencies
        run: |
          cd worker
          npm ci
          
      - name: Type check
        run: |
          cd worker
          npm run typecheck
          
      - name: Deploy to Production
        run: |
          cd worker
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
  deploy-ingest-worker:
    runs-on: ubuntu-latest
    name: Deploy Ingest Worker
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ingest-worker/package-lock.json
          
      - name: Install dependencies
        run: |
          cd ingest-worker
          npm ci
          
      - name: Type check
        run: |
          cd ingest-worker
          npm run typecheck
          
      - name: Deploy to Production
        run: |
          cd ingest-worker
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
  apply-migrations:
    runs-on: ubuntu-latest
    name: Apply Database Migrations
    needs: [deploy-worker]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Apply migrations to production
        run: |
          cd worker
          # Check for new migration files and apply them
          npx wrangler d1 migrations list dcom360-db --env production
          npx wrangler d1 migrations apply dcom360-db --env production --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}