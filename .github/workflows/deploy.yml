name: Deploy Workers and Smoke Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  WORKER_URL: ${{ vars.WORKER_URL }}
  INGEST_URL: ${{ vars.INGEST_URL }}
  PAGES_PROJECT_NAME: ${{ vars.PAGES_PROJECT_NAME }}
  INGEST_TOKEN: ${{ secrets.INGEST_TOKEN }}

jobs:
  deploy-ingest:
    name: Deploy Ingestion Worker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ingest-worker/package-lock.json
      - name: Install dependencies (ingest-worker)
        working-directory: ingest-worker
        run: npm ci --no-audit --no-fund
      - name: Deploy ingest-worker
        working-directory: ingest-worker
        run: npx wrangler@4 deploy --env production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
      - name: Configure ingest secret (production)
        working-directory: ingest-worker
        env:
          INGEST_TOKEN: ${{ env.INGEST_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
        run: |
          # Store the ingest token as a Cloudflare Worker secret (production env)
          # Deploying first removes any legacy plain var binding so the secret name won't conflict.
          set -euo pipefail
          : "${INGEST_TOKEN:?Missing INGEST_TOKEN}"
          printf "%s" "$INGEST_TOKEN" | npx wrangler@4 secret put INGEST_SECRET --env production

  deploy-api:
    name: Deploy API Worker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            worker/package-lock.json
      - name: Install dependencies (worker)
        working-directory: worker
        run: npm ci --no-audit --no-fund
      - name: Deploy worker
        working-directory: worker
        run: npx wrangler@4 deploy --env production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}

  smoke-test:
    name: Post-deploy smoke tests
    runs-on: ubuntu-latest
    needs: [deploy-ingest, deploy-api]
    steps:
      - name: Ensure jq is installed
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
      - name: Prepare URLs
        id: prep
        run: |
          API_URL="${WORKER_URL:-https://flare360-worker.samuel-1e5.workers.dev}"
          ING_URL="${INGEST_URL:-https://flare360-ingest.samuel-1e5.workers.dev}"
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "ing_url=$ING_URL" >> $GITHUB_OUTPUT
      - name: Check /api/health
        run: |
          set -euo pipefail
          code=$(curl -s -o health.json -w "%{http_code}" "${{ steps.prep.outputs.api_url }}/api/health")
          test "$code" = "200"
          grep -q '"success":\s*true' health.json
      - name: Check /api/disasters/summary
        run: |
          set -euo pipefail
          code=$(curl -s -o summary.json -w "%{http_code}" "${{ steps.prep.outputs.api_url }}/api/disasters/summary")
          test "$code" = "200"
          grep -q '"success":\s*true' summary.json
          grep -q '"totals"' summary.json
      - name: OPTIONS on ingest endpoint
        run: |
          set -euo pipefail
          code=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS "${{ steps.prep.outputs.ing_url }}/ingest/email")
          test "$code" = "204"
      - name: Ingest a sample event
        id: ingest
        run: |
          set -euo pipefail
          set -x
          TITLE="CI Smoke $(date +%s)"
          DATA=$(jq -nc --arg title "$TITLE" '{subject:"[GDACS] Test", body:("Type: Earthquake\nSeverity: RED\nCountry: NG\nLat: 9.08\nLng: 8.68\nDate: 2025-09-03T10:00:00Z\nTitle: " + $title + "\nDescription: CI smoke test event.") }')
          : "${INGEST_TOKEN:?Missing INGEST_TOKEN secret}"
          code=$(curl -s -o resp.json -w "%{http_code}" -X POST "${{ steps.prep.outputs.ing_url }}/ingest/email" -H "authorization: Bearer ${INGEST_TOKEN}" -H 'content-type: application/json' --data "$DATA" || true)
          echo "HTTP_CODE=$code"
          if [ "$code" != "200" ]; then
            echo "Response body:" && cat resp.json || true
            exit 1
          fi
          grep -q '"success":\s*true' resp.json
          echo "title=$TITLE" >> $GITHUB_OUTPUT
      - name: Assert event visible in current
        run: |
          set -euo pipefail
          sleep 2
          curl -s "${{ steps.prep.outputs.api_url }}/api/disasters/current?limit=50" -o current.json
          grep -q "${{ steps.ingest.outputs.title }}" current.json

  pages-deploy:
    name: Deploy Pages (production)
    runs-on: ubuntu-latest
    needs: [deploy-api, smoke-test, frontend-e2e]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
      - name: Ensure jq is installed
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_BASE: ${{ env.WORKER_URL }}
          VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}
        run: |
          npm ci --no-audit --no-fund
          npm run build
      - name: Deploy to Pages (production)
        run: |
          npx wrangler@4 pages deploy frontend/dist --project-name "${PAGES_PROJECT_NAME}" --branch main
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
      - name: Invalidate preview deployments (best-effort)
        run: |
          set -euo pipefail
          PROJECT="${PAGES_PROJECT_NAME:-flare360-frontend}"
          # List deployments and delete previews (best-effort; ignore failures if API differs)
          curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments" \
            | jq -r '.result[] | select(.environment=="preview") | .id' > ids.txt || true
          while read -r id; do
            [ -n "$id" ] || continue
            echo "Deleting preview deployment $id"
            curl -s -X DELETE -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT/deployments/$id" || true
          done < ids.txt

  frontend-e2e:
    name: Frontend E2E (Playwright)
    runs-on: ubuntu-latest
    needs: [deploy-api]
    env:
      VITE_API_BASE: ${{ vars.WORKER_URL }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
      - name: Install deps and browsers
        working-directory: frontend
        run: |
          npm ci --no-audit --no-fund
          npx playwright install --with-deps chromium
      - name: Run Playwright smoke
        working-directory: frontend
        env:
          VITE_API_BASE: ${{ env.VITE_API_BASE }}
        run: |
          npx playwright test
      
